
PW-2_firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004768  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004944  08004944  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004944  08004944  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004944  08004944  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800494c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000164  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011254  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000236d  00000000  00000000  000312f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00033668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d28  00000000  00000000  00034458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cdc7  00000000  00000000  00035180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c4d  00000000  00000000  00051f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3f40  00000000  00000000  00062b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00106ad4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ca4  00000000  00000000  00106b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048d8 	.word	0x080048d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080048d8 	.word	0x080048d8

080001c8 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>:
	}else{
		return read_retval::more_message_received;
	}
}

CAN_303x8::CAN_303x8(CAN_HandleTypeDef *hcan) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	4a08      	ldr	r2, [pc, #32]	; (80001f4 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef+0x2c>)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->hcan = hcan;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	683a      	ldr	r2, [r7, #0]
 80001dc:	605a      	str	r2, [r3, #4]
	HAL_CAN_Start(this->hcan);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	685b      	ldr	r3, [r3, #4]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 ff23 	bl	800102e <HAL_CAN_Start>
}
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4618      	mov	r0, r3
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	08004904 	.word	0x08004904

080001f8 <_ZN7stm_CAN9CAN_303x8D1Ev>:

CAN_303x8::~CAN_303x8() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	4a06      	ldr	r2, [pc, #24]	; (800021c <_ZN7stm_CAN9CAN_303x8D1Ev+0x24>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	HAL_CAN_Stop(this->hcan);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	4618      	mov	r0, r3
 800020c:	f000 ff53 	bl	80010b6 <HAL_CAN_Stop>
}
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4618      	mov	r0, r3
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	08004904 	.word	0x08004904

08000220 <_ZN7stm_CAN9CAN_303x8D0Ev>:
CAN_303x8::~CAN_303x8() {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
}
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ffe5 	bl	80001f8 <_ZN7stm_CAN9CAN_303x8D1Ev>
 800022e:	2194      	movs	r1, #148	; 0x94
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f004 fabe 	bl	80047b2 <_ZdlPvj>
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4618      	mov	r0, r3
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <_ZN6ws28128NeoPixel19update_write_bufferEv>:

#include "NeoPixel.h"

namespace ws2812 {

void NeoPixel::update_write_buffer(){
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < pixel_num; i++){
 8000248:	2300      	movs	r3, #0
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	2b03      	cmp	r3, #3
 8000250:	d854      	bhi.n	80002fc <_ZN6ws28128NeoPixel19update_write_bufferEv+0xbc>
		for(uint8_t j = 0; j < color_num; j++){
 8000252:	2300      	movs	r3, #0
 8000254:	73bb      	strb	r3, [r7, #14]
 8000256:	7bbb      	ldrb	r3, [r7, #14]
 8000258:	2b02      	cmp	r3, #2
 800025a:	d84b      	bhi.n	80002f4 <_ZN6ws28128NeoPixel19update_write_bufferEv+0xb4>
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 800025c:	7bbb      	ldrb	r3, [r7, #14]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d108      	bne.n	8000274 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x34>
 8000262:	7bfa      	ldrb	r2, [r7, #15]
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	4613      	mov	r3, r2
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	4413      	add	r3, r2
 800026c:	440b      	add	r3, r1
 800026e:	3370      	adds	r3, #112	; 0x70
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	e018      	b.n	80002a6 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 8000274:	7bbb      	ldrb	r3, [r7, #14]
 8000276:	2b01      	cmp	r3, #1
 8000278:	d108      	bne.n	800028c <_ZN6ws28128NeoPixel19update_write_bufferEv+0x4c>
							: 	(j == 1) ? NeoPixel::colors[i].red
 800027a:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 800027c:	6879      	ldr	r1, [r7, #4]
 800027e:	4613      	mov	r3, r2
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	4413      	add	r3, r2
 8000284:	440b      	add	r3, r1
 8000286:	336f      	adds	r3, #111	; 0x6f
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	e00c      	b.n	80002a6 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 800028c:	7bbb      	ldrb	r3, [r7, #14]
 800028e:	2b02      	cmp	r3, #2
 8000290:	d108      	bne.n	80002a4 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x64>
							: 	(j == 2) ? NeoPixel::colors[i].blue : 0;
 8000292:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	4613      	mov	r3, r2
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	4413      	add	r3, r2
 800029c:	440b      	add	r3, r1
 800029e:	3371      	adds	r3, #113	; 0x71
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	e000      	b.n	80002a6 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 80002a4:	2300      	movs	r3, #0
 80002a6:	733b      	strb	r3, [r7, #12]
			for(uint8_t k = 0; k < byte; k++){
 80002a8:	2300      	movs	r3, #0
 80002aa:	737b      	strb	r3, [r7, #13]
 80002ac:	7b7b      	ldrb	r3, [r7, #13]
 80002ae:	2b07      	cmp	r3, #7
 80002b0:	d81c      	bhi.n	80002ec <_ZN6ws28128NeoPixel19update_write_bufferEv+0xac>
				NeoPixel::write_buffer[(i * color_num + j) * byte + k] = ((color & (0x80 >> k)) > 0) ? NeoPixel::high : NeoPixel::low;
 80002b2:	7b3a      	ldrb	r2, [r7, #12]
 80002b4:	7b7b      	ldrb	r3, [r7, #13]
 80002b6:	2180      	movs	r1, #128	; 0x80
 80002b8:	fa41 f303 	asr.w	r3, r1, r3
 80002bc:	4013      	ands	r3, r2
 80002be:	2b00      	cmp	r3, #0
 80002c0:	dd02      	ble.n	80002c8 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x88>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	7b1a      	ldrb	r2, [r3, #12]
 80002c6:	e001      	b.n	80002cc <_ZN6ws28128NeoPixel19update_write_bufferEv+0x8c>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7b5a      	ldrb	r2, [r3, #13]
 80002cc:	7bf9      	ldrb	r1, [r7, #15]
 80002ce:	460b      	mov	r3, r1
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	4419      	add	r1, r3
 80002d4:	7bbb      	ldrb	r3, [r7, #14]
 80002d6:	440b      	add	r3, r1
 80002d8:	00d9      	lsls	r1, r3, #3
 80002da:	7b7b      	ldrb	r3, [r7, #13]
 80002dc:	440b      	add	r3, r1
 80002de:	6879      	ldr	r1, [r7, #4]
 80002e0:	440b      	add	r3, r1
 80002e2:	739a      	strb	r2, [r3, #14]
			for(uint8_t k = 0; k < byte; k++){
 80002e4:	7b7b      	ldrb	r3, [r7, #13]
 80002e6:	3301      	adds	r3, #1
 80002e8:	737b      	strb	r3, [r7, #13]
 80002ea:	e7df      	b.n	80002ac <_ZN6ws28128NeoPixel19update_write_bufferEv+0x6c>
		for(uint8_t j = 0; j < color_num; j++){
 80002ec:	7bbb      	ldrb	r3, [r7, #14]
 80002ee:	3301      	adds	r3, #1
 80002f0:	73bb      	strb	r3, [r7, #14]
 80002f2:	e7b0      	b.n	8000256 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x16>
	for(uint8_t i = 0; i < pixel_num; i++){
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	3301      	adds	r3, #1
 80002f8:	73fb      	strb	r3, [r7, #15]
 80002fa:	e7a7      	b.n	800024c <_ZN6ws28128NeoPixel19update_write_bufferEv+0xc>
			}
		}
	}
	NeoPixel::write_buffer[data_len] = 0;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <_ZN6ws28128NeoPixel4rendEv>:

void NeoPixel::rend(){
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	update_write_buffer();
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f7ff ff91 	bl	8000240 <_ZN6ws28128NeoPixel19update_write_bufferEv>
	if(NeoPixel::hdma->State != HAL_DMA_STATE_READY) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000326:	2b01      	cmp	r3, #1
 8000328:	d007      	beq.n	800033a <_ZN6ws28128NeoPixel4rendEv+0x2a>
    	HAL_TIM_PWM_Stop_DMA(NeoPixel::htim, NeoPixel::Channel);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	4619      	mov	r1, r3
 8000334:	4610      	mov	r0, r2
 8000336:	f003 f863 	bl	8003400 <HAL_TIM_PWM_Stop_DMA>
//		 return;
  	}
	HAL_TIM_PWM_Start_DMA(NeoPixel::htim, NeoPixel::Channel, (uint32_t*)NeoPixel::write_buffer, data_len + reset_bit);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	6818      	ldr	r0, [r3, #0]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	6859      	ldr	r1, [r3, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f103 020e 	add.w	r2, r3, #14
 8000348:	2361      	movs	r3, #97	; 0x61
 800034a:	f002 fe53 	bl	8002ff4 <HAL_TIM_PWM_Start_DMA>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>:

NeoPixel::NeoPixel(TIM_HandleTypeDef *htim, uint32_t Channel, DMA_HandleTypeDef *hdma, uint8_t high_level_pulse_len, uint8_t low_level_pulse_len) {
 8000356:	b480      	push	{r7}
 8000358:	b085      	sub	sp, #20
 800035a:	af00      	add	r7, sp, #0
 800035c:	60f8      	str	r0, [r7, #12]
 800035e:	60b9      	str	r1, [r7, #8]
 8000360:	607a      	str	r2, [r7, #4]
 8000362:	603b      	str	r3, [r7, #0]
	// TODO Auto-generated constructor stub
	NeoPixel::htim = htim;
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	68ba      	ldr	r2, [r7, #8]
 8000368:	601a      	str	r2, [r3, #0]
	NeoPixel::Channel = Channel;
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	605a      	str	r2, [r3, #4]
	NeoPixel::hdma = hdma;
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	683a      	ldr	r2, [r7, #0]
 8000374:	609a      	str	r2, [r3, #8]
	NeoPixel::high = high_level_pulse_len;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	7e3a      	ldrb	r2, [r7, #24]
 800037a:	731a      	strb	r2, [r3, #12]
	NeoPixel::low = low_level_pulse_len;
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	7f3a      	ldrb	r2, [r7, #28]
 8000380:	735a      	strb	r2, [r3, #13]
}
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	4618      	mov	r0, r3
 8000386:	3714      	adds	r7, #20
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b590      	push	{r4, r7, lr}
 8000392:	b0cf      	sub	sp, #316	; 0x13c
 8000394:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000396:	f000 fcc5 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039a:	f000 f951 	bl	8000640 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039e:	f000 fa95 	bl	80008cc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80003a2:	f000 fa75 	bl	8000890 <_ZL11MX_DMA_Initv>
  MX_CAN_Init();
 80003a6:	f000 f99b 	bl	80006e0 <_ZL11MX_CAN_Initv>
  MX_TIM3_Init();
 80003aa:	f000 f9d5 	bl	8000758 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 80003ae:	f000 fa3b 	bl	8000828 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  stm_CAN::CAN_303x8 can(&hcan);
 80003b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80003b6:	499b      	ldr	r1, [pc, #620]	; (8000624 <main+0x294>)
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ff05 	bl	80001c8 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>
  ws2812::NeoPixel pixels(&htim3, TIM_CHANNEL_4, &hdma_tim3_ch4_up, 45, 22);
 80003be:	f107 0010 	add.w	r0, r7, #16
 80003c2:	2316      	movs	r3, #22
 80003c4:	9301      	str	r3, [sp, #4]
 80003c6:	232d      	movs	r3, #45	; 0x2d
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	4b97      	ldr	r3, [pc, #604]	; (8000628 <main+0x298>)
 80003cc:	220c      	movs	r2, #12
 80003ce:	4997      	ldr	r1, [pc, #604]	; (800062c <main+0x29c>)
 80003d0:	f7ff ffc1 	bl	8000356 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>

  constexpr ws2812::color _orenge = {48, 24, 0};
 80003d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80003d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80003dc:	4a94      	ldr	r2, [pc, #592]	; (8000630 <main+0x2a0>)
 80003de:	6812      	ldr	r2, [r2, #0]
 80003e0:	4611      	mov	r1, r2
 80003e2:	8019      	strh	r1, [r3, #0]
 80003e4:	3302      	adds	r3, #2
 80003e6:	0c12      	lsrs	r2, r2, #16
 80003e8:	701a      	strb	r2, [r3, #0]
  constexpr ws2812::color _blue = {0, 48, 128};
 80003ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80003ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80003f2:	4a90      	ldr	r2, [pc, #576]	; (8000634 <main+0x2a4>)
 80003f4:	6812      	ldr	r2, [r2, #0]
 80003f6:	4611      	mov	r1, r2
 80003f8:	8019      	strh	r1, [r3, #0]
 80003fa:	3302      	adds	r3, #2
 80003fc:	0c12      	lsrs	r2, r2, #16
 80003fe:	701a      	strb	r2, [r3, #0]
  constexpr ws2812::color _green = {0, 48, 0};
 8000400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000404:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
 800040c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000410:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000414:	2230      	movs	r2, #48	; 0x30
 8000416:	705a      	strb	r2, [r3, #1]
 8000418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800041c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000420:	2200      	movs	r2, #0
 8000422:	709a      	strb	r2, [r3, #2]
  constexpr ws2812::color _purple = {24, 0, 72};
  constexpr ws2812::color _white = {12, 16, 32};
 8000424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800042c:	4a82      	ldr	r2, [pc, #520]	; (8000638 <main+0x2a8>)
 800042e:	6812      	ldr	r2, [r2, #0]
 8000430:	4611      	mov	r1, r2
 8000432:	8019      	strh	r1, [r3, #0]
 8000434:	3302      	adds	r3, #2
 8000436:	0c12      	lsrs	r2, r2, #16
 8000438:	701a      	strb	r2, [r3, #0]
  constexpr ws2812::color _full = {255, 255, 255};

  HAL_GPIO_WritePin(IM920_RESET_GPIO_Port, IM920_RESET_Pin, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000444:	f001 faf0 	bl	8001a28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IM920_IO10_GPIO_Port, IM920_IO10_Pin, GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2180      	movs	r1, #128	; 0x80
 800044c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000450:	f001 faea 	bl	8001a28 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000454:	200a      	movs	r0, #10
 8000456:	f000 fccb 	bl	8000df0 <HAL_Delay>
  HAL_GPIO_WritePin(IM920_RESET_GPIO_Port, IM920_RESET_Pin, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000464:	f001 fae0 	bl	8001a28 <HAL_GPIO_WritePin>

  uint8_t pw_switch_prev = HAL_GPIO_ReadPin(sw1_GPIO_Port, sw1_Pin);
 8000468:	2110      	movs	r1, #16
 800046a:	4874      	ldr	r0, [pc, #464]	; (800063c <main+0x2ac>)
 800046c:	f001 fac4 	bl	80019f8 <HAL_GPIO_ReadPin>
 8000470:	4603      	mov	r3, r0
 8000472:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  enum {OFF, ON} power = OFF;
 8000476:	2300      	movs	r3, #0
 8000478:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    //read switchs
    uint8_t em_switches =
      (HAL_GPIO_ReadPin(sw4_GPIO_Port, sw4_Pin) << 0) |
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	486f      	ldr	r0, [pc, #444]	; (800063c <main+0x2ac>)
 8000480:	f001 faba 	bl	80019f8 <HAL_GPIO_ReadPin>
 8000484:	4603      	mov	r3, r0
 8000486:	b25c      	sxtb	r4, r3
      (HAL_GPIO_ReadPin(sw3_GPIO_Port, sw3_Pin) << 1) |
 8000488:	2140      	movs	r1, #64	; 0x40
 800048a:	486c      	ldr	r0, [pc, #432]	; (800063c <main+0x2ac>)
 800048c:	f001 fab4 	bl	80019f8 <HAL_GPIO_ReadPin>
 8000490:	4603      	mov	r3, r0
 8000492:	005b      	lsls	r3, r3, #1
      (HAL_GPIO_ReadPin(sw4_GPIO_Port, sw4_Pin) << 0) |
 8000494:	b25b      	sxtb	r3, r3
 8000496:	4323      	orrs	r3, r4
 8000498:	b25c      	sxtb	r4, r3
      (HAL_GPIO_ReadPin(IM920_IO1_GPIO_Port, IM920_IO1_Pin) << 2);
 800049a:	2101      	movs	r1, #1
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a0:	f001 faaa 	bl	80019f8 <HAL_GPIO_ReadPin>
 80004a4:	4603      	mov	r3, r0
 80004a6:	009b      	lsls	r3, r3, #2
      (HAL_GPIO_ReadPin(sw3_GPIO_Port, sw3_Pin) << 1) |
 80004a8:	b25b      	sxtb	r3, r3
 80004aa:	4323      	orrs	r3, r4
 80004ac:	b25b      	sxtb	r3, r3
      (HAL_GPIO_ReadPin(IM920_IO1_GPIO_Port, IM920_IO1_Pin) << 2);
 80004ae:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123

    uint8_t pw_switch = HAL_GPIO_ReadPin(sw1_GPIO_Port, sw1_Pin);
 80004b2:	2110      	movs	r1, #16
 80004b4:	4861      	ldr	r0, [pc, #388]	; (800063c <main+0x2ac>)
 80004b6:	f001 fa9f 	bl	80019f8 <HAL_GPIO_ReadPin>
 80004ba:	4603      	mov	r3, r0
 80004bc:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122

    //trigger breaker
    if (!em_switches){
 80004c0:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d113      	bne.n	80004f0 <main+0x160>
      if (pw_switch == GPIO_PIN_SET){
 80004c8:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d103      	bne.n	80004d8 <main+0x148>
        power = OFF;
 80004d0:	2300      	movs	r3, #0
 80004d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80004d6:	e00e      	b.n	80004f6 <main+0x166>
      } else if (pw_switch == GPIO_PIN_RESET && pw_switch_prev == GPIO_PIN_SET){
 80004d8:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d10a      	bne.n	80004f6 <main+0x166>
 80004e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d106      	bne.n	80004f6 <main+0x166>
        power = ON;
 80004e8:	2301      	movs	r3, #1
 80004ea:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80004ee:	e002      	b.n	80004f6 <main+0x166>
      }
    } else {
      power = OFF;
 80004f0:	2300      	movs	r3, #0
 80004f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
    pw_switch_prev = pw_switch;
 80004f6:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 80004fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

    //output to breaker
    HAL_GPIO_WritePin(breaker_GPIO_Port, breaker_Pin, power == ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004fe:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8000502:	2b01      	cmp	r3, #1
 8000504:	d101      	bne.n	800050a <main+0x17a>
 8000506:	2301      	movs	r3, #1
 8000508:	e000      	b.n	800050c <main+0x17c>
 800050a:	2300      	movs	r3, #0
 800050c:	461a      	mov	r2, r3
 800050e:	2101      	movs	r1, #1
 8000510:	484a      	ldr	r0, [pc, #296]	; (800063c <main+0x2ac>)
 8000512:	f001 fa89 	bl	8001a28 <HAL_GPIO_WritePin>

    //output stop state to GPIO
    HAL_GPIO_WritePin(out_emkl_sw2_GPIO_Port, out_emkl_sw2_Pin, em_switches ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000516:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <main+0x192>
 800051e:	2301      	movs	r3, #1
 8000520:	e000      	b.n	8000524 <main+0x194>
 8000522:	2300      	movs	r3, #0
 8000524:	461a      	mov	r2, r3
 8000526:	2120      	movs	r1, #32
 8000528:	4844      	ldr	r0, [pc, #272]	; (800063c <main+0x2ac>)
 800052a:	f001 fa7d 	bl	8001a28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(out_stop_dsrk_GPIO_Port, out_stop_dsrk_Pin, !power ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800052e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8000532:	2b00      	cmp	r3, #0
 8000534:	d101      	bne.n	800053a <main+0x1aa>
 8000536:	2301      	movs	r3, #1
 8000538:	e000      	b.n	800053c <main+0x1ac>
 800053a:	2300      	movs	r3, #0
 800053c:	461a      	mov	r2, r3
 800053e:	2108      	movs	r1, #8
 8000540:	483e      	ldr	r0, [pc, #248]	; (800063c <main+0x2ac>)
 8000542:	f001 fa71 	bl	8001a28 <HAL_GPIO_WritePin>

    if(power == ON){
 8000546:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800054a:	2b01      	cmp	r3, #1
 800054c:	d120      	bne.n	8000590 <main+0x200>
      for(int i = 0; i < 45; i++){
 800054e:	2300      	movs	r3, #0
 8000550:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000554:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000558:	2b2c      	cmp	r3, #44	; 0x2c
 800055a:	dc59      	bgt.n	8000610 <main+0x280>
        pixels.colors[i] = _blue;
 800055c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000560:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000564:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000568:	4613      	mov	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	4413      	add	r3, r2
 800056e:	440b      	add	r3, r1
 8000570:	3368      	adds	r3, #104	; 0x68
 8000572:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8000576:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 800057a:	3307      	adds	r3, #7
 800057c:	8811      	ldrh	r1, [r2, #0]
 800057e:	7892      	ldrb	r2, [r2, #2]
 8000580:	8019      	strh	r1, [r3, #0]
 8000582:	709a      	strb	r2, [r3, #2]
      for(int i = 0; i < 45; i++){
 8000584:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000588:	3301      	adds	r3, #1
 800058a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800058e:	e7e1      	b.n	8000554 <main+0x1c4>
      }
    }else{
      for(int i = 0; i < 4; i++){
 8000590:	2300      	movs	r3, #0
 8000592:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000596:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800059a:	2b03      	cmp	r3, #3
 800059c:	dc38      	bgt.n	8000610 <main+0x280>
        if(em_switches & (1 << i)){
 800059e:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 80005a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80005a6:	fa42 f303 	asr.w	r3, r2, r3
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d014      	beq.n	80005dc <main+0x24c>
          pixels.colors[i] = _orenge;
 80005b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80005b6:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80005ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80005be:	4613      	mov	r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	4413      	add	r3, r2
 80005c4:	440b      	add	r3, r1
 80005c6:	3368      	adds	r3, #104	; 0x68
 80005c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80005cc:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 80005d0:	3307      	adds	r3, #7
 80005d2:	8811      	ldrh	r1, [r2, #0]
 80005d4:	7892      	ldrb	r2, [r2, #2]
 80005d6:	8019      	strh	r1, [r3, #0]
 80005d8:	709a      	strb	r2, [r3, #2]
 80005da:	e013      	b.n	8000604 <main+0x274>
        }else{
          pixels.colors[i] = _white;
 80005dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80005e0:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80005e4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	440b      	add	r3, r1
 80005f0:	3368      	adds	r3, #104	; 0x68
 80005f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80005f6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80005fa:	3307      	adds	r3, #7
 80005fc:	8811      	ldrh	r1, [r2, #0]
 80005fe:	7892      	ldrb	r2, [r2, #2]
 8000600:	8019      	strh	r1, [r3, #0]
 8000602:	709a      	strb	r2, [r3, #2]
      for(int i = 0; i < 4; i++){
 8000604:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000608:	3301      	adds	r3, #1
 800060a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800060e:	e7c2      	b.n	8000596 <main+0x206>
        }
      }
    }
    pixels.rend();
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fe7b 	bl	8000310 <_ZN6ws28128NeoPixel4rendEv>

    HAL_Delay(1);
 800061a:	2001      	movs	r0, #1
 800061c:	f000 fbe8 	bl	8000df0 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000620:	e72c      	b.n	800047c <main+0xec>
 8000622:	bf00      	nop
 8000624:	2000008c 	.word	0x2000008c
 8000628:	20000100 	.word	0x20000100
 800062c:	200000b4 	.word	0x200000b4
 8000630:	080048f0 	.word	0x080048f0
 8000634:	080048f4 	.word	0x080048f4
 8000638:	080048f8 	.word	0x080048f8
 800063c:	48000400 	.word	0x48000400

08000640 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	; 0x40
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2228      	movs	r2, #40	; 0x28
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f004 f8e0 	bl	8004814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800067e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4618      	mov	r0, r3
 800068a:	f001 f9e5 	bl	8001a58 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	bf14      	ite	ne
 8000694:	2301      	movne	r3, #1
 8000696:	2300      	moveq	r3, #0
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800069e:	f000 f997 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2102      	movs	r1, #2
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fa09 	bl	8002ad4 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	bf14      	ite	ne
 80006c8:	2301      	movne	r3, #1
 80006ca:	2300      	moveq	r3, #0
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80006d2:	f000 f97d 	bl	80009d0 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3740      	adds	r7, #64	; 0x40
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <_ZL11MX_CAN_Initv+0x70>)
 80006e6:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <_ZL11MX_CAN_Initv+0x74>)
 80006e8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <_ZL11MX_CAN_Initv+0x70>)
 80006ec:	2202      	movs	r2, #2
 80006ee:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <_ZL11MX_CAN_Initv+0x70>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <_ZL11MX_CAN_Initv+0x70>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <_ZL11MX_CAN_Initv+0x70>)
 80006fe:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000702:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <_ZL11MX_CAN_Initv+0x70>)
 8000706:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800070a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <_ZL11MX_CAN_Initv+0x70>)
 800070e:	2200      	movs	r2, #0
 8000710:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <_ZL11MX_CAN_Initv+0x70>)
 8000714:	2200      	movs	r2, #0
 8000716:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <_ZL11MX_CAN_Initv+0x70>)
 800071a:	2200      	movs	r2, #0
 800071c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <_ZL11MX_CAN_Initv+0x70>)
 8000720:	2200      	movs	r2, #0
 8000722:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <_ZL11MX_CAN_Initv+0x70>)
 8000726:	2200      	movs	r2, #0
 8000728:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <_ZL11MX_CAN_Initv+0x70>)
 800072c:	2200      	movs	r2, #0
 800072e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000730:	4807      	ldr	r0, [pc, #28]	; (8000750 <_ZL11MX_CAN_Initv+0x70>)
 8000732:	f000 fb81 	bl	8000e38 <HAL_CAN_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 8000746:	f000 f943 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000008c 	.word	0x2000008c
 8000754:	40006400 	.word	0x40006400

08000758 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <_ZL12MX_TIM3_Initv+0xc8>)
 800077e:	4a29      	ldr	r2, [pc, #164]	; (8000824 <_ZL12MX_TIM3_Initv+0xcc>)
 8000780:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000782:	4b27      	ldr	r3, [pc, #156]	; (8000820 <_ZL12MX_TIM3_Initv+0xc8>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000788:	4b25      	ldr	r3, [pc, #148]	; (8000820 <_ZL12MX_TIM3_Initv+0xc8>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <_ZL12MX_TIM3_Initv+0xc8>)
 8000790:	2259      	movs	r2, #89	; 0x59
 8000792:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000794:	4b22      	ldr	r3, [pc, #136]	; (8000820 <_ZL12MX_TIM3_Initv+0xc8>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079a:	4b21      	ldr	r3, [pc, #132]	; (8000820 <_ZL12MX_TIM3_Initv+0xc8>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007a0:	481f      	ldr	r0, [pc, #124]	; (8000820 <_ZL12MX_TIM3_Initv+0xc8>)
 80007a2:	f002 fbcf 	bl	8002f44 <HAL_TIM_PWM_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	bf14      	ite	ne
 80007ac:	2301      	movne	r3, #1
 80007ae:	2300      	moveq	r3, #0
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80007b6:	f000 f90b 	bl	80009d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	4815      	ldr	r0, [pc, #84]	; (8000820 <_ZL12MX_TIM3_Initv+0xc8>)
 80007ca:	f003 fc51 	bl	8004070 <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf14      	ite	ne
 80007d4:	2301      	movne	r3, #1
 80007d6:	2300      	moveq	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80007de:	f000 f8f7 	bl	80009d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e2:	2360      	movs	r3, #96	; 0x60
 80007e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	220c      	movs	r2, #12
 80007f6:	4619      	mov	r1, r3
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <_ZL12MX_TIM3_Initv+0xc8>)
 80007fa:	f002 fef1 	bl	80035e0 <HAL_TIM_PWM_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	bf14      	ite	ne
 8000804:	2301      	movne	r3, #1
 8000806:	2300      	moveq	r3, #0
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800080e:	f000 f8df 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000812:	4803      	ldr	r0, [pc, #12]	; (8000820 <_ZL12MX_TIM3_Initv+0xc8>)
 8000814:	f000 f99a 	bl	8000b4c <HAL_TIM_MspPostInit>

}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	; 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000b4 	.word	0x200000b4
 8000824:	40000400 	.word	0x40000400

08000828 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <_ZL19MX_USART2_UART_Initv+0x60>)
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <_ZL19MX_USART2_UART_Initv+0x64>)
 8000830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000834:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <_ZL19MX_USART2_UART_Initv+0x60>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <_ZL19MX_USART2_UART_Initv+0x60>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <_ZL19MX_USART2_UART_Initv+0x60>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086a:	4807      	ldr	r0, [pc, #28]	; (8000888 <_ZL19MX_USART2_UART_Initv+0x60>)
 800086c:	f003 fc6e 	bl	800414c <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf14      	ite	ne
 8000876:	2301      	movne	r3, #1
 8000878:	2300      	moveq	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000880:	f000 f8a6 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000144 	.word	0x20000144
 800088c:	40004400 	.word	0x40004400

08000890 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <_ZL11MX_DMA_Initv+0x38>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <_ZL11MX_DMA_Initv+0x38>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6153      	str	r3, [r2, #20]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <_ZL11MX_DMA_Initv+0x38>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	200d      	movs	r0, #13
 80008b4:	f000 fd23 	bl	80012fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80008b8:	200d      	movs	r0, #13
 80008ba:	f000 fd3c 	bl	8001336 <HAL_NVIC_EnableIRQ>

}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000

080008cc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e2:	4b39      	ldr	r3, [pc, #228]	; (80009c8 <_ZL12MX_GPIO_Initv+0xfc>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a38      	ldr	r2, [pc, #224]	; (80009c8 <_ZL12MX_GPIO_Initv+0xfc>)
 80008e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <_ZL12MX_GPIO_Initv+0xfc>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <_ZL12MX_GPIO_Initv+0xfc>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a32      	ldr	r2, [pc, #200]	; (80009c8 <_ZL12MX_GPIO_Initv+0xfc>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <_ZL12MX_GPIO_Initv+0xfc>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <_ZL12MX_GPIO_Initv+0xfc>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a2c      	ldr	r2, [pc, #176]	; (80009c8 <_ZL12MX_GPIO_Initv+0xfc>)
 8000918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <_ZL12MX_GPIO_Initv+0xfc>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IM920_IO10_GPIO_Port, IM920_IO10_Pin, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000932:	f001 f879 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, breaker_Pin|out_stop_dsrk_Pin|out_emkl_sw2_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2129      	movs	r1, #41	; 0x29
 800093a:	4824      	ldr	r0, [pc, #144]	; (80009cc <_ZL12MX_GPIO_Initv+0x100>)
 800093c:	f001 f874 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IM920_RESET_GPIO_Port, IM920_RESET_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094a:	f001 f86d 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IM920_IO1_Pin IM920_IO2_Pin IM920_IO3_Pin IM920_IO4_Pin
                           IM920_IO5_Pin IM920_IO8_Pin IM920_IO6_Pin IM920_IO7_Pin */
  GPIO_InitStruct.Pin = IM920_IO1_Pin|IM920_IO2_Pin|IM920_IO3_Pin|IM920_IO4_Pin
 800094e:	f240 637b 	movw	r3, #1659	; 0x67b
 8000952:	60fb      	str	r3, [r7, #12]
                          |IM920_IO5_Pin|IM920_IO8_Pin|IM920_IO6_Pin|IM920_IO7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4619      	mov	r1, r3
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f000 fed5 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : IM920_IO10_Pin IM920_RESET_Pin */
  GPIO_InitStruct.Pin = IM920_IO10_Pin|IM920_RESET_Pin;
 800096a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800096e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4619      	mov	r1, r3
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f000 fec5 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : breaker_Pin out_stop_dsrk_Pin out_emkl_sw2_Pin */
  GPIO_InitStruct.Pin = breaker_Pin|out_stop_dsrk_Pin|out_emkl_sw2_Pin;
 800098a:	2329      	movs	r3, #41	; 0x29
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	480a      	ldr	r0, [pc, #40]	; (80009cc <_ZL12MX_GPIO_Initv+0x100>)
 80009a2:	f000 feb7 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : sw1_Pin sw3_Pin sw4_Pin */
  GPIO_InitStruct.Pin = sw1_Pin|sw3_Pin|sw4_Pin;
 80009a6:	23d0      	movs	r3, #208	; 0xd0
 80009a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <_ZL12MX_GPIO_Initv+0x100>)
 80009ba:	f000 feab 	bl	8001714 <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000400 	.word	0x48000400

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_MspInit+0x44>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_MspInit+0x44>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6193      	str	r3, [r2, #24]
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_MspInit+0x44>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_MspInit+0x44>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_MspInit+0x44>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	61d3      	str	r3, [r2, #28]
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_MspInit+0x44>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <HAL_CAN_MspInit+0x80>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d129      	bne.n	8000a9a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_CAN_MspInit+0x84>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_CAN_MspInit+0x84>)
 8000a4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_CAN_MspInit+0x84>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_CAN_MspInit+0x84>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <HAL_CAN_MspInit+0x84>)
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	6153      	str	r3, [r2, #20]
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_CAN_MspInit+0x84>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000a88:	2309      	movs	r3, #9
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f000 fe3d 	bl	8001714 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40006400 	.word	0x40006400
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a20      	ldr	r2, [pc, #128]	; (8000b3c <HAL_TIM_PWM_MspInit+0x90>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d139      	bne.n	8000b32 <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <HAL_TIM_PWM_MspInit+0x94>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <HAL_TIM_PWM_MspInit+0x94>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <HAL_TIM_PWM_MspInit+0x94>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <HAL_TIM_PWM_MspInit+0x98>)
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <HAL_TIM_PWM_MspInit+0x9c>)
 8000ada:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_TIM_PWM_MspInit+0x98>)
 8000ade:	2210      	movs	r2, #16
 8000ae0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_TIM_PWM_MspInit+0x98>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_TIM_PWM_MspInit+0x98>)
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_TIM_PWM_MspInit+0x98>)
 8000af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <HAL_TIM_PWM_MspInit+0x98>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_TIM_PWM_MspInit+0x98>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_TIM_PWM_MspInit+0x98>)
 8000b04:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b08:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000b0a:	480e      	ldr	r0, [pc, #56]	; (8000b44 <HAL_TIM_PWM_MspInit+0x98>)
 8000b0c:	f000 fc2d 	bl	800136a <HAL_DMA_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8000b16:	f7ff ff5b 	bl	80009d0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <HAL_TIM_PWM_MspInit+0x98>)
 8000b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b20:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_TIM_PWM_MspInit+0x98>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_TIM_PWM_MspInit+0x98>)
 8000b2a:	621a      	str	r2, [r3, #32]
 8000b2c:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <HAL_TIM_PWM_MspInit+0x98>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40000400 	.word	0x40000400
 8000b40:	40021000 	.word	0x40021000
 8000b44:	20000100 	.word	0x20000100
 8000b48:	40020030 	.word	0x40020030

08000b4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <HAL_TIM_MspPostInit+0x64>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d11b      	bne.n	8000ba6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_TIM_MspPostInit+0x68>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <HAL_TIM_MspPostInit+0x68>)
 8000b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b78:	6153      	str	r3, [r2, #20]
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_TIM_MspPostInit+0x68>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b86:	2302      	movs	r3, #2
 8000b88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_TIM_MspPostInit+0x6c>)
 8000ba2:	f000 fdb7 	bl	8001714 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40000400 	.word	0x40000400
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	48000400 	.word	0x48000400

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <HAL_UART_MspInit+0x80>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d129      	bne.n	8000c32 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_UART_MspInit+0x84>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <HAL_UART_MspInit+0x84>)
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_UART_MspInit+0x84>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_UART_MspInit+0x84>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <HAL_UART_MspInit+0x84>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	6153      	str	r3, [r2, #20]
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_UART_MspInit+0x84>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000c0e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c20:	2307      	movs	r3, #7
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f000 fd71 	bl	8001714 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40021000 	.word	0x40021000

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f88e 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <DMA1_Channel3_IRQHandler+0x10>)
 8000c9e:	f000 fc48 	bl	8001532 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000100 	.word	0x20000100

08000cac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd6:	490e      	ldr	r1, [pc, #56]	; (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cec:	4c0b      	ldr	r4, [pc, #44]	; (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cfa:	f7ff ffd7 	bl	8000cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f003 fd5d 	bl	80047bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d02:	f7ff fb45 	bl	8000390 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d08:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d14:	0800494c 	.word	0x0800494c
  ldr r2, =_sbss
 8000d18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d1c:	200001d4 	.word	0x200001d4

08000d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_2_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_Init+0x28>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_Init+0x28>)
 8000d2e:	f043 0310 	orr.w	r3, r3, #16
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 fad7 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f000 f808 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fe4c 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40022000 	.word	0x40022000

08000d50 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x54>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x58>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 faef 	bl	8001352 <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00e      	b.n	8000d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d80a      	bhi.n	8000d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 fab7 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_InitTick+0x5c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	200001c8 	.word	0x200001c8

08000dd8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200001c8 	.word	0x200001c8

08000df0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffde 	bl	8000dd8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008

08000e38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e0ed      	b.n	8001026 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d102      	bne.n	8000e5c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff fde4 	bl	8000a24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 0201 	orr.w	r2, r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e6c:	f7ff ffb4 	bl	8000dd8 <HAL_GetTick>
 8000e70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e72:	e012      	b.n	8000e9a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e74:	f7ff ffb0 	bl	8000dd8 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b0a      	cmp	r3, #10
 8000e80:	d90b      	bls.n	8000e9a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2205      	movs	r2, #5
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e0c5      	b.n	8001026 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0e5      	beq.n	8000e74 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 0202 	bic.w	r2, r2, #2
 8000eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb8:	f7ff ff8e 	bl	8000dd8 <HAL_GetTick>
 8000ebc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ebe:	e012      	b.n	8000ee6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ec0:	f7ff ff8a 	bl	8000dd8 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b0a      	cmp	r3, #10
 8000ecc:	d90b      	bls.n	8000ee6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2205      	movs	r2, #5
 8000ede:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e09f      	b.n	8001026 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1e5      	bne.n	8000ec0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7e1b      	ldrb	r3, [r3, #24]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d108      	bne.n	8000f0e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e007      	b.n	8000f1e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7e5b      	ldrb	r3, [r3, #25]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d108      	bne.n	8000f38 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	e007      	b.n	8000f48 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	7e9b      	ldrb	r3, [r3, #26]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d108      	bne.n	8000f62 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0220 	orr.w	r2, r2, #32
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	e007      	b.n	8000f72 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0220 	bic.w	r2, r2, #32
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7edb      	ldrb	r3, [r3, #27]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d108      	bne.n	8000f8c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0210 	bic.w	r2, r2, #16
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	e007      	b.n	8000f9c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0210 	orr.w	r2, r2, #16
 8000f9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7f1b      	ldrb	r3, [r3, #28]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d108      	bne.n	8000fb6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0208 	orr.w	r2, r2, #8
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	e007      	b.n	8000fc6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0208 	bic.w	r2, r2, #8
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7f5b      	ldrb	r3, [r3, #29]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d108      	bne.n	8000fe0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 0204 	orr.w	r2, r2, #4
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e007      	b.n	8000ff0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0204 	bic.w	r2, r2, #4
 8000fee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	ea42 0103 	orr.w	r1, r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	1e5a      	subs	r2, r3, #1
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d12e      	bne.n	80010a0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2202      	movs	r2, #2
 8001046:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800105a:	f7ff febd 	bl	8000dd8 <HAL_GetTick>
 800105e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001060:	e012      	b.n	8001088 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001062:	f7ff feb9 	bl	8000dd8 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b0a      	cmp	r3, #10
 800106e:	d90b      	bls.n	8001088 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2205      	movs	r2, #5
 8001080:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e012      	b.n	80010ae <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1e5      	bne.n	8001062 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	e006      	b.n	80010ae <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
  }
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d133      	bne.n	8001132 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0201 	orr.w	r2, r2, #1
 80010d8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010da:	f7ff fe7d 	bl	8000dd8 <HAL_GetTick>
 80010de:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010e0:	e012      	b.n	8001108 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010e2:	f7ff fe79 	bl	8000dd8 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b0a      	cmp	r3, #10
 80010ee:	d90b      	bls.n	8001108 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2205      	movs	r2, #5
 8001100:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e01b      	b.n	8001140 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0e5      	beq.n	80010e2 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0202 	bic.w	r2, r2, #2
 8001124:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e006      	b.n	8001140 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
  }
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4907      	ldr	r1, [pc, #28]	; (80011e4 <__NVIC_EnableIRQ+0x38>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	; (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	; (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff29 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff3e 	bl	8001190 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff8e 	bl	800123c <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5d 	bl	80011e8 <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff31 	bl	80011ac <__NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffa2 	bl	80012a4 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e037      	b.n	80013f0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2202      	movs	r2, #2
 8001384:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001396:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800139a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f97e 	bl	80016d4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}  
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <HAL_DMA_Start_IT+0x20>
 8001414:	2302      	movs	r3, #2
 8001416:	e04a      	b.n	80014ae <HAL_DMA_Start_IT+0xb6>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001426:	2b01      	cmp	r3, #1
 8001428:	d13a      	bne.n	80014a0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2202      	movs	r2, #2
 800142e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 f912 	bl	8001678 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	2b00      	cmp	r3, #0
 800145a:	d008      	beq.n	800146e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 020e 	orr.w	r2, r2, #14
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	e00f      	b.n	800148e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 020a 	orr.w	r2, r2, #10
 800147c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0204 	bic.w	r2, r2, #4
 800148c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0201 	orr.w	r2, r2, #1
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e005      	b.n	80014ac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80014a8:	2302      	movs	r3, #2
 80014aa:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
} 
 80014ae:	4618      	mov	r0, r3
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d005      	beq.n	80014d8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2204      	movs	r2, #4
 80014d0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	e027      	b.n	8001528 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 020e 	bic.w	r2, r2, #14
 80014e6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001500:	2101      	movs	r1, #1
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	4798      	blx	r3
    } 
  }
  return status;
 8001528:	7bfb      	ldrb	r3, [r7, #15]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	2204      	movs	r2, #4
 8001550:	409a      	lsls	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d024      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x72>
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d01f      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	2b00      	cmp	r3, #0
 8001570:	d107      	bne.n	8001582 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0204 	bic.w	r2, r2, #4
 8001580:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158a:	2104      	movs	r1, #4
 800158c:	fa01 f202 	lsl.w	r2, r1, r2
 8001590:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	2b00      	cmp	r3, #0
 8001598:	d06a      	beq.n	8001670 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80015a2:	e065      	b.n	8001670 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	2202      	movs	r2, #2
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d02c      	beq.n	800160e <HAL_DMA_IRQHandler+0xdc>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d027      	beq.n	800160e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10b      	bne.n	80015e4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 020a 	bic.w	r2, r2, #10
 80015da:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ec:	2102      	movs	r1, #2
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	2b00      	cmp	r3, #0
 8001602:	d035      	beq.n	8001670 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800160c:	e030      	b.n	8001670 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	2208      	movs	r2, #8
 8001614:	409a      	lsls	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d028      	beq.n	8001670 <HAL_DMA_IRQHandler+0x13e>
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d023      	beq.n	8001670 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 020e 	bic.w	r2, r2, #14
 8001636:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001640:	2101      	movs	r1, #1
 8001642:	fa01 f202 	lsl.w	r2, r1, r2
 8001646:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	2b00      	cmp	r3, #0
 8001664:	d004      	beq.n	8001670 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	4798      	blx	r3
    }
  }
}  
 800166e:	e7ff      	b.n	8001670 <HAL_DMA_IRQHandler+0x13e>
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	2101      	movs	r1, #1
 8001690:	fa01 f202 	lsl.w	r2, r1, r2
 8001694:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d108      	bne.n	80016b8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016b6:	e007      	b.n	80016c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	60da      	str	r2, [r3, #12]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <DMA_CalcBaseAndBitshift+0x34>)
 80016e4:	4413      	add	r3, r2
 80016e6:	4a09      	ldr	r2, [pc, #36]	; (800170c <DMA_CalcBaseAndBitshift+0x38>)
 80016e8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	009a      	lsls	r2, r3, #2
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a06      	ldr	r2, [pc, #24]	; (8001710 <DMA_CalcBaseAndBitshift+0x3c>)
 80016f8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	bffdfff8 	.word	0xbffdfff8
 800170c:	cccccccd 	.word	0xcccccccd
 8001710:	40020000 	.word	0x40020000

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001722:	e14e      	b.n	80019c2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2101      	movs	r1, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8140 	beq.w	80019bc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b01      	cmp	r3, #1
 8001746:	d005      	beq.n	8001754 <HAL_GPIO_Init+0x40>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d130      	bne.n	80017b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800178a:	2201      	movs	r2, #1
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	091b      	lsrs	r3, r3, #4
 80017a0:	f003 0201 	and.w	r2, r3, #1
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d017      	beq.n	80017f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	2203      	movs	r2, #3
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d123      	bne.n	8001846 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	08da      	lsrs	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3208      	adds	r2, #8
 8001806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	220f      	movs	r2, #15
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	08da      	lsrs	r2, r3, #3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3208      	adds	r2, #8
 8001840:	6939      	ldr	r1, [r7, #16]
 8001842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0203 	and.w	r2, r3, #3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 809a 	beq.w	80019bc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001888:	4b55      	ldr	r3, [pc, #340]	; (80019e0 <HAL_GPIO_Init+0x2cc>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a54      	ldr	r2, [pc, #336]	; (80019e0 <HAL_GPIO_Init+0x2cc>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b52      	ldr	r3, [pc, #328]	; (80019e0 <HAL_GPIO_Init+0x2cc>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018a0:	4a50      	ldr	r2, [pc, #320]	; (80019e4 <HAL_GPIO_Init+0x2d0>)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ca:	d013      	beq.n	80018f4 <HAL_GPIO_Init+0x1e0>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a46      	ldr	r2, [pc, #280]	; (80019e8 <HAL_GPIO_Init+0x2d4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d00d      	beq.n	80018f0 <HAL_GPIO_Init+0x1dc>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a45      	ldr	r2, [pc, #276]	; (80019ec <HAL_GPIO_Init+0x2d8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d007      	beq.n	80018ec <HAL_GPIO_Init+0x1d8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a44      	ldr	r2, [pc, #272]	; (80019f0 <HAL_GPIO_Init+0x2dc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d101      	bne.n	80018e8 <HAL_GPIO_Init+0x1d4>
 80018e4:	2303      	movs	r3, #3
 80018e6:	e006      	b.n	80018f6 <HAL_GPIO_Init+0x1e2>
 80018e8:	2305      	movs	r3, #5
 80018ea:	e004      	b.n	80018f6 <HAL_GPIO_Init+0x1e2>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e002      	b.n	80018f6 <HAL_GPIO_Init+0x1e2>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <HAL_GPIO_Init+0x1e2>
 80018f4:	2300      	movs	r3, #0
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	f002 0203 	and.w	r2, r2, #3
 80018fc:	0092      	lsls	r2, r2, #2
 80018fe:	4093      	lsls	r3, r2
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001906:	4937      	ldr	r1, [pc, #220]	; (80019e4 <HAL_GPIO_Init+0x2d0>)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001914:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <HAL_GPIO_Init+0x2e0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001938:	4a2e      	ldr	r2, [pc, #184]	; (80019f4 <HAL_GPIO_Init+0x2e0>)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <HAL_GPIO_Init+0x2e0>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	43db      	mvns	r3, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001962:	4a24      	ldr	r2, [pc, #144]	; (80019f4 <HAL_GPIO_Init+0x2e0>)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <HAL_GPIO_Init+0x2e0>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	43db      	mvns	r3, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800198c:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <HAL_GPIO_Init+0x2e0>)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_GPIO_Init+0x2e0>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <HAL_GPIO_Init+0x2e0>)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3301      	adds	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f47f aea9 	bne.w	8001724 <HAL_GPIO_Init+0x10>
  }
}
 80019d2:	bf00      	nop
 80019d4:	bf00      	nop
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40010000 	.word	0x40010000
 80019e8:	48000400 	.word	0x48000400
 80019ec:	48000800 	.word	0x48000800
 80019f0:	48000c00 	.word	0x48000c00
 80019f4:	40010400 	.word	0x40010400

080019f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	887b      	ldrh	r3, [r7, #2]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	e001      	b.n	8001a1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
 8001a34:	4613      	mov	r3, r2
 8001a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a38:	787b      	ldrb	r3, [r7, #1]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a44:	e002      	b.n	8001a4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a68:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f001 b823 	b.w	8002ac4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 817d 	beq.w	8001d8e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a94:	4bbc      	ldr	r3, [pc, #752]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d00c      	beq.n	8001aba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa0:	4bb9      	ldr	r3, [pc, #740]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d15c      	bne.n	8001b66 <HAL_RCC_OscConfig+0x10e>
 8001aac:	4bb6      	ldr	r3, [pc, #728]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab8:	d155      	bne.n	8001b66 <HAL_RCC_OscConfig+0x10e>
 8001aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001abe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ace:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	095b      	lsrs	r3, r3, #5
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d102      	bne.n	8001aec <HAL_RCC_OscConfig+0x94>
 8001ae6:	4ba8      	ldr	r3, [pc, #672]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	e015      	b.n	8001b18 <HAL_RCC_OscConfig+0xc0>
 8001aec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b04:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b08:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b0c:	fa93 f3a3 	rbit	r3, r3
 8001b10:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b14:	4b9c      	ldr	r3, [pc, #624]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b1c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b20:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b24:	fa92 f2a2 	rbit	r2, r2
 8001b28:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b2c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b30:	fab2 f282 	clz	r2, r2
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	f042 0220 	orr.w	r2, r2, #32
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	f002 021f 	and.w	r2, r2, #31
 8001b40:	2101      	movs	r1, #1
 8001b42:	fa01 f202 	lsl.w	r2, r1, r2
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 811f 	beq.w	8001d8c <HAL_RCC_OscConfig+0x334>
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f040 8116 	bne.w	8001d8c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	f000 bfaf 	b.w	8002ac4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12e>
 8001b78:	4b83      	ldr	r3, [pc, #524]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a82      	ldr	r2, [pc, #520]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	e036      	b.n	8001bf4 <HAL_RCC_OscConfig+0x19c>
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x158>
 8001b96:	4b7c      	ldr	r3, [pc, #496]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a7b      	ldr	r2, [pc, #492]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b79      	ldr	r3, [pc, #484]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a78      	ldr	r2, [pc, #480]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e021      	b.n	8001bf4 <HAL_RCC_OscConfig+0x19c>
 8001bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x184>
 8001bc2:	4b71      	ldr	r3, [pc, #452]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a70      	ldr	r2, [pc, #448]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b6e      	ldr	r3, [pc, #440]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6d      	ldr	r2, [pc, #436]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0x19c>
 8001bdc:	4b6a      	ldr	r3, [pc, #424]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a69      	ldr	r2, [pc, #420]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b67      	ldr	r3, [pc, #412]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a66      	ldr	r2, [pc, #408]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bf4:	4b64      	ldr	r3, [pc, #400]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	f023 020f 	bic.w	r2, r3, #15
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	495f      	ldr	r1, [pc, #380]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d059      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7ff f8db 	bl	8000dd8 <HAL_GetTick>
 8001c22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff f8d6 	bl	8000dd8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b64      	cmp	r3, #100	; 0x64
 8001c36:	d902      	bls.n	8001c3e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	f000 bf43 	b.w	8002ac4 <HAL_RCC_OscConfig+0x106c>
 8001c3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c42:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	095b      	lsrs	r3, r3, #5
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d102      	bne.n	8001c70 <HAL_RCC_OscConfig+0x218>
 8001c6a:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	e015      	b.n	8001c9c <HAL_RCC_OscConfig+0x244>
 8001c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c74:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c7c:	fa93 f3a3 	rbit	r3, r3
 8001c80:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c88:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c8c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c98:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ca0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ca4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ca8:	fa92 f2a2 	rbit	r2, r2
 8001cac:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001cb0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001cb4:	fab2 f282 	clz	r2, r2
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	f042 0220 	orr.w	r2, r2, #32
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	f002 021f 	and.w	r2, r2, #31
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0ab      	beq.n	8001c28 <HAL_RCC_OscConfig+0x1d0>
 8001cd0:	e05d      	b.n	8001d8e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f881 	bl	8000dd8 <HAL_GetTick>
 8001cd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff f87c 	bl	8000dd8 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b64      	cmp	r3, #100	; 0x64
 8001cea:	d902      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	f000 bee9 	b.w	8002ac4 <HAL_RCC_OscConfig+0x106c>
 8001cf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	095b      	lsrs	r3, r3, #5
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d102      	bne.n	8001d24 <HAL_RCC_OscConfig+0x2cc>
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	e015      	b.n	8001d50 <HAL_RCC_OscConfig+0x2f8>
 8001d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d28:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d3c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d40:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d54:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d58:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d5c:	fa92 f2a2 	rbit	r2, r2
 8001d60:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d64:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d68:	fab2 f282 	clz	r2, r2
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	f042 0220 	orr.w	r2, r2, #32
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	f002 021f 	and.w	r2, r2, #31
 8001d78:	2101      	movs	r1, #1
 8001d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1ab      	bne.n	8001cdc <HAL_RCC_OscConfig+0x284>
 8001d84:	e003      	b.n	8001d8e <HAL_RCC_OscConfig+0x336>
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 817d 	beq.w	800209e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001da4:	4ba6      	ldr	r3, [pc, #664]	; (8002040 <HAL_RCC_OscConfig+0x5e8>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00b      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001db0:	4ba3      	ldr	r3, [pc, #652]	; (8002040 <HAL_RCC_OscConfig+0x5e8>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d172      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x44a>
 8001dbc:	4ba0      	ldr	r3, [pc, #640]	; (8002040 <HAL_RCC_OscConfig+0x5e8>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d16c      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x44a>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001dda:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d102      	bne.n	8001df8 <HAL_RCC_OscConfig+0x3a0>
 8001df2:	4b93      	ldr	r3, [pc, #588]	; (8002040 <HAL_RCC_OscConfig+0x5e8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	e013      	b.n	8001e20 <HAL_RCC_OscConfig+0x3c8>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e1c:	4b88      	ldr	r3, [pc, #544]	; (8002040 <HAL_RCC_OscConfig+0x5e8>)
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	2202      	movs	r2, #2
 8001e22:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e26:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e2a:	fa92 f2a2 	rbit	r2, r2
 8001e2e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e32:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e36:	fab2 f282 	clz	r2, r2
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	f042 0220 	orr.w	r2, r2, #32
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f002 021f 	and.w	r2, r2, #31
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00a      	beq.n	8001e68 <HAL_RCC_OscConfig+0x410>
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d002      	beq.n	8001e68 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f000 be2e 	b.w	8002ac4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e68:	4b75      	ldr	r3, [pc, #468]	; (8002040 <HAL_RCC_OscConfig+0x5e8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	21f8      	movs	r1, #248	; 0xf8
 8001e7e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e86:	fa91 f1a1 	rbit	r1, r1
 8001e8a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e8e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e92:	fab1 f181 	clz	r1, r1
 8001e96:	b2c9      	uxtb	r1, r1
 8001e98:	408b      	lsls	r3, r1
 8001e9a:	4969      	ldr	r1, [pc, #420]	; (8002040 <HAL_RCC_OscConfig+0x5e8>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea0:	e0fd      	b.n	800209e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8088 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x56c>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ec6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ed4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	461a      	mov	r2, r3
 8001edc:	2301      	movs	r3, #1
 8001ede:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7fe ff7a 	bl	8000dd8 <HAL_GetTick>
 8001ee4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eea:	f7fe ff75 	bl	8000dd8 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d902      	bls.n	8001f00 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	f000 bde2 	b.w	8002ac4 <HAL_RCC_OscConfig+0x106c>
 8001f00:	2302      	movs	r3, #2
 8001f02:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001f12:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d102      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4d8>
 8001f2a:	4b45      	ldr	r3, [pc, #276]	; (8002040 <HAL_RCC_OscConfig+0x5e8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	e013      	b.n	8001f58 <HAL_RCC_OscConfig+0x500>
 8001f30:	2302      	movs	r3, #2
 8001f32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f42:	2302      	movs	r3, #2
 8001f44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f48:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f54:	4b3a      	ldr	r3, [pc, #232]	; (8002040 <HAL_RCC_OscConfig+0x5e8>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f5e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f62:	fa92 f2a2 	rbit	r2, r2
 8001f66:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f6a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f6e:	fab2 f282 	clz	r2, r2
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	f042 0220 	orr.w	r2, r2, #32
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f002 021f 	and.w	r2, r2, #31
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f202 	lsl.w	r2, r1, r2
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0af      	beq.n	8001eea <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_RCC_OscConfig+0x5e8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	21f8      	movs	r1, #248	; 0xf8
 8001fa0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001fa8:	fa91 f1a1 	rbit	r1, r1
 8001fac:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001fb0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001fb4:	fab1 f181 	clz	r1, r1
 8001fb8:	b2c9      	uxtb	r1, r1
 8001fba:	408b      	lsls	r3, r1
 8001fbc:	4920      	ldr	r1, [pc, #128]	; (8002040 <HAL_RCC_OscConfig+0x5e8>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
 8001fc2:	e06c      	b.n	800209e <HAL_RCC_OscConfig+0x646>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001fd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fe4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	461a      	mov	r2, r3
 8001fec:	2300      	movs	r3, #0
 8001fee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fef2 	bl	8000dd8 <HAL_GetTick>
 8001ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7fe feed 	bl	8000dd8 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d902      	bls.n	8002010 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	f000 bd5a 	b.w	8002ac4 <HAL_RCC_OscConfig+0x106c>
 8002010:	2302      	movs	r3, #2
 8002012:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d104      	bne.n	8002044 <HAL_RCC_OscConfig+0x5ec>
 800203a:	4b01      	ldr	r3, [pc, #4]	; (8002040 <HAL_RCC_OscConfig+0x5e8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	e015      	b.n	800206c <HAL_RCC_OscConfig+0x614>
 8002040:	40021000 	.word	0x40021000
 8002044:	2302      	movs	r3, #2
 8002046:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002056:	2302      	movs	r3, #2
 8002058:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800205c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002068:	4bc8      	ldr	r3, [pc, #800]	; (800238c <HAL_RCC_OscConfig+0x934>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	2202      	movs	r2, #2
 800206e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002072:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002076:	fa92 f2a2 	rbit	r2, r2
 800207a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800207e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002082:	fab2 f282 	clz	r2, r2
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f042 0220 	orr.w	r2, r2, #32
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	f002 021f 	and.w	r2, r2, #31
 8002092:	2101      	movs	r1, #1
 8002094:	fa01 f202 	lsl.w	r2, r1, r2
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1ad      	bne.n	8001ffa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8110 	beq.w	80022d4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d079      	beq.n	80021b8 <HAL_RCC_OscConfig+0x760>
 80020c4:	2301      	movs	r3, #1
 80020c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80020d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	4bab      	ldr	r3, [pc, #684]	; (8002390 <HAL_RCC_OscConfig+0x938>)
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	461a      	mov	r2, r3
 80020ea:	2301      	movs	r3, #1
 80020ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ee:	f7fe fe73 	bl	8000dd8 <HAL_GetTick>
 80020f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	e00a      	b.n	800210e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f8:	f7fe fe6e 	bl	8000dd8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d902      	bls.n	800210e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	f000 bcdb 	b.w	8002ac4 <HAL_RCC_OscConfig+0x106c>
 800210e:	2302      	movs	r3, #2
 8002110:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002128:	2202      	movs	r2, #2
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002130:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f2a3 	rbit	r2, r3
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800214c:	2202      	movs	r2, #2
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	fa93 f2a3 	rbit	r2, r3
 800215e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002162:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002166:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002168:	4b88      	ldr	r3, [pc, #544]	; (800238c <HAL_RCC_OscConfig+0x934>)
 800216a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002174:	2102      	movs	r1, #2
 8002176:	6019      	str	r1, [r3, #0]
 8002178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fa93 f1a3 	rbit	r1, r3
 8002186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800218e:	6019      	str	r1, [r3, #0]
  return result;
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0a0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x6a0>
 80021b6:	e08d      	b.n	80022d4 <HAL_RCC_OscConfig+0x87c>
 80021b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	fa93 f2a3 	rbit	r2, r3
 80021d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021da:	601a      	str	r2, [r3, #0]
  return result;
 80021dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021e4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b68      	ldr	r3, [pc, #416]	; (8002390 <HAL_RCC_OscConfig+0x938>)
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	461a      	mov	r2, r3
 80021f6:	2300      	movs	r3, #0
 80021f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7fe fded 	bl	8000dd8 <HAL_GetTick>
 80021fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002202:	e00a      	b.n	800221a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002204:	f7fe fde8 	bl	8000dd8 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d902      	bls.n	800221a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	f000 bc55 	b.w	8002ac4 <HAL_RCC_OscConfig+0x106c>
 800221a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002222:	2202      	movs	r2, #2
 8002224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	fa93 f2a3 	rbit	r2, r3
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002242:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002246:	2202      	movs	r2, #2
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	fa93 f2a3 	rbit	r2, r3
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800226a:	2202      	movs	r2, #2
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	fa93 f2a3 	rbit	r2, r3
 800227c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002280:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002284:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002286:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCC_OscConfig+0x934>)
 8002288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002292:	2102      	movs	r1, #2
 8002294:	6019      	str	r1, [r3, #0]
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	fa93 f1a3 	rbit	r1, r3
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022ac:	6019      	str	r1, [r3, #0]
  return result;
 80022ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d197      	bne.n	8002204 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 81a1 	beq.w	800262c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f0:	4b26      	ldr	r3, [pc, #152]	; (800238c <HAL_RCC_OscConfig+0x934>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d116      	bne.n	800232a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	4b23      	ldr	r3, [pc, #140]	; (800238c <HAL_RCC_OscConfig+0x934>)
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	4a22      	ldr	r2, [pc, #136]	; (800238c <HAL_RCC_OscConfig+0x934>)
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002306:	61d3      	str	r3, [r2, #28]
 8002308:	4b20      	ldr	r3, [pc, #128]	; (800238c <HAL_RCC_OscConfig+0x934>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002322:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002324:	2301      	movs	r3, #1
 8002326:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_RCC_OscConfig+0x93c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d11a      	bne.n	800236c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_RCC_OscConfig+0x93c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_RCC_OscConfig+0x93c>)
 800233c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002340:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002342:	f7fe fd49 	bl	8000dd8 <HAL_GetTick>
 8002346:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	e009      	b.n	8002360 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234c:	f7fe fd44 	bl	8000dd8 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b64      	cmp	r3, #100	; 0x64
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e3b1      	b.n	8002ac4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_RCC_OscConfig+0x93c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ef      	beq.n	800234c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10d      	bne.n	8002398 <HAL_RCC_OscConfig+0x940>
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_RCC_OscConfig+0x934>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4a02      	ldr	r2, [pc, #8]	; (800238c <HAL_RCC_OscConfig+0x934>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6213      	str	r3, [r2, #32]
 8002388:	e03c      	b.n	8002404 <HAL_RCC_OscConfig+0x9ac>
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	10908120 	.word	0x10908120
 8002394:	40007000 	.word	0x40007000
 8002398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10c      	bne.n	80023c2 <HAL_RCC_OscConfig+0x96a>
 80023a8:	4bc1      	ldr	r3, [pc, #772]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4ac0      	ldr	r2, [pc, #768]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80023ae:	f023 0301 	bic.w	r3, r3, #1
 80023b2:	6213      	str	r3, [r2, #32]
 80023b4:	4bbe      	ldr	r3, [pc, #760]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4abd      	ldr	r2, [pc, #756]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80023ba:	f023 0304 	bic.w	r3, r3, #4
 80023be:	6213      	str	r3, [r2, #32]
 80023c0:	e020      	b.n	8002404 <HAL_RCC_OscConfig+0x9ac>
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b05      	cmp	r3, #5
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x994>
 80023d2:	4bb7      	ldr	r3, [pc, #732]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4ab6      	ldr	r2, [pc, #728]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	4bb4      	ldr	r3, [pc, #720]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4ab3      	ldr	r2, [pc, #716]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6213      	str	r3, [r2, #32]
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0x9ac>
 80023ec:	4bb0      	ldr	r3, [pc, #704]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4aaf      	ldr	r2, [pc, #700]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	4bad      	ldr	r3, [pc, #692]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4aac      	ldr	r2, [pc, #688]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80023fe:	f023 0304 	bic.w	r3, r3, #4
 8002402:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002408:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8081 	beq.w	8002518 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7fe fcdf 	bl	8000dd8 <HAL_GetTick>
 800241a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241e:	e00b      	b.n	8002438 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7fe fcda 	bl	8000dd8 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e345      	b.n	8002ac4 <HAL_RCC_OscConfig+0x106c>
 8002438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002440:	2202      	movs	r2, #2
 8002442:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	fa93 f2a3 	rbit	r2, r3
 8002452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002456:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002464:	2202      	movs	r2, #2
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	fa93 f2a3 	rbit	r2, r3
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800247e:	601a      	str	r2, [r3, #0]
  return result;
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002488:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d102      	bne.n	80024a4 <HAL_RCC_OscConfig+0xa4c>
 800249e:	4b84      	ldr	r3, [pc, #528]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	e013      	b.n	80024cc <HAL_RCC_OscConfig+0xa74>
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80024ac:	2202      	movs	r2, #2
 80024ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	fa93 f2a3 	rbit	r2, r3
 80024be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	4b79      	ldr	r3, [pc, #484]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024d0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80024d4:	2102      	movs	r1, #2
 80024d6:	6011      	str	r1, [r2, #0]
 80024d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	fa92 f1a2 	rbit	r1, r2
 80024e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024ee:	6011      	str	r1, [r2, #0]
  return result;
 80024f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024f4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	fab2 f282 	clz	r2, r2
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	f002 021f 	and.w	r2, r2, #31
 800250a:	2101      	movs	r1, #1
 800250c:	fa01 f202 	lsl.w	r2, r1, r2
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d084      	beq.n	8002420 <HAL_RCC_OscConfig+0x9c8>
 8002516:	e07f      	b.n	8002618 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002518:	f7fe fc5e 	bl	8000dd8 <HAL_GetTick>
 800251c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002520:	e00b      	b.n	800253a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7fe fc59 	bl	8000dd8 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e2c4      	b.n	8002ac4 <HAL_RCC_OscConfig+0x106c>
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002542:	2202      	movs	r2, #2
 8002544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002566:	2202      	movs	r2, #2
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	fa93 f2a3 	rbit	r2, r3
 8002578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002580:	601a      	str	r2, [r3, #0]
  return result;
 8002582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002586:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800258a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f043 0302 	orr.w	r3, r3, #2
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_OscConfig+0xb4e>
 80025a0:	4b43      	ldr	r3, [pc, #268]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	e013      	b.n	80025ce <HAL_RCC_OscConfig+0xb76>
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80025ae:	2202      	movs	r2, #2
 80025b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	fa93 f2a3 	rbit	r2, r3
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	4b39      	ldr	r3, [pc, #228]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80025d6:	2102      	movs	r1, #2
 80025d8:	6011      	str	r1, [r2, #0]
 80025da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	fa92 f1a2 	rbit	r1, r2
 80025e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025f0:	6011      	str	r1, [r2, #0]
  return result;
 80025f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025f6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	fab2 f282 	clz	r2, r2
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	f002 021f 	and.w	r2, r2, #31
 800260c:	2101      	movs	r1, #1
 800260e:	fa01 f202 	lsl.w	r2, r1, r2
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d184      	bne.n	8002522 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002618:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002620:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	4a22      	ldr	r2, [pc, #136]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 8002626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800262a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 8242 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_RCC_OscConfig+0xc58>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b08      	cmp	r3, #8
 8002648:	f000 8213 	beq.w	8002a72 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002650:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b02      	cmp	r3, #2
 800265a:	f040 8162 	bne.w	8002922 <HAL_RCC_OscConfig+0xeca>
 800265e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002662:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002666:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800266a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002670:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	fa93 f2a3 	rbit	r2, r3
 800267a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002682:	601a      	str	r2, [r3, #0]
  return result;
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800268c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002698:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	461a      	mov	r2, r3
 80026a0:	2300      	movs	r3, #0
 80026a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fb98 	bl	8000dd8 <HAL_GetTick>
 80026a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ac:	e00c      	b.n	80026c8 <HAL_RCC_OscConfig+0xc70>
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe fb90 	bl	8000dd8 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e1fd      	b.n	8002ac4 <HAL_RCC_OscConfig+0x106c>
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	fa93 f2a3 	rbit	r2, r3
 80026e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026ec:	601a      	str	r2, [r3, #0]
  return result;
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d102      	bne.n	8002712 <HAL_RCC_OscConfig+0xcba>
 800270c:	4bb0      	ldr	r3, [pc, #704]	; (80029d0 <HAL_RCC_OscConfig+0xf78>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	e027      	b.n	8002762 <HAL_RCC_OscConfig+0xd0a>
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800271a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800271e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	fa93 f2a3 	rbit	r2, r3
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002740:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	fa93 f2a3 	rbit	r2, r3
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	4b9c      	ldr	r3, [pc, #624]	; (80029d0 <HAL_RCC_OscConfig+0xf78>)
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002766:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800276a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800276e:	6011      	str	r1, [r2, #0]
 8002770:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002774:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	fa92 f1a2 	rbit	r1, r2
 800277e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002782:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002786:	6011      	str	r1, [r2, #0]
  return result;
 8002788:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800278c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	fab2 f282 	clz	r2, r2
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f042 0220 	orr.w	r2, r2, #32
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	f002 021f 	and.w	r2, r2, #31
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f202 	lsl.w	r2, r1, r2
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d182      	bne.n	80026b4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ae:	4b88      	ldr	r3, [pc, #544]	; (80029d0 <HAL_RCC_OscConfig+0xf78>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	430b      	orrs	r3, r1
 80027d0:	497f      	ldr	r1, [pc, #508]	; (80029d0 <HAL_RCC_OscConfig+0xf78>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	fa93 f2a3 	rbit	r2, r3
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027fa:	601a      	str	r2, [r3, #0]
  return result;
 80027fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002800:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002804:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002810:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	461a      	mov	r2, r3
 8002818:	2301      	movs	r3, #1
 800281a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe fadc 	bl	8000dd8 <HAL_GetTick>
 8002820:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002824:	e009      	b.n	800283a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fad7 	bl	8000dd8 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e144      	b.n	8002ac4 <HAL_RCC_OscConfig+0x106c>
 800283a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002842:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	fa93 f2a3 	rbit	r2, r3
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800285e:	601a      	str	r2, [r3, #0]
  return result;
 8002860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002864:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002868:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d102      	bne.n	8002884 <HAL_RCC_OscConfig+0xe2c>
 800287e:	4b54      	ldr	r3, [pc, #336]	; (80029d0 <HAL_RCC_OscConfig+0xf78>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	e027      	b.n	80028d4 <HAL_RCC_OscConfig+0xe7c>
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800288c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	fa93 f2a3 	rbit	r2, r3
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80028b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028bc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	fa93 f2a3 	rbit	r2, r3
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_RCC_OscConfig+0xf78>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028e0:	6011      	str	r1, [r2, #0]
 80028e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028e6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	fa92 f1a2 	rbit	r1, r2
 80028f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028f4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028f8:	6011      	str	r1, [r2, #0]
  return result;
 80028fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028fe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	fab2 f282 	clz	r2, r2
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f042 0220 	orr.w	r2, r2, #32
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	f002 021f 	and.w	r2, r2, #31
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f202 	lsl.w	r2, r1, r2
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d082      	beq.n	8002826 <HAL_RCC_OscConfig+0xdce>
 8002920:	e0cf      	b.n	8002ac2 <HAL_RCC_OscConfig+0x106a>
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800292a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800292e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002934:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	fa93 f2a3 	rbit	r2, r3
 800293e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002942:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002946:	601a      	str	r2, [r3, #0]
  return result;
 8002948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002950:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800295c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	461a      	mov	r2, r3
 8002964:	2300      	movs	r3, #0
 8002966:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fe fa36 	bl	8000dd8 <HAL_GetTick>
 800296c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002970:	e009      	b.n	8002986 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe fa31 	bl	8000dd8 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e09e      	b.n	8002ac4 <HAL_RCC_OscConfig+0x106c>
 8002986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800298e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002998:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	fa93 f2a3 	rbit	r2, r3
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80029aa:	601a      	str	r2, [r3, #0]
  return result;
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80029b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d104      	bne.n	80029d4 <HAL_RCC_OscConfig+0xf7c>
 80029ca:	4b01      	ldr	r3, [pc, #4]	; (80029d0 <HAL_RCC_OscConfig+0xf78>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	e029      	b.n	8002a24 <HAL_RCC_OscConfig+0xfcc>
 80029d0:	40021000 	.word	0x40021000
 80029d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	fa93 f2a3 	rbit	r2, r3
 80029f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	fa93 f2a3 	rbit	r2, r3
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <HAL_RCC_OscConfig+0x1078>)
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a28:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a30:	6011      	str	r1, [r2, #0]
 8002a32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a36:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	fa92 f1a2 	rbit	r1, r2
 8002a40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a44:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a48:	6011      	str	r1, [r2, #0]
  return result;
 8002a4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a4e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	fab2 f282 	clz	r2, r2
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	f042 0220 	orr.w	r2, r2, #32
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	f002 021f 	and.w	r2, r2, #31
 8002a64:	2101      	movs	r1, #1
 8002a66:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d180      	bne.n	8002972 <HAL_RCC_OscConfig+0xf1a>
 8002a70:	e027      	b.n	8002ac2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e01e      	b.n	8002ac4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_RCC_OscConfig+0x1078>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a92:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d10b      	bne.n	8002abe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002aa6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002aaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b09e      	sub	sp, #120	; 0x78
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e162      	b.n	8002db2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aec:	4b90      	ldr	r3, [pc, #576]	; (8002d30 <HAL_RCC_ClockConfig+0x25c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d910      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b8d      	ldr	r3, [pc, #564]	; (8002d30 <HAL_RCC_ClockConfig+0x25c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 0207 	bic.w	r2, r3, #7
 8002b02:	498b      	ldr	r1, [pc, #556]	; (8002d30 <HAL_RCC_ClockConfig+0x25c>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b89      	ldr	r3, [pc, #548]	; (8002d30 <HAL_RCC_ClockConfig+0x25c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e14a      	b.n	8002db2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b28:	4b82      	ldr	r3, [pc, #520]	; (8002d34 <HAL_RCC_ClockConfig+0x260>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	497f      	ldr	r1, [pc, #508]	; (8002d34 <HAL_RCC_ClockConfig+0x260>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 80dc 	beq.w	8002d00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d13c      	bne.n	8002bca <HAL_RCC_ClockConfig+0xf6>
 8002b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b54:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d102      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xa6>
 8002b74:	4b6f      	ldr	r3, [pc, #444]	; (8002d34 <HAL_RCC_ClockConfig+0x260>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	e00f      	b.n	8002b9a <HAL_RCC_ClockConfig+0xc6>
 8002b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	667b      	str	r3, [r7, #100]	; 0x64
 8002b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8c:	663b      	str	r3, [r7, #96]	; 0x60
 8002b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b96:	4b67      	ldr	r3, [pc, #412]	; (8002d34 <HAL_RCC_ClockConfig+0x260>)
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ba0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ba2:	fa92 f2a2 	rbit	r2, r2
 8002ba6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ba8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002baa:	fab2 f282 	clz	r2, r2
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f042 0220 	orr.w	r2, r2, #32
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f002 021f 	and.w	r2, r2, #31
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d17b      	bne.n	8002cbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0f3      	b.n	8002db2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d13c      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x178>
 8002bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d102      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x128>
 8002bf6:	4b4f      	ldr	r3, [pc, #316]	; (8002d34 <HAL_RCC_ClockConfig+0x260>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	e00f      	b.n	8002c1c <HAL_RCC_ClockConfig+0x148>
 8002bfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	647b      	str	r3, [r7, #68]	; 0x44
 8002c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c0e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c18:	4b46      	ldr	r3, [pc, #280]	; (8002d34 <HAL_RCC_ClockConfig+0x260>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c20:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c24:	fa92 f2a2 	rbit	r2, r2
 8002c28:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c2c:	fab2 f282 	clz	r2, r2
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	f042 0220 	orr.w	r2, r2, #32
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f002 021f 	and.w	r2, r2, #31
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d13a      	bne.n	8002cbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0b2      	b.n	8002db2 <HAL_RCC_ClockConfig+0x2de>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d102      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x1a0>
 8002c6e:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <HAL_RCC_ClockConfig+0x260>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	e00d      	b.n	8002c90 <HAL_RCC_ClockConfig+0x1bc>
 8002c74:	2302      	movs	r3, #2
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c80:	2302      	movs	r3, #2
 8002c82:	623b      	str	r3, [r7, #32]
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <HAL_RCC_ClockConfig+0x260>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	2202      	movs	r2, #2
 8002c92:	61ba      	str	r2, [r7, #24]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	fa92 f2a2 	rbit	r2, r2
 8002c9a:	617a      	str	r2, [r7, #20]
  return result;
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	fab2 f282 	clz	r2, r2
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f042 0220 	orr.w	r2, r2, #32
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	f002 021f 	and.w	r2, r2, #31
 8002cae:	2101      	movs	r1, #1
 8002cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e079      	b.n	8002db2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_RCC_ClockConfig+0x260>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f023 0203 	bic.w	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	491a      	ldr	r1, [pc, #104]	; (8002d34 <HAL_RCC_ClockConfig+0x260>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd0:	f7fe f882 	bl	8000dd8 <HAL_GetTick>
 8002cd4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd8:	f7fe f87e 	bl	8000dd8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e061      	b.n	8002db2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cee:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <HAL_RCC_ClockConfig+0x260>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 020c 	and.w	r2, r3, #12
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d1eb      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_ClockConfig+0x25c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d214      	bcs.n	8002d38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <HAL_RCC_ClockConfig+0x25c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 0207 	bic.w	r2, r3, #7
 8002d16:	4906      	ldr	r1, [pc, #24]	; (8002d30 <HAL_RCC_ClockConfig+0x25c>)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <HAL_RCC_ClockConfig+0x25c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e040      	b.n	8002db2 <HAL_RCC_ClockConfig+0x2de>
 8002d30:	40022000 	.word	0x40022000
 8002d34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d44:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <HAL_RCC_ClockConfig+0x2e8>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	491a      	ldr	r1, [pc, #104]	; (8002dbc <HAL_RCC_ClockConfig+0x2e8>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d62:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <HAL_RCC_ClockConfig+0x2e8>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4912      	ldr	r1, [pc, #72]	; (8002dbc <HAL_RCC_ClockConfig+0x2e8>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d76:	f000 f829 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 8002d7a:	4601      	mov	r1, r0
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <HAL_RCC_ClockConfig+0x2e8>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d84:	22f0      	movs	r2, #240	; 0xf0
 8002d86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	fa92 f2a2 	rbit	r2, r2
 8002d8e:	60fa      	str	r2, [r7, #12]
  return result;
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	fab2 f282 	clz	r2, r2
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	40d3      	lsrs	r3, r2
 8002d9a:	4a09      	ldr	r2, [pc, #36]	; (8002dc0 <HAL_RCC_ClockConfig+0x2ec>)
 8002d9c:	5cd3      	ldrb	r3, [r2, r3]
 8002d9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002da2:	4a08      	ldr	r2, [pc, #32]	; (8002dc4 <HAL_RCC_ClockConfig+0x2f0>)
 8002da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <HAL_RCC_ClockConfig+0x2f4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd ffd0 	bl	8000d50 <HAL_InitTick>
  
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3778      	adds	r7, #120	; 0x78
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	0800490c 	.word	0x0800490c
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	20000004 	.word	0x20000004

08002dcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b08b      	sub	sp, #44	; 0x2c
 8002dd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002de6:	4b29      	ldr	r3, [pc, #164]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d002      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x30>
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d003      	beq.n	8002e02 <HAL_RCC_GetSysClockFreq+0x36>
 8002dfa:	e03c      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dfc:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dfe:	623b      	str	r3, [r7, #32]
      break;
 8002e00:	e03c      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e08:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	fa92 f2a2 	rbit	r2, r2
 8002e14:	607a      	str	r2, [r7, #4]
  return result;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	fab2 f282 	clz	r2, r2
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	40d3      	lsrs	r3, r2
 8002e20:	4a1c      	ldr	r2, [pc, #112]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e22:	5cd3      	ldrb	r3, [r2, r3]
 8002e24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e26:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	220f      	movs	r2, #15
 8002e30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	fa92 f2a2 	rbit	r2, r2
 8002e38:	60fa      	str	r2, [r7, #12]
  return result;
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	fab2 f282 	clz	r2, r2
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	40d3      	lsrs	r3, r2
 8002e44:	4a14      	ldr	r2, [pc, #80]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e46:	5cd3      	ldrb	r3, [r2, r3]
 8002e48:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e54:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
 8002e64:	e004      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	623b      	str	r3, [r7, #32]
      break;
 8002e74:	e002      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e78:	623b      	str	r3, [r7, #32]
      break;
 8002e7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	372c      	adds	r7, #44	; 0x2c
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	08004924 	.word	0x08004924
 8002e98:	08004934 	.word	0x08004934
 8002e9c:	003d0900 	.word	0x003d0900
 8002ea0:	007a1200 	.word	0x007a1200

08002ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000000 	.word	0x20000000

08002ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ec2:	f7ff ffef 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002ec6:	4601      	mov	r1, r0
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ed0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ed4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	fa92 f2a2 	rbit	r2, r2
 8002edc:	603a      	str	r2, [r7, #0]
  return result;
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	fab2 f282 	clz	r2, r2
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	40d3      	lsrs	r3, r2
 8002ee8:	4a04      	ldr	r2, [pc, #16]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002eea:	5cd3      	ldrb	r3, [r2, r3]
 8002eec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	0800491c 	.word	0x0800491c

08002f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f06:	f7ff ffcd 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002f0a:	4601      	mov	r1, r0
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f14:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	fa92 f2a2 	rbit	r2, r2
 8002f20:	603a      	str	r2, [r7, #0]
  return result;
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	fab2 f282 	clz	r2, r2
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	40d3      	lsrs	r3, r2
 8002f2c:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f2e:	5cd3      	ldrb	r3, [r2, r3]
 8002f30:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	0800491c 	.word	0x0800491c

08002f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e049      	b.n	8002fea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd fd9e 	bl	8000aac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f000 fd30 	bl	80039e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <HAL_TIM_PWM_Start_DMA+0x2c>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	e03c      	b.n	800309a <HAL_TIM_PWM_Start_DMA+0xa6>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b04      	cmp	r3, #4
 8003024:	d109      	bne.n	800303a <HAL_TIM_PWM_Start_DMA+0x46>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	bf0c      	ite	eq
 8003032:	2301      	moveq	r3, #1
 8003034:	2300      	movne	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	e02f      	b.n	800309a <HAL_TIM_PWM_Start_DMA+0xa6>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d109      	bne.n	8003054 <HAL_TIM_PWM_Start_DMA+0x60>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	e022      	b.n	800309a <HAL_TIM_PWM_Start_DMA+0xa6>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d109      	bne.n	800306e <HAL_TIM_PWM_Start_DMA+0x7a>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	bf0c      	ite	eq
 8003066:	2301      	moveq	r3, #1
 8003068:	2300      	movne	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	e015      	b.n	800309a <HAL_TIM_PWM_Start_DMA+0xa6>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b10      	cmp	r3, #16
 8003072:	d109      	bne.n	8003088 <HAL_TIM_PWM_Start_DMA+0x94>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	e008      	b.n	800309a <HAL_TIM_PWM_Start_DMA+0xa6>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800309e:	2302      	movs	r3, #2
 80030a0:	e197      	b.n	80033d2 <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_TIM_PWM_Start_DMA+0xc8>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e03c      	b.n	8003136 <HAL_TIM_PWM_Start_DMA+0x142>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d109      	bne.n	80030d6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e02f      	b.n	8003136 <HAL_TIM_PWM_Start_DMA+0x142>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d109      	bne.n	80030f0 <HAL_TIM_PWM_Start_DMA+0xfc>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e022      	b.n	8003136 <HAL_TIM_PWM_Start_DMA+0x142>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	d109      	bne.n	800310a <HAL_TIM_PWM_Start_DMA+0x116>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	e015      	b.n	8003136 <HAL_TIM_PWM_Start_DMA+0x142>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b10      	cmp	r3, #16
 800310e:	d109      	bne.n	8003124 <HAL_TIM_PWM_Start_DMA+0x130>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e008      	b.n	8003136 <HAL_TIM_PWM_Start_DMA+0x142>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d034      	beq.n	80031a4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d104      	bne.n	800314a <HAL_TIM_PWM_Start_DMA+0x156>
 8003140:	887b      	ldrh	r3, [r7, #2]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e143      	b.n	80033d2 <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d104      	bne.n	800315a <HAL_TIM_PWM_Start_DMA+0x166>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003158:	e026      	b.n	80031a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d104      	bne.n	800316a <HAL_TIM_PWM_Start_DMA+0x176>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003168:	e01e      	b.n	80031a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d104      	bne.n	800317a <HAL_TIM_PWM_Start_DMA+0x186>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003178:	e016      	b.n	80031a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b0c      	cmp	r3, #12
 800317e:	d104      	bne.n	800318a <HAL_TIM_PWM_Start_DMA+0x196>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003188:	e00e      	b.n	80031a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b10      	cmp	r3, #16
 800318e:	d104      	bne.n	800319a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003198:	e006      	b.n	80031a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031a2:	e001      	b.n	80031a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e114      	b.n	80033d2 <HAL_TIM_PWM_Start_DMA+0x3de>
  }

  switch (Channel)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	f200 80ae 	bhi.w	800330c <HAL_TIM_PWM_Start_DMA+0x318>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	080031ed 	.word	0x080031ed
 80031bc:	0800330d 	.word	0x0800330d
 80031c0:	0800330d 	.word	0x0800330d
 80031c4:	0800330d 	.word	0x0800330d
 80031c8:	08003235 	.word	0x08003235
 80031cc:	0800330d 	.word	0x0800330d
 80031d0:	0800330d 	.word	0x0800330d
 80031d4:	0800330d 	.word	0x0800330d
 80031d8:	0800327d 	.word	0x0800327d
 80031dc:	0800330d 	.word	0x0800330d
 80031e0:	0800330d 	.word	0x0800330d
 80031e4:	0800330d 	.word	0x0800330d
 80031e8:	080032c5 	.word	0x080032c5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a7a      	ldr	r2, [pc, #488]	; (80033dc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	4a79      	ldr	r2, [pc, #484]	; (80033e0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	4a78      	ldr	r2, [pc, #480]	; (80033e4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003202:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3334      	adds	r3, #52	; 0x34
 8003210:	461a      	mov	r2, r3
 8003212:	887b      	ldrh	r3, [r7, #2]
 8003214:	f7fe f8f0 	bl	80013f8 <HAL_DMA_Start_IT>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e0d7      	b.n	80033d2 <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003230:	60da      	str	r2, [r3, #12]
      break;
 8003232:	e06e      	b.n	8003312 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	4a68      	ldr	r2, [pc, #416]	; (80033dc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800323a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	4a67      	ldr	r2, [pc, #412]	; (80033e0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	4a66      	ldr	r2, [pc, #408]	; (80033e4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800324a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3338      	adds	r3, #56	; 0x38
 8003258:	461a      	mov	r2, r3
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	f7fe f8cc 	bl	80013f8 <HAL_DMA_Start_IT>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0b3      	b.n	80033d2 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003278:	60da      	str	r2, [r3, #12]
      break;
 800327a:	e04a      	b.n	8003312 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	4a56      	ldr	r2, [pc, #344]	; (80033dc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003282:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	4a55      	ldr	r2, [pc, #340]	; (80033e0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	4a54      	ldr	r2, [pc, #336]	; (80033e4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003292:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	333c      	adds	r3, #60	; 0x3c
 80032a0:	461a      	mov	r2, r3
 80032a2:	887b      	ldrh	r3, [r7, #2]
 80032a4:	f7fe f8a8 	bl	80013f8 <HAL_DMA_Start_IT>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e08f      	b.n	80033d2 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c0:	60da      	str	r2, [r3, #12]
      break;
 80032c2:	e026      	b.n	8003312 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	4a44      	ldr	r2, [pc, #272]	; (80033dc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	4a43      	ldr	r2, [pc, #268]	; (80033e0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80032d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	4a42      	ldr	r2, [pc, #264]	; (80033e4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80032da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3340      	adds	r3, #64	; 0x40
 80032e8:	461a      	mov	r2, r3
 80032ea:	887b      	ldrh	r3, [r7, #2]
 80032ec:	f7fe f884 	bl	80013f8 <HAL_DMA_Start_IT>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e06b      	b.n	80033d2 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003308:	60da      	str	r2, [r3, #12]
      break;
 800330a:	e002      	b.n	8003312 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	75fb      	strb	r3, [r7, #23]
      break;
 8003310:	bf00      	nop
  }

  if (status == HAL_OK)
 8003312:	7dfb      	ldrb	r3, [r7, #23]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d15b      	bne.n	80033d0 <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2201      	movs	r2, #1
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fe7f 	bl	8004024 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2f      	ldr	r2, [pc, #188]	; (80033e8 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00e      	beq.n	800334e <HAL_TIM_PWM_Start_DMA+0x35a>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2d      	ldr	r2, [pc, #180]	; (80033ec <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d009      	beq.n	800334e <HAL_TIM_PWM_Start_DMA+0x35a>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2c      	ldr	r2, [pc, #176]	; (80033f0 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_TIM_PWM_Start_DMA+0x35a>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a2a      	ldr	r2, [pc, #168]	; (80033f4 <HAL_TIM_PWM_Start_DMA+0x400>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_TIM_PWM_Start_DMA+0x35e>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <HAL_TIM_PWM_Start_DMA+0x360>
 8003352:	2300      	movs	r3, #0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003366:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1e      	ldr	r2, [pc, #120]	; (80033e8 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00e      	beq.n	8003390 <HAL_TIM_PWM_Start_DMA+0x39c>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337a:	d009      	beq.n	8003390 <HAL_TIM_PWM_Start_DMA+0x39c>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d004      	beq.n	8003390 <HAL_TIM_PWM_Start_DMA+0x39c>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_TIM_PWM_Start_DMA+0x3f8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d115      	bne.n	80033bc <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_TIM_PWM_Start_DMA+0x408>)
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d015      	beq.n	80033ce <HAL_TIM_PWM_Start_DMA+0x3da>
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d011      	beq.n	80033ce <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ba:	e008      	b.n	80033ce <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	e000      	b.n	80033d0 <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ce:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	080038d7 	.word	0x080038d7
 80033e0:	0800397f 	.word	0x0800397f
 80033e4:	08003845 	.word	0x08003845
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40014000 	.word	0x40014000
 80033f0:	40014400 	.word	0x40014400
 80033f4:	40014800 	.word	0x40014800
 80033f8:	40000400 	.word	0x40000400
 80033fc:	00010007 	.word	0x00010007

08003400 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b0c      	cmp	r3, #12
 8003412:	d855      	bhi.n	80034c0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003414:	a201      	add	r2, pc, #4	; (adr r2, 800341c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	08003451 	.word	0x08003451
 8003420:	080034c1 	.word	0x080034c1
 8003424:	080034c1 	.word	0x080034c1
 8003428:	080034c1 	.word	0x080034c1
 800342c:	0800346d 	.word	0x0800346d
 8003430:	080034c1 	.word	0x080034c1
 8003434:	080034c1 	.word	0x080034c1
 8003438:	080034c1 	.word	0x080034c1
 800343c:	08003489 	.word	0x08003489
 8003440:	080034c1 	.word	0x080034c1
 8003444:	080034c1 	.word	0x080034c1
 8003448:	080034c1 	.word	0x080034c1
 800344c:	080034a5 	.word	0x080034a5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800345e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe f826 	bl	80014b6 <HAL_DMA_Abort_IT>
      break;
 800346a:	e02c      	b.n	80034c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	4618      	mov	r0, r3
 8003482:	f7fe f818 	bl	80014b6 <HAL_DMA_Abort_IT>
      break;
 8003486:	e01e      	b.n	80034c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003496:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe f80a 	bl	80014b6 <HAL_DMA_Abort_IT>
      break;
 80034a2:	e010      	b.n	80034c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd fffc 	bl	80014b6 <HAL_DMA_Abort_IT>
      break;
 80034be:	e002      	b.n	80034c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
      break;
 80034c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d17b      	bne.n	80035c4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2200      	movs	r2, #0
 80034d2:	6839      	ldr	r1, [r7, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fda5 	bl	8004024 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a3c      	ldr	r2, [pc, #240]	; (80035d0 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_TIM_PWM_Stop_DMA+0x102>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a3a      	ldr	r2, [pc, #232]	; (80035d4 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_TIM_PWM_Stop_DMA+0x102>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a39      	ldr	r2, [pc, #228]	; (80035d8 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_TIM_PWM_Stop_DMA+0x102>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a37      	ldr	r2, [pc, #220]	; (80035dc <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_TIM_PWM_Stop_DMA+0x108>
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d017      	beq.n	800353c <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6a1a      	ldr	r2, [r3, #32]
 8003512:	f241 1311 	movw	r3, #4369	; 0x1111
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10f      	bne.n	800353c <HAL_TIM_PWM_Stop_DMA+0x13c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6a1a      	ldr	r2, [r3, #32]
 8003522:	f240 4344 	movw	r3, #1092	; 0x444
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <HAL_TIM_PWM_Stop_DMA+0x13c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800353a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6a1a      	ldr	r2, [r3, #32]
 8003542:	f241 1311 	movw	r3, #4369	; 0x1111
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10f      	bne.n	800356c <HAL_TIM_PWM_Stop_DMA+0x16c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a1a      	ldr	r2, [r3, #32]
 8003552:	f240 4344 	movw	r3, #1092	; 0x444
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d107      	bne.n	800356c <HAL_TIM_PWM_Stop_DMA+0x16c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d104      	bne.n	800357c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800357a:	e023      	b.n	80035c4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b04      	cmp	r3, #4
 8003580:	d104      	bne.n	800358c <HAL_TIM_PWM_Stop_DMA+0x18c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800358a:	e01b      	b.n	80035c4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b08      	cmp	r3, #8
 8003590:	d104      	bne.n	800359c <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800359a:	e013      	b.n	80035c4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d104      	bne.n	80035ac <HAL_TIM_PWM_Stop_DMA+0x1ac>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035aa:	e00b      	b.n	80035c4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d104      	bne.n	80035bc <HAL_TIM_PWM_Stop_DMA+0x1bc>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ba:	e003      	b.n	80035c4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40014000 	.word	0x40014000
 80035d8:	40014400 	.word	0x40014400
 80035dc:	40014800 	.word	0x40014800

080035e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e0ff      	b.n	80037fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b14      	cmp	r3, #20
 800360a:	f200 80f0 	bhi.w	80037ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800360e:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003614:	08003669 	.word	0x08003669
 8003618:	080037ef 	.word	0x080037ef
 800361c:	080037ef 	.word	0x080037ef
 8003620:	080037ef 	.word	0x080037ef
 8003624:	080036a9 	.word	0x080036a9
 8003628:	080037ef 	.word	0x080037ef
 800362c:	080037ef 	.word	0x080037ef
 8003630:	080037ef 	.word	0x080037ef
 8003634:	080036eb 	.word	0x080036eb
 8003638:	080037ef 	.word	0x080037ef
 800363c:	080037ef 	.word	0x080037ef
 8003640:	080037ef 	.word	0x080037ef
 8003644:	0800372b 	.word	0x0800372b
 8003648:	080037ef 	.word	0x080037ef
 800364c:	080037ef 	.word	0x080037ef
 8003650:	080037ef 	.word	0x080037ef
 8003654:	0800376d 	.word	0x0800376d
 8003658:	080037ef 	.word	0x080037ef
 800365c:	080037ef 	.word	0x080037ef
 8003660:	080037ef 	.word	0x080037ef
 8003664:	080037ad 	.word	0x080037ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fa32 	bl	8003ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0208 	orr.w	r2, r2, #8
 8003682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0204 	bic.w	r2, r2, #4
 8003692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6999      	ldr	r1, [r3, #24]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	619a      	str	r2, [r3, #24]
      break;
 80036a6:	e0a5      	b.n	80037f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fa98 	bl	8003be4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6999      	ldr	r1, [r3, #24]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	021a      	lsls	r2, r3, #8
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	619a      	str	r2, [r3, #24]
      break;
 80036e8:	e084      	b.n	80037f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 faf7 	bl	8003ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69da      	ldr	r2, [r3, #28]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0208 	orr.w	r2, r2, #8
 8003704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0204 	bic.w	r2, r2, #4
 8003714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69d9      	ldr	r1, [r3, #28]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	61da      	str	r2, [r3, #28]
      break;
 8003728:	e064      	b.n	80037f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fb55 	bl	8003de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69da      	ldr	r2, [r3, #28]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69d9      	ldr	r1, [r3, #28]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	021a      	lsls	r2, r3, #8
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	61da      	str	r2, [r3, #28]
      break;
 800376a:	e043      	b.n	80037f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fb98 	bl	8003ea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0208 	orr.w	r2, r2, #8
 8003786:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0204 	bic.w	r2, r2, #4
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037aa:	e023      	b.n	80037f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fbd6 	bl	8003f64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	021a      	lsls	r2, r3, #8
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037ec:	e002      	b.n	80037f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
      break;
 80037f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop

08003808 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	429a      	cmp	r2, r3
 800385a:	d107      	bne.n	800386c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800386a:	e02a      	b.n	80038c2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	429a      	cmp	r2, r3
 8003874:	d107      	bne.n	8003886 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2202      	movs	r2, #2
 800387a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003884:	e01d      	b.n	80038c2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	429a      	cmp	r2, r3
 800388e:	d107      	bne.n	80038a0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2204      	movs	r2, #4
 8003894:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800389e:	e010      	b.n	80038c2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d107      	bne.n	80038ba <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2208      	movs	r2, #8
 80038ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038b8:	e003      	b.n	80038c2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f7ff ffb4 	bl	8003830 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	771a      	strb	r2, [r3, #28]
}
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d10b      	bne.n	8003906 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d136      	bne.n	800396a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003904:	e031      	b.n	800396a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	429a      	cmp	r2, r3
 800390e:	d10b      	bne.n	8003928 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2202      	movs	r2, #2
 8003914:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d125      	bne.n	800396a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003926:	e020      	b.n	800396a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	429a      	cmp	r2, r3
 8003930:	d10b      	bne.n	800394a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2204      	movs	r2, #4
 8003936:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d114      	bne.n	800396a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003948:	e00f      	b.n	800396a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d10a      	bne.n	800396a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2208      	movs	r2, #8
 8003958:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f7ff ff4c 	bl	8003808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	771a      	strb	r2, [r3, #28]
}
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	429a      	cmp	r2, r3
 8003994:	d103      	bne.n	800399e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	771a      	strb	r2, [r3, #28]
 800399c:	e019      	b.n	80039d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d103      	bne.n	80039b0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2202      	movs	r2, #2
 80039ac:	771a      	strb	r2, [r3, #28]
 80039ae:	e010      	b.n	80039d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d103      	bne.n	80039c2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2204      	movs	r2, #4
 80039be:	771a      	strb	r2, [r3, #28]
 80039c0:	e007      	b.n	80039d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d102      	bne.n	80039d2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2208      	movs	r2, #8
 80039d0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f7ff ff22 	bl	800381c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	771a      	strb	r2, [r3, #28]
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a32      	ldr	r2, [pc, #200]	; (8003ac4 <TIM_Base_SetConfig+0xdc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d007      	beq.n	8003a10 <TIM_Base_SetConfig+0x28>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a06:	d003      	beq.n	8003a10 <TIM_Base_SetConfig+0x28>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a2f      	ldr	r2, [pc, #188]	; (8003ac8 <TIM_Base_SetConfig+0xe0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d108      	bne.n	8003a22 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a27      	ldr	r2, [pc, #156]	; (8003ac4 <TIM_Base_SetConfig+0xdc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <TIM_Base_SetConfig+0x6a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a30:	d00f      	beq.n	8003a52 <TIM_Base_SetConfig+0x6a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a24      	ldr	r2, [pc, #144]	; (8003ac8 <TIM_Base_SetConfig+0xe0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <TIM_Base_SetConfig+0x6a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a23      	ldr	r2, [pc, #140]	; (8003acc <TIM_Base_SetConfig+0xe4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <TIM_Base_SetConfig+0x6a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a22      	ldr	r2, [pc, #136]	; (8003ad0 <TIM_Base_SetConfig+0xe8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d003      	beq.n	8003a52 <TIM_Base_SetConfig+0x6a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a21      	ldr	r2, [pc, #132]	; (8003ad4 <TIM_Base_SetConfig+0xec>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d108      	bne.n	8003a64 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <TIM_Base_SetConfig+0xdc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <TIM_Base_SetConfig+0xc0>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a0e      	ldr	r2, [pc, #56]	; (8003acc <TIM_Base_SetConfig+0xe4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_Base_SetConfig+0xc0>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a0d      	ldr	r2, [pc, #52]	; (8003ad0 <TIM_Base_SetConfig+0xe8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_Base_SetConfig+0xc0>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a0c      	ldr	r2, [pc, #48]	; (8003ad4 <TIM_Base_SetConfig+0xec>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d103      	bne.n	8003ab0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	615a      	str	r2, [r3, #20]
}
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40014000 	.word	0x40014000
 8003ad0:	40014400 	.word	0x40014400
 8003ad4:	40014800 	.word	0x40014800

08003ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	f023 0201 	bic.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0303 	bic.w	r3, r3, #3
 8003b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f023 0302 	bic.w	r3, r3, #2
 8003b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a28      	ldr	r2, [pc, #160]	; (8003bd4 <TIM_OC1_SetConfig+0xfc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <TIM_OC1_SetConfig+0x78>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a27      	ldr	r2, [pc, #156]	; (8003bd8 <TIM_OC1_SetConfig+0x100>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <TIM_OC1_SetConfig+0x78>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a26      	ldr	r2, [pc, #152]	; (8003bdc <TIM_OC1_SetConfig+0x104>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_OC1_SetConfig+0x78>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a25      	ldr	r2, [pc, #148]	; (8003be0 <TIM_OC1_SetConfig+0x108>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10c      	bne.n	8003b6a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0308 	bic.w	r3, r3, #8
 8003b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a19      	ldr	r2, [pc, #100]	; (8003bd4 <TIM_OC1_SetConfig+0xfc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00b      	beq.n	8003b8a <TIM_OC1_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <TIM_OC1_SetConfig+0x100>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d007      	beq.n	8003b8a <TIM_OC1_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a17      	ldr	r2, [pc, #92]	; (8003bdc <TIM_OC1_SetConfig+0x104>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <TIM_OC1_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <TIM_OC1_SetConfig+0x108>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d111      	bne.n	8003bae <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	621a      	str	r2, [r3, #32]
}
 8003bc8:	bf00      	nop
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40014000 	.word	0x40014000
 8003bdc:	40014400 	.word	0x40014400
 8003be0:	40014800 	.word	0x40014800

08003be4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	f023 0210 	bic.w	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0320 	bic.w	r3, r3, #32
 8003c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a24      	ldr	r2, [pc, #144]	; (8003cd4 <TIM_OC2_SetConfig+0xf0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d10d      	bne.n	8003c64 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <TIM_OC2_SetConfig+0xf0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00b      	beq.n	8003c84 <TIM_OC2_SetConfig+0xa0>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a1a      	ldr	r2, [pc, #104]	; (8003cd8 <TIM_OC2_SetConfig+0xf4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d007      	beq.n	8003c84 <TIM_OC2_SetConfig+0xa0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <TIM_OC2_SetConfig+0xf8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <TIM_OC2_SetConfig+0xa0>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a18      	ldr	r2, [pc, #96]	; (8003ce0 <TIM_OC2_SetConfig+0xfc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d113      	bne.n	8003cac <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c8a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c92:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	621a      	str	r2, [r3, #32]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40014400 	.word	0x40014400
 8003ce0:	40014800 	.word	0x40014800

08003ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0303 	bic.w	r3, r3, #3
 8003d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a23      	ldr	r2, [pc, #140]	; (8003dd0 <TIM_OC3_SetConfig+0xec>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d10d      	bne.n	8003d62 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d60:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1a      	ldr	r2, [pc, #104]	; (8003dd0 <TIM_OC3_SetConfig+0xec>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00b      	beq.n	8003d82 <TIM_OC3_SetConfig+0x9e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <TIM_OC3_SetConfig+0xf0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d007      	beq.n	8003d82 <TIM_OC3_SetConfig+0x9e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <TIM_OC3_SetConfig+0xf4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d003      	beq.n	8003d82 <TIM_OC3_SetConfig+0x9e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <TIM_OC3_SetConfig+0xf8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d113      	bne.n	8003daa <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	621a      	str	r2, [r3, #32]
}
 8003dc4:	bf00      	nop
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800

08003de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	031b      	lsls	r3, r3, #12
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <TIM_OC4_SetConfig+0xb8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00b      	beq.n	8003e5c <TIM_OC4_SetConfig+0x7c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <TIM_OC4_SetConfig+0xbc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d007      	beq.n	8003e5c <TIM_OC4_SetConfig+0x7c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a14      	ldr	r2, [pc, #80]	; (8003ea0 <TIM_OC4_SetConfig+0xc0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_OC4_SetConfig+0x7c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a13      	ldr	r2, [pc, #76]	; (8003ea4 <TIM_OC4_SetConfig+0xc4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d109      	bne.n	8003e70 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	019b      	lsls	r3, r3, #6
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	621a      	str	r2, [r3, #32]
}
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40014400 	.word	0x40014400
 8003ea4:	40014800 	.word	0x40014800

08003ea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003eec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	041b      	lsls	r3, r3, #16
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <TIM_OC5_SetConfig+0xac>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00b      	beq.n	8003f1a <TIM_OC5_SetConfig+0x72>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <TIM_OC5_SetConfig+0xb0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <TIM_OC5_SetConfig+0x72>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <TIM_OC5_SetConfig+0xb4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d003      	beq.n	8003f1a <TIM_OC5_SetConfig+0x72>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a12      	ldr	r2, [pc, #72]	; (8003f60 <TIM_OC5_SetConfig+0xb8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d109      	bne.n	8003f2e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	621a      	str	r2, [r3, #32]
}
 8003f48:	bf00      	nop
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40014000 	.word	0x40014000
 8003f5c:	40014400 	.word	0x40014400
 8003f60:	40014800 	.word	0x40014800

08003f64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	051b      	lsls	r3, r3, #20
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a16      	ldr	r2, [pc, #88]	; (8004014 <TIM_OC6_SetConfig+0xb0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00b      	beq.n	8003fd8 <TIM_OC6_SetConfig+0x74>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a15      	ldr	r2, [pc, #84]	; (8004018 <TIM_OC6_SetConfig+0xb4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d007      	beq.n	8003fd8 <TIM_OC6_SetConfig+0x74>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a14      	ldr	r2, [pc, #80]	; (800401c <TIM_OC6_SetConfig+0xb8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_OC6_SetConfig+0x74>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a13      	ldr	r2, [pc, #76]	; (8004020 <TIM_OC6_SetConfig+0xbc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d109      	bne.n	8003fec <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	029b      	lsls	r3, r3, #10
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	621a      	str	r2, [r3, #32]
}
 8004006:	bf00      	nop
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40014000 	.word	0x40014000
 800401c:	40014400 	.word	0x40014400
 8004020:	40014800 	.word	0x40014800

08004024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	2201      	movs	r2, #1
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1a      	ldr	r2, [r3, #32]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	43db      	mvns	r3, r3
 8004046:	401a      	ands	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	fa01 f303 	lsl.w	r3, r1, r3
 800405c:	431a      	orrs	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004084:	2302      	movs	r3, #2
 8004086:	e054      	b.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a24      	ldr	r2, [pc, #144]	; (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d108      	bne.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a17      	ldr	r2, [pc, #92]	; (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d009      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a13      	ldr	r2, [pc, #76]	; (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a11      	ldr	r2, [pc, #68]	; (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d10c      	bne.n	8004120 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	4313      	orrs	r3, r2
 8004116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40000400 	.word	0x40000400
 8004148:	40014000 	.word	0x40014000

0800414c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e040      	b.n	80041e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fc fd24 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2224      	movs	r2, #36	; 0x24
 8004178:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f82c 	bl	80041e8 <UART_SetConfig>
 8004190:	4603      	mov	r3, r0
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e022      	b.n	80041e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f956 	bl	8004454 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f9dd 	bl	8004598 <UART_CheckIdleState>
 80041de:	4603      	mov	r3, r0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b8a      	ldr	r3, [pc, #552]	; (800443c <UART_SetConfig+0x254>)
 8004214:	4013      	ands	r3, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	6979      	ldr	r1, [r7, #20]
 800421c:	430b      	orrs	r3, r1
 800421e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	430a      	orrs	r2, r1
 8004258:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a78      	ldr	r2, [pc, #480]	; (8004440 <UART_SetConfig+0x258>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d120      	bne.n	80042a6 <UART_SetConfig+0xbe>
 8004264:	4b77      	ldr	r3, [pc, #476]	; (8004444 <UART_SetConfig+0x25c>)
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	f003 0303 	and.w	r3, r3, #3
 800426c:	2b03      	cmp	r3, #3
 800426e:	d817      	bhi.n	80042a0 <UART_SetConfig+0xb8>
 8004270:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <UART_SetConfig+0x90>)
 8004272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004276:	bf00      	nop
 8004278:	08004289 	.word	0x08004289
 800427c:	08004295 	.word	0x08004295
 8004280:	0800429b 	.word	0x0800429b
 8004284:	0800428f 	.word	0x0800428f
 8004288:	2300      	movs	r3, #0
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e01d      	b.n	80042ca <UART_SetConfig+0xe2>
 800428e:	2302      	movs	r3, #2
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e01a      	b.n	80042ca <UART_SetConfig+0xe2>
 8004294:	2304      	movs	r3, #4
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e017      	b.n	80042ca <UART_SetConfig+0xe2>
 800429a:	2308      	movs	r3, #8
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e014      	b.n	80042ca <UART_SetConfig+0xe2>
 80042a0:	2310      	movs	r3, #16
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e011      	b.n	80042ca <UART_SetConfig+0xe2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a67      	ldr	r2, [pc, #412]	; (8004448 <UART_SetConfig+0x260>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d102      	bne.n	80042b6 <UART_SetConfig+0xce>
 80042b0:	2300      	movs	r3, #0
 80042b2:	77fb      	strb	r3, [r7, #31]
 80042b4:	e009      	b.n	80042ca <UART_SetConfig+0xe2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a64      	ldr	r2, [pc, #400]	; (800444c <UART_SetConfig+0x264>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d102      	bne.n	80042c6 <UART_SetConfig+0xde>
 80042c0:	2300      	movs	r3, #0
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e001      	b.n	80042ca <UART_SetConfig+0xe2>
 80042c6:	2310      	movs	r3, #16
 80042c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d2:	d15b      	bne.n	800438c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80042d4:	7ffb      	ldrb	r3, [r7, #31]
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d827      	bhi.n	800432a <UART_SetConfig+0x142>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <UART_SetConfig+0xf8>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	08004305 	.word	0x08004305
 80042e4:	0800430d 	.word	0x0800430d
 80042e8:	08004315 	.word	0x08004315
 80042ec:	0800432b 	.word	0x0800432b
 80042f0:	0800431b 	.word	0x0800431b
 80042f4:	0800432b 	.word	0x0800432b
 80042f8:	0800432b 	.word	0x0800432b
 80042fc:	0800432b 	.word	0x0800432b
 8004300:	08004323 	.word	0x08004323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004304:	f7fe fdda 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8004308:	61b8      	str	r0, [r7, #24]
        break;
 800430a:	e013      	b.n	8004334 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800430c:	f7fe fdf8 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 8004310:	61b8      	str	r0, [r7, #24]
        break;
 8004312:	e00f      	b.n	8004334 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004314:	4b4e      	ldr	r3, [pc, #312]	; (8004450 <UART_SetConfig+0x268>)
 8004316:	61bb      	str	r3, [r7, #24]
        break;
 8004318:	e00c      	b.n	8004334 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800431a:	f7fe fd57 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 800431e:	61b8      	str	r0, [r7, #24]
        break;
 8004320:	e008      	b.n	8004334 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004326:	61bb      	str	r3, [r7, #24]
        break;
 8004328:	e004      	b.n	8004334 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	77bb      	strb	r3, [r7, #30]
        break;
 8004332:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d074      	beq.n	8004424 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	005a      	lsls	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	085b      	lsrs	r3, r3, #1
 8004344:	441a      	add	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	fbb2 f3f3 	udiv	r3, r2, r3
 800434e:	b29b      	uxth	r3, r3
 8004350:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b0f      	cmp	r3, #15
 8004356:	d916      	bls.n	8004386 <UART_SetConfig+0x19e>
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800435e:	d212      	bcs.n	8004386 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	b29b      	uxth	r3, r3
 8004364:	f023 030f 	bic.w	r3, r3, #15
 8004368:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	b29b      	uxth	r3, r3
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	b29a      	uxth	r2, r3
 8004376:	89fb      	ldrh	r3, [r7, #14]
 8004378:	4313      	orrs	r3, r2
 800437a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	89fa      	ldrh	r2, [r7, #14]
 8004382:	60da      	str	r2, [r3, #12]
 8004384:	e04e      	b.n	8004424 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	77bb      	strb	r3, [r7, #30]
 800438a:	e04b      	b.n	8004424 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800438c:	7ffb      	ldrb	r3, [r7, #31]
 800438e:	2b08      	cmp	r3, #8
 8004390:	d827      	bhi.n	80043e2 <UART_SetConfig+0x1fa>
 8004392:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <UART_SetConfig+0x1b0>)
 8004394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004398:	080043bd 	.word	0x080043bd
 800439c:	080043c5 	.word	0x080043c5
 80043a0:	080043cd 	.word	0x080043cd
 80043a4:	080043e3 	.word	0x080043e3
 80043a8:	080043d3 	.word	0x080043d3
 80043ac:	080043e3 	.word	0x080043e3
 80043b0:	080043e3 	.word	0x080043e3
 80043b4:	080043e3 	.word	0x080043e3
 80043b8:	080043db 	.word	0x080043db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043bc:	f7fe fd7e 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 80043c0:	61b8      	str	r0, [r7, #24]
        break;
 80043c2:	e013      	b.n	80043ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043c4:	f7fe fd9c 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 80043c8:	61b8      	str	r0, [r7, #24]
        break;
 80043ca:	e00f      	b.n	80043ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043cc:	4b20      	ldr	r3, [pc, #128]	; (8004450 <UART_SetConfig+0x268>)
 80043ce:	61bb      	str	r3, [r7, #24]
        break;
 80043d0:	e00c      	b.n	80043ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043d2:	f7fe fcfb 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 80043d6:	61b8      	str	r0, [r7, #24]
        break;
 80043d8:	e008      	b.n	80043ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043de:	61bb      	str	r3, [r7, #24]
        break;
 80043e0:	e004      	b.n	80043ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	77bb      	strb	r3, [r7, #30]
        break;
 80043ea:	bf00      	nop
    }

    if (pclk != 0U)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d018      	beq.n	8004424 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	085a      	lsrs	r2, r3, #1
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	441a      	add	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	b29b      	uxth	r3, r3
 8004406:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	2b0f      	cmp	r3, #15
 800440c:	d908      	bls.n	8004420 <UART_SetConfig+0x238>
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004414:	d204      	bcs.n	8004420 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	e001      	b.n	8004424 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004430:	7fbb      	ldrb	r3, [r7, #30]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3720      	adds	r7, #32
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	efff69f3 	.word	0xefff69f3
 8004440:	40013800 	.word	0x40013800
 8004444:	40021000 	.word	0x40021000
 8004448:	40004400 	.word	0x40004400
 800444c:	40004800 	.word	0x40004800
 8004450:	007a1200 	.word	0x007a1200

08004454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01a      	beq.n	800456a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004552:	d10a      	bne.n	800456a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]
  }
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045a8:	f7fc fc16 	bl	8000dd8 <HAL_GetTick>
 80045ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d10e      	bne.n	80045da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f82d 	bl	800462a <UART_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e023      	b.n	8004622 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d10e      	bne.n	8004606 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f817 	bl	800462a <UART_WaitOnFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e00d      	b.n	8004622 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b09c      	sub	sp, #112	; 0x70
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	4613      	mov	r3, r2
 8004638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463a:	e0a5      	b.n	8004788 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	f000 80a1 	beq.w	8004788 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7fc fbc7 	bl	8000dd8 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <UART_WaitOnFlagUntilTimeout+0x32>
 8004656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004658:	2b00      	cmp	r3, #0
 800465a:	d13e      	bne.n	80046da <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800466a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004670:	667b      	str	r3, [r7, #100]	; 0x64
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800467a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800467c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004680:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e6      	bne.n	800465c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3308      	adds	r3, #8
 8004694:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	663b      	str	r3, [r7, #96]	; 0x60
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3308      	adds	r3, #8
 80046ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80046b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e5      	bne.n	800468e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2220      	movs	r2, #32
 80046c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e067      	b.n	80047aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d04f      	beq.n	8004788 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f6:	d147      	bne.n	8004788 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004700:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004716:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004720:	637b      	str	r3, [r7, #52]	; 0x34
 8004722:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e6      	bne.n	8004702 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3308      	adds	r3, #8
 800473a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	613b      	str	r3, [r7, #16]
   return(result);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	66bb      	str	r3, [r7, #104]	; 0x68
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3308      	adds	r3, #8
 8004752:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004754:	623a      	str	r2, [r7, #32]
 8004756:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	69f9      	ldr	r1, [r7, #28]
 800475a:	6a3a      	ldr	r2, [r7, #32]
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	61bb      	str	r3, [r7, #24]
   return(result);
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e5      	bne.n	8004734 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2220      	movs	r2, #32
 8004772:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e010      	b.n	80047aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69da      	ldr	r2, [r3, #28]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	429a      	cmp	r2, r3
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	f43f af4a 	beq.w	800463c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3770      	adds	r7, #112	; 0x70
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <_ZdlPvj>:
 80047b2:	f000 b800 	b.w	80047b6 <_ZdlPv>

080047b6 <_ZdlPv>:
 80047b6:	f000 b825 	b.w	8004804 <free>
	...

080047bc <__libc_init_array>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	4d0d      	ldr	r5, [pc, #52]	; (80047f4 <__libc_init_array+0x38>)
 80047c0:	4c0d      	ldr	r4, [pc, #52]	; (80047f8 <__libc_init_array+0x3c>)
 80047c2:	1b64      	subs	r4, r4, r5
 80047c4:	10a4      	asrs	r4, r4, #2
 80047c6:	2600      	movs	r6, #0
 80047c8:	42a6      	cmp	r6, r4
 80047ca:	d109      	bne.n	80047e0 <__libc_init_array+0x24>
 80047cc:	4d0b      	ldr	r5, [pc, #44]	; (80047fc <__libc_init_array+0x40>)
 80047ce:	4c0c      	ldr	r4, [pc, #48]	; (8004800 <__libc_init_array+0x44>)
 80047d0:	f000 f882 	bl	80048d8 <_init>
 80047d4:	1b64      	subs	r4, r4, r5
 80047d6:	10a4      	asrs	r4, r4, #2
 80047d8:	2600      	movs	r6, #0
 80047da:	42a6      	cmp	r6, r4
 80047dc:	d105      	bne.n	80047ea <__libc_init_array+0x2e>
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e4:	4798      	blx	r3
 80047e6:	3601      	adds	r6, #1
 80047e8:	e7ee      	b.n	80047c8 <__libc_init_array+0xc>
 80047ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ee:	4798      	blx	r3
 80047f0:	3601      	adds	r6, #1
 80047f2:	e7f2      	b.n	80047da <__libc_init_array+0x1e>
 80047f4:	08004944 	.word	0x08004944
 80047f8:	08004944 	.word	0x08004944
 80047fc:	08004944 	.word	0x08004944
 8004800:	08004948 	.word	0x08004948

08004804 <free>:
 8004804:	4b02      	ldr	r3, [pc, #8]	; (8004810 <free+0xc>)
 8004806:	4601      	mov	r1, r0
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	f000 b80b 	b.w	8004824 <_free_r>
 800480e:	bf00      	nop
 8004810:	2000000c 	.word	0x2000000c

08004814 <memset>:
 8004814:	4402      	add	r2, r0
 8004816:	4603      	mov	r3, r0
 8004818:	4293      	cmp	r3, r2
 800481a:	d100      	bne.n	800481e <memset+0xa>
 800481c:	4770      	bx	lr
 800481e:	f803 1b01 	strb.w	r1, [r3], #1
 8004822:	e7f9      	b.n	8004818 <memset+0x4>

08004824 <_free_r>:
 8004824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004826:	2900      	cmp	r1, #0
 8004828:	d044      	beq.n	80048b4 <_free_r+0x90>
 800482a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800482e:	9001      	str	r0, [sp, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f1a1 0404 	sub.w	r4, r1, #4
 8004836:	bfb8      	it	lt
 8004838:	18e4      	addlt	r4, r4, r3
 800483a:	f000 f83f 	bl	80048bc <__malloc_lock>
 800483e:	4a1e      	ldr	r2, [pc, #120]	; (80048b8 <_free_r+0x94>)
 8004840:	9801      	ldr	r0, [sp, #4]
 8004842:	6813      	ldr	r3, [r2, #0]
 8004844:	b933      	cbnz	r3, 8004854 <_free_r+0x30>
 8004846:	6063      	str	r3, [r4, #4]
 8004848:	6014      	str	r4, [r2, #0]
 800484a:	b003      	add	sp, #12
 800484c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004850:	f000 b83a 	b.w	80048c8 <__malloc_unlock>
 8004854:	42a3      	cmp	r3, r4
 8004856:	d908      	bls.n	800486a <_free_r+0x46>
 8004858:	6825      	ldr	r5, [r4, #0]
 800485a:	1961      	adds	r1, r4, r5
 800485c:	428b      	cmp	r3, r1
 800485e:	bf01      	itttt	eq
 8004860:	6819      	ldreq	r1, [r3, #0]
 8004862:	685b      	ldreq	r3, [r3, #4]
 8004864:	1949      	addeq	r1, r1, r5
 8004866:	6021      	streq	r1, [r4, #0]
 8004868:	e7ed      	b.n	8004846 <_free_r+0x22>
 800486a:	461a      	mov	r2, r3
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	b10b      	cbz	r3, 8004874 <_free_r+0x50>
 8004870:	42a3      	cmp	r3, r4
 8004872:	d9fa      	bls.n	800486a <_free_r+0x46>
 8004874:	6811      	ldr	r1, [r2, #0]
 8004876:	1855      	adds	r5, r2, r1
 8004878:	42a5      	cmp	r5, r4
 800487a:	d10b      	bne.n	8004894 <_free_r+0x70>
 800487c:	6824      	ldr	r4, [r4, #0]
 800487e:	4421      	add	r1, r4
 8004880:	1854      	adds	r4, r2, r1
 8004882:	42a3      	cmp	r3, r4
 8004884:	6011      	str	r1, [r2, #0]
 8004886:	d1e0      	bne.n	800484a <_free_r+0x26>
 8004888:	681c      	ldr	r4, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	6053      	str	r3, [r2, #4]
 800488e:	4421      	add	r1, r4
 8004890:	6011      	str	r1, [r2, #0]
 8004892:	e7da      	b.n	800484a <_free_r+0x26>
 8004894:	d902      	bls.n	800489c <_free_r+0x78>
 8004896:	230c      	movs	r3, #12
 8004898:	6003      	str	r3, [r0, #0]
 800489a:	e7d6      	b.n	800484a <_free_r+0x26>
 800489c:	6825      	ldr	r5, [r4, #0]
 800489e:	1961      	adds	r1, r4, r5
 80048a0:	428b      	cmp	r3, r1
 80048a2:	bf04      	itt	eq
 80048a4:	6819      	ldreq	r1, [r3, #0]
 80048a6:	685b      	ldreq	r3, [r3, #4]
 80048a8:	6063      	str	r3, [r4, #4]
 80048aa:	bf04      	itt	eq
 80048ac:	1949      	addeq	r1, r1, r5
 80048ae:	6021      	streq	r1, [r4, #0]
 80048b0:	6054      	str	r4, [r2, #4]
 80048b2:	e7ca      	b.n	800484a <_free_r+0x26>
 80048b4:	b003      	add	sp, #12
 80048b6:	bd30      	pop	{r4, r5, pc}
 80048b8:	200001cc 	.word	0x200001cc

080048bc <__malloc_lock>:
 80048bc:	4801      	ldr	r0, [pc, #4]	; (80048c4 <__malloc_lock+0x8>)
 80048be:	f000 b809 	b.w	80048d4 <__retarget_lock_acquire_recursive>
 80048c2:	bf00      	nop
 80048c4:	200001d0 	.word	0x200001d0

080048c8 <__malloc_unlock>:
 80048c8:	4801      	ldr	r0, [pc, #4]	; (80048d0 <__malloc_unlock+0x8>)
 80048ca:	f000 b804 	b.w	80048d6 <__retarget_lock_release_recursive>
 80048ce:	bf00      	nop
 80048d0:	200001d0 	.word	0x200001d0

080048d4 <__retarget_lock_acquire_recursive>:
 80048d4:	4770      	bx	lr

080048d6 <__retarget_lock_release_recursive>:
 80048d6:	4770      	bx	lr

080048d8 <_init>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr

080048e4 <_fini>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	bf00      	nop
 80048e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ea:	bc08      	pop	{r3}
 80048ec:	469e      	mov	lr, r3
 80048ee:	4770      	bx	lr
