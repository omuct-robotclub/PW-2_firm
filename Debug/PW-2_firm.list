
PW-2_firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004670  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800484c  0800484c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800484c  0800484c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800484c  0800484c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000164  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001120a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000235b  00000000  00000000  000312aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00033608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d28  00000000  00000000  000343f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cd43  00000000  00000000  00035120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010beb  00000000  00000000  00051e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3ccc  00000000  00000000  00062a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010671a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ca4  00000000  00000000  0010676c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080047e0 	.word	0x080047e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080047e0 	.word	0x080047e0

080001c8 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>:
	}else{
		return read_retval::more_message_received;
	}
}

CAN_303x8::CAN_303x8(CAN_HandleTypeDef *hcan) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	4a08      	ldr	r2, [pc, #32]	; (80001f4 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef+0x2c>)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->hcan = hcan;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	683a      	ldr	r2, [r7, #0]
 80001dc:	605a      	str	r2, [r3, #4]
	HAL_CAN_Start(this->hcan);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	685b      	ldr	r3, [r3, #4]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 fea7 	bl	8000f36 <HAL_CAN_Start>
}
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4618      	mov	r0, r3
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	0800480c 	.word	0x0800480c

080001f8 <_ZN7stm_CAN9CAN_303x8D1Ev>:

CAN_303x8::~CAN_303x8() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	4a06      	ldr	r2, [pc, #24]	; (800021c <_ZN7stm_CAN9CAN_303x8D1Ev+0x24>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	HAL_CAN_Stop(this->hcan);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	4618      	mov	r0, r3
 800020c:	f000 fed7 	bl	8000fbe <HAL_CAN_Stop>
}
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4618      	mov	r0, r3
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	0800480c 	.word	0x0800480c

08000220 <_ZN7stm_CAN9CAN_303x8D0Ev>:
CAN_303x8::~CAN_303x8() {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
}
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ffe5 	bl	80001f8 <_ZN7stm_CAN9CAN_303x8D1Ev>
 800022e:	2194      	movs	r1, #148	; 0x94
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f004 fa42 	bl	80046ba <_ZdlPvj>
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4618      	mov	r0, r3
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <_ZN6ws28128NeoPixel19update_write_bufferEv>:

#include "NeoPixel.h"

namespace ws2812 {

void NeoPixel::update_write_buffer(){
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < pixel_num; i++){
 8000248:	2300      	movs	r3, #0
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	2b03      	cmp	r3, #3
 8000250:	d854      	bhi.n	80002fc <_ZN6ws28128NeoPixel19update_write_bufferEv+0xbc>
		for(uint8_t j = 0; j < color_num; j++){
 8000252:	2300      	movs	r3, #0
 8000254:	73bb      	strb	r3, [r7, #14]
 8000256:	7bbb      	ldrb	r3, [r7, #14]
 8000258:	2b02      	cmp	r3, #2
 800025a:	d84b      	bhi.n	80002f4 <_ZN6ws28128NeoPixel19update_write_bufferEv+0xb4>
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 800025c:	7bbb      	ldrb	r3, [r7, #14]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d108      	bne.n	8000274 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x34>
 8000262:	7bfa      	ldrb	r2, [r7, #15]
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	4613      	mov	r3, r2
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	4413      	add	r3, r2
 800026c:	440b      	add	r3, r1
 800026e:	3370      	adds	r3, #112	; 0x70
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	e018      	b.n	80002a6 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 8000274:	7bbb      	ldrb	r3, [r7, #14]
 8000276:	2b01      	cmp	r3, #1
 8000278:	d108      	bne.n	800028c <_ZN6ws28128NeoPixel19update_write_bufferEv+0x4c>
							: 	(j == 1) ? NeoPixel::colors[i].red
 800027a:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 800027c:	6879      	ldr	r1, [r7, #4]
 800027e:	4613      	mov	r3, r2
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	4413      	add	r3, r2
 8000284:	440b      	add	r3, r1
 8000286:	336f      	adds	r3, #111	; 0x6f
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	e00c      	b.n	80002a6 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 800028c:	7bbb      	ldrb	r3, [r7, #14]
 800028e:	2b02      	cmp	r3, #2
 8000290:	d108      	bne.n	80002a4 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x64>
							: 	(j == 2) ? NeoPixel::colors[i].blue : 0;
 8000292:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	4613      	mov	r3, r2
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	4413      	add	r3, r2
 800029c:	440b      	add	r3, r1
 800029e:	3371      	adds	r3, #113	; 0x71
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	e000      	b.n	80002a6 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 80002a4:	2300      	movs	r3, #0
 80002a6:	733b      	strb	r3, [r7, #12]
			for(uint8_t k = 0; k < byte; k++){
 80002a8:	2300      	movs	r3, #0
 80002aa:	737b      	strb	r3, [r7, #13]
 80002ac:	7b7b      	ldrb	r3, [r7, #13]
 80002ae:	2b07      	cmp	r3, #7
 80002b0:	d81c      	bhi.n	80002ec <_ZN6ws28128NeoPixel19update_write_bufferEv+0xac>
				NeoPixel::write_buffer[(i * color_num + j) * byte + k] = ((color & (0x80 >> k)) > 0) ? NeoPixel::high : NeoPixel::low;
 80002b2:	7b3a      	ldrb	r2, [r7, #12]
 80002b4:	7b7b      	ldrb	r3, [r7, #13]
 80002b6:	2180      	movs	r1, #128	; 0x80
 80002b8:	fa41 f303 	asr.w	r3, r1, r3
 80002bc:	4013      	ands	r3, r2
 80002be:	2b00      	cmp	r3, #0
 80002c0:	dd02      	ble.n	80002c8 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x88>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	7b1a      	ldrb	r2, [r3, #12]
 80002c6:	e001      	b.n	80002cc <_ZN6ws28128NeoPixel19update_write_bufferEv+0x8c>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7b5a      	ldrb	r2, [r3, #13]
 80002cc:	7bf9      	ldrb	r1, [r7, #15]
 80002ce:	460b      	mov	r3, r1
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	4419      	add	r1, r3
 80002d4:	7bbb      	ldrb	r3, [r7, #14]
 80002d6:	440b      	add	r3, r1
 80002d8:	00d9      	lsls	r1, r3, #3
 80002da:	7b7b      	ldrb	r3, [r7, #13]
 80002dc:	440b      	add	r3, r1
 80002de:	6879      	ldr	r1, [r7, #4]
 80002e0:	440b      	add	r3, r1
 80002e2:	739a      	strb	r2, [r3, #14]
			for(uint8_t k = 0; k < byte; k++){
 80002e4:	7b7b      	ldrb	r3, [r7, #13]
 80002e6:	3301      	adds	r3, #1
 80002e8:	737b      	strb	r3, [r7, #13]
 80002ea:	e7df      	b.n	80002ac <_ZN6ws28128NeoPixel19update_write_bufferEv+0x6c>
		for(uint8_t j = 0; j < color_num; j++){
 80002ec:	7bbb      	ldrb	r3, [r7, #14]
 80002ee:	3301      	adds	r3, #1
 80002f0:	73bb      	strb	r3, [r7, #14]
 80002f2:	e7b0      	b.n	8000256 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x16>
	for(uint8_t i = 0; i < pixel_num; i++){
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	3301      	adds	r3, #1
 80002f8:	73fb      	strb	r3, [r7, #15]
 80002fa:	e7a7      	b.n	800024c <_ZN6ws28128NeoPixel19update_write_bufferEv+0xc>
			}
		}
	}
	NeoPixel::write_buffer[data_len] = 0;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <_ZN6ws28128NeoPixel4rendEv>:

void NeoPixel::rend(){
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	update_write_buffer();
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f7ff ff91 	bl	8000240 <_ZN6ws28128NeoPixel19update_write_bufferEv>
	if(NeoPixel::hdma->State != HAL_DMA_STATE_READY) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000326:	2b01      	cmp	r3, #1
 8000328:	d007      	beq.n	800033a <_ZN6ws28128NeoPixel4rendEv+0x2a>
    	HAL_TIM_PWM_Stop_DMA(NeoPixel::htim, NeoPixel::Channel);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	4619      	mov	r1, r3
 8000334:	4610      	mov	r0, r2
 8000336:	f002 ffe7 	bl	8003308 <HAL_TIM_PWM_Stop_DMA>
//		 return;
  	}
	HAL_TIM_PWM_Start_DMA(NeoPixel::htim, NeoPixel::Channel, (uint32_t*)NeoPixel::write_buffer, data_len + reset_bit);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	6818      	ldr	r0, [r3, #0]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	6859      	ldr	r1, [r3, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f103 020e 	add.w	r2, r3, #14
 8000348:	2361      	movs	r3, #97	; 0x61
 800034a:	f002 fdd7 	bl	8002efc <HAL_TIM_PWM_Start_DMA>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>:

NeoPixel::NeoPixel(TIM_HandleTypeDef *htim, uint32_t Channel, DMA_HandleTypeDef *hdma, uint8_t high_level_pulse_len, uint8_t low_level_pulse_len) {
 8000356:	b480      	push	{r7}
 8000358:	b085      	sub	sp, #20
 800035a:	af00      	add	r7, sp, #0
 800035c:	60f8      	str	r0, [r7, #12]
 800035e:	60b9      	str	r1, [r7, #8]
 8000360:	607a      	str	r2, [r7, #4]
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	336f      	adds	r3, #111	; 0x6f
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
	// TODO Auto-generated constructor stub
	NeoPixel::htim = htim;
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	601a      	str	r2, [r3, #0]
	NeoPixel::Channel = Channel;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	605a      	str	r2, [r3, #4]
	NeoPixel::hdma = hdma;
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	609a      	str	r2, [r3, #8]
	NeoPixel::high = high_level_pulse_len;
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	7e3a      	ldrb	r2, [r7, #24]
 8000386:	731a      	strb	r2, [r3, #12]
	NeoPixel::low = low_level_pulse_len;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	7f3a      	ldrb	r2, [r7, #28]
 800038c:	735a      	strb	r2, [r3, #13]
}
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b590      	push	{r4, r7, lr}
 800039e:	b0cf      	sub	sp, #316	; 0x13c
 80003a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a2:	f000 fc43 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a6:	f000 f8fb 	bl	80005a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003aa:	f000 fa3f 	bl	800082c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();  MX_CAN_Init();
 80003ae:	f000 fa1f 	bl	80007f0 <_ZL11MX_DMA_Initv>
 80003b2:	f000 f945 	bl	8000640 <_ZL11MX_CAN_Initv>
  MX_TIM3_Init();
 80003b6:	f000 f97f 	bl	80006b8 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 80003ba:	f000 f9e5 	bl	8000788 <_ZL19MX_USART2_UART_Initv>
  MX_DMA_Init();
 80003be:	f000 fa17 	bl	80007f0 <_ZL11MX_DMA_Initv>
  /* USER CODE BEGIN 2 */
  stm_CAN::CAN_303x8 can(&hcan);
 80003c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80003c6:	496f      	ldr	r1, [pc, #444]	; (8000584 <main+0x1e8>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff fefd 	bl	80001c8 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>
  ws2812::NeoPixel pixels(&htim3, TIM_CHANNEL_4, &hdma_tim3_ch4_up, 45, 22);
 80003ce:	f107 0014 	add.w	r0, r7, #20
 80003d2:	2316      	movs	r3, #22
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	232d      	movs	r3, #45	; 0x2d
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	4b6b      	ldr	r3, [pc, #428]	; (8000588 <main+0x1ec>)
 80003dc:	220c      	movs	r2, #12
 80003de:	496b      	ldr	r1, [pc, #428]	; (800058c <main+0x1f0>)
 80003e0:	f7ff ffb9 	bl	8000356 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>

  const ws2812::color _orenge = {48, 24, 0};
 80003e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80003e8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80003ec:	4a68      	ldr	r2, [pc, #416]	; (8000590 <main+0x1f4>)
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4611      	mov	r1, r2
 80003f2:	8019      	strh	r1, [r3, #0]
 80003f4:	3302      	adds	r3, #2
 80003f6:	0c12      	lsrs	r2, r2, #16
 80003f8:	701a      	strb	r2, [r3, #0]
  const ws2812::color _blue = {0, 48, 128};
 80003fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80003fe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000402:	4a64      	ldr	r2, [pc, #400]	; (8000594 <main+0x1f8>)
 8000404:	6812      	ldr	r2, [r2, #0]
 8000406:	4611      	mov	r1, r2
 8000408:	8019      	strh	r1, [r3, #0]
 800040a:	3302      	adds	r3, #2
 800040c:	0c12      	lsrs	r2, r2, #16
 800040e:	701a      	strb	r2, [r3, #0]
  const ws2812::color _green = {0, 48, 0};
 8000410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000414:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000418:	2200      	movs	r2, #0
 800041a:	701a      	strb	r2, [r3, #0]
 800041c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000420:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000424:	2230      	movs	r2, #48	; 0x30
 8000426:	705a      	strb	r2, [r3, #1]
 8000428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800042c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000430:	2200      	movs	r2, #0
 8000432:	709a      	strb	r2, [r3, #2]
  const ws2812::color _purple = {24, 0, 72};
  const ws2812::color _white = {12, 16, 32};
 8000434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000438:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800043c:	4a56      	ldr	r2, [pc, #344]	; (8000598 <main+0x1fc>)
 800043e:	6812      	ldr	r2, [r2, #0]
 8000440:	4611      	mov	r1, r2
 8000442:	8019      	strh	r1, [r3, #0]
 8000444:	3302      	adds	r3, #2
 8000446:	0c12      	lsrs	r2, r2, #16
 8000448:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint8_t switches =
      HAL_GPIO_ReadPin(sw1_GPIO_Port, sw1_Pin) |
 800044a:	2110      	movs	r1, #16
 800044c:	4853      	ldr	r0, [pc, #332]	; (800059c <main+0x200>)
 800044e:	f001 fa57 	bl	8001900 <HAL_GPIO_ReadPin>
 8000452:	4603      	mov	r3, r0
 8000454:	b25c      	sxtb	r4, r3
      (HAL_GPIO_ReadPin(sw4_GPIO_Port, sw4_Pin) << 1) |
 8000456:	2180      	movs	r1, #128	; 0x80
 8000458:	4850      	ldr	r0, [pc, #320]	; (800059c <main+0x200>)
 800045a:	f001 fa51 	bl	8001900 <HAL_GPIO_ReadPin>
 800045e:	4603      	mov	r3, r0
 8000460:	005b      	lsls	r3, r3, #1
      HAL_GPIO_ReadPin(sw1_GPIO_Port, sw1_Pin) |
 8000462:	b25b      	sxtb	r3, r3
 8000464:	4323      	orrs	r3, r4
 8000466:	b25c      	sxtb	r4, r3
      (HAL_GPIO_ReadPin(sw3_GPIO_Port, sw3_Pin) << 2) |
 8000468:	2140      	movs	r1, #64	; 0x40
 800046a:	484c      	ldr	r0, [pc, #304]	; (800059c <main+0x200>)
 800046c:	f001 fa48 	bl	8001900 <HAL_GPIO_ReadPin>
 8000470:	4603      	mov	r3, r0
 8000472:	009b      	lsls	r3, r3, #2
      (HAL_GPIO_ReadPin(sw4_GPIO_Port, sw4_Pin) << 1) |
 8000474:	b25b      	sxtb	r3, r3
 8000476:	4323      	orrs	r3, r4
 8000478:	b25c      	sxtb	r4, r3
      (HAL_GPIO_ReadPin(sw2_GPIO_Port, sw2_Pin) << 3);
 800047a:	2120      	movs	r1, #32
 800047c:	4847      	ldr	r0, [pc, #284]	; (800059c <main+0x200>)
 800047e:	f001 fa3f 	bl	8001900 <HAL_GPIO_ReadPin>
 8000482:	4603      	mov	r3, r0
 8000484:	00db      	lsls	r3, r3, #3
      (HAL_GPIO_ReadPin(sw3_GPIO_Port, sw3_Pin) << 2) |
 8000486:	b25b      	sxtb	r3, r3
 8000488:	4323      	orrs	r3, r4
 800048a:	b25b      	sxtb	r3, r3
      (HAL_GPIO_ReadPin(sw2_GPIO_Port, sw2_Pin) << 3);
 800048c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    HAL_GPIO_WritePin(breaker_GPIO_Port, breaker_Pin, !switches ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000494:	2b00      	cmp	r3, #0
 8000496:	d101      	bne.n	800049c <main+0x100>
 8000498:	2301      	movs	r3, #1
 800049a:	e000      	b.n	800049e <main+0x102>
 800049c:	2300      	movs	r3, #0
 800049e:	461a      	mov	r2, r3
 80004a0:	2101      	movs	r1, #1
 80004a2:	483e      	ldr	r0, [pc, #248]	; (800059c <main+0x200>)
 80004a4:	f001 fa44 	bl	8001930 <HAL_GPIO_WritePin>

    if(!switches){
 80004a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d120      	bne.n	80004f2 <main+0x156>
      for(int i = 0; i < 45; i++){
 80004b0:	2300      	movs	r3, #0
 80004b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80004b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80004ba:	2b2c      	cmp	r3, #44	; 0x2c
 80004bc:	dc59      	bgt.n	8000572 <main+0x1d6>
        pixels.colors[i] = _blue;
 80004be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80004c2:	f5a3 718e 	sub.w	r1, r3, #284	; 0x11c
 80004c6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80004ca:	4613      	mov	r3, r2
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	4413      	add	r3, r2
 80004d0:	440b      	add	r3, r1
 80004d2:	3368      	adds	r3, #104	; 0x68
 80004d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80004d8:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 80004dc:	3307      	adds	r3, #7
 80004de:	8811      	ldrh	r1, [r2, #0]
 80004e0:	7892      	ldrb	r2, [r2, #2]
 80004e2:	8019      	strh	r1, [r3, #0]
 80004e4:	709a      	strb	r2, [r3, #2]
      for(int i = 0; i < 45; i++){
 80004e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80004ea:	3301      	adds	r3, #1
 80004ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80004f0:	e7e1      	b.n	80004b6 <main+0x11a>
      }
    }else{
      for(int i = 0; i < 4; i++){
 80004f2:	2300      	movs	r3, #0
 80004f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80004f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	dc38      	bgt.n	8000572 <main+0x1d6>
        if(switches & (1 << i)){
 8000500:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8000504:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000508:	fa42 f303 	asr.w	r3, r2, r3
 800050c:	f003 0301 	and.w	r3, r3, #1
 8000510:	2b00      	cmp	r3, #0
 8000512:	d014      	beq.n	800053e <main+0x1a2>
          pixels.colors[i] = _orenge;
 8000514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000518:	f5a3 718e 	sub.w	r1, r3, #284	; 0x11c
 800051c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000520:	4613      	mov	r3, r2
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	4413      	add	r3, r2
 8000526:	440b      	add	r3, r1
 8000528:	3368      	adds	r3, #104	; 0x68
 800052a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800052e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8000532:	3307      	adds	r3, #7
 8000534:	8811      	ldrh	r1, [r2, #0]
 8000536:	7892      	ldrb	r2, [r2, #2]
 8000538:	8019      	strh	r1, [r3, #0]
 800053a:	709a      	strb	r2, [r3, #2]
 800053c:	e013      	b.n	8000566 <main+0x1ca>
        }else{
          pixels.colors[i] = _white;
 800053e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000542:	f5a3 718e 	sub.w	r1, r3, #284	; 0x11c
 8000546:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800054a:	4613      	mov	r3, r2
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	4413      	add	r3, r2
 8000550:	440b      	add	r3, r1
 8000552:	3368      	adds	r3, #104	; 0x68
 8000554:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8000558:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800055c:	3307      	adds	r3, #7
 800055e:	8811      	ldrh	r1, [r2, #0]
 8000560:	7892      	ldrb	r2, [r2, #2]
 8000562:	8019      	strh	r1, [r3, #0]
 8000564:	709a      	strb	r2, [r3, #2]
      for(int i = 0; i < 4; i++){
 8000566:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800056a:	3301      	adds	r3, #1
 800056c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000570:	e7c2      	b.n	80004f8 <main+0x15c>
        }
      }
    }
    pixels.rend();
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff feca 	bl	8000310 <_ZN6ws28128NeoPixel4rendEv>

    HAL_Delay(1);
 800057c:	2001      	movs	r0, #1
 800057e:	f000 fbbb 	bl	8000cf8 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000582:	e762      	b.n	800044a <main+0xae>
 8000584:	2000008c 	.word	0x2000008c
 8000588:	20000100 	.word	0x20000100
 800058c:	200000b4 	.word	0x200000b4
 8000590:	080047f8 	.word	0x080047f8
 8000594:	080047fc 	.word	0x080047fc
 8000598:	08004800 	.word	0x08004800
 800059c:	48000400 	.word	0x48000400

080005a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b090      	sub	sp, #64	; 0x40
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	2228      	movs	r2, #40	; 0x28
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 f8b4 	bl	800471c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0318 	add.w	r3, r7, #24
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 f9b9 	bl	8001960 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf14      	ite	ne
 80005f4:	2301      	movne	r3, #1
 80005f6:	2300      	moveq	r3, #0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80005fe:	f000 f96b 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2102      	movs	r1, #2
 800061c:	4618      	mov	r0, r3
 800061e:	f002 f9dd 	bl	80029dc <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	bf14      	ite	ne
 8000628:	2301      	movne	r3, #1
 800062a:	2300      	moveq	r3, #0
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8000632:	f000 f951 	bl	80008d8 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3740      	adds	r7, #64	; 0x40
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <_ZL11MX_CAN_Initv+0x70>)
 8000646:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <_ZL11MX_CAN_Initv+0x74>)
 8000648:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <_ZL11MX_CAN_Initv+0x70>)
 800064c:	2202      	movs	r2, #2
 800064e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <_ZL11MX_CAN_Initv+0x70>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <_ZL11MX_CAN_Initv+0x70>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <_ZL11MX_CAN_Initv+0x70>)
 800065e:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000662:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <_ZL11MX_CAN_Initv+0x70>)
 8000666:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800066a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <_ZL11MX_CAN_Initv+0x70>)
 800066e:	2200      	movs	r2, #0
 8000670:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <_ZL11MX_CAN_Initv+0x70>)
 8000674:	2200      	movs	r2, #0
 8000676:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <_ZL11MX_CAN_Initv+0x70>)
 800067a:	2200      	movs	r2, #0
 800067c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <_ZL11MX_CAN_Initv+0x70>)
 8000680:	2200      	movs	r2, #0
 8000682:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <_ZL11MX_CAN_Initv+0x70>)
 8000686:	2200      	movs	r2, #0
 8000688:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <_ZL11MX_CAN_Initv+0x70>)
 800068c:	2200      	movs	r2, #0
 800068e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000690:	4807      	ldr	r0, [pc, #28]	; (80006b0 <_ZL11MX_CAN_Initv+0x70>)
 8000692:	f000 fb55 	bl	8000d40 <HAL_CAN_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	bf14      	ite	ne
 800069c:	2301      	movne	r3, #1
 800069e:	2300      	moveq	r3, #0
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 80006a6:	f000 f917 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000008c 	.word	0x2000008c
 80006b4:	40006400 	.word	0x40006400

080006b8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ca:	463b      	mov	r3, r7
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]
 80006da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <_ZL12MX_TIM3_Initv+0xc8>)
 80006de:	4a29      	ldr	r2, [pc, #164]	; (8000784 <_ZL12MX_TIM3_Initv+0xcc>)
 80006e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006e2:	4b27      	ldr	r3, [pc, #156]	; (8000780 <_ZL12MX_TIM3_Initv+0xc8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <_ZL12MX_TIM3_Initv+0xc8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <_ZL12MX_TIM3_Initv+0xc8>)
 80006f0:	2259      	movs	r2, #89	; 0x59
 80006f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <_ZL12MX_TIM3_Initv+0xc8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <_ZL12MX_TIM3_Initv+0xc8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000700:	481f      	ldr	r0, [pc, #124]	; (8000780 <_ZL12MX_TIM3_Initv+0xc8>)
 8000702:	f002 fba3 	bl	8002e4c <HAL_TIM_PWM_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf14      	ite	ne
 800070c:	2301      	movne	r3, #1
 800070e:	2300      	moveq	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8000716:	f000 f8df 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4815      	ldr	r0, [pc, #84]	; (8000780 <_ZL12MX_TIM3_Initv+0xc8>)
 800072a:	f003 fc25 	bl	8003f78 <HAL_TIMEx_MasterConfigSynchronization>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	bf14      	ite	ne
 8000734:	2301      	movne	r3, #1
 8000736:	2300      	moveq	r3, #0
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 800073e:	f000 f8cb 	bl	80008d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000742:	2360      	movs	r3, #96	; 0x60
 8000744:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	220c      	movs	r2, #12
 8000756:	4619      	mov	r1, r3
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <_ZL12MX_TIM3_Initv+0xc8>)
 800075a:	f002 fec5 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	bf14      	ite	ne
 8000764:	2301      	movne	r3, #1
 8000766:	2300      	moveq	r3, #0
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800076e:	f000 f8b3 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000772:	4803      	ldr	r0, [pc, #12]	; (8000780 <_ZL12MX_TIM3_Initv+0xc8>)
 8000774:	f000 f96e 	bl	8000a54 <HAL_TIM_MspPostInit>

}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	; 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000b4 	.word	0x200000b4
 8000784:	40000400 	.word	0x40000400

08000788 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <_ZL19MX_USART2_UART_Initv+0x64>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000794:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4807      	ldr	r0, [pc, #28]	; (80007e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007cc:	f003 fc42 	bl	8004054 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bf14      	ite	ne
 80007d6:	2301      	movne	r3, #1
 80007d8:	2300      	moveq	r3, #0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80007e0:	f000 f87a 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000144 	.word	0x20000144
 80007ec:	40004400 	.word	0x40004400

080007f0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <_ZL11MX_DMA_Initv+0x38>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <_ZL11MX_DMA_Initv+0x38>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <_ZL11MX_DMA_Initv+0x38>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	200d      	movs	r0, #13
 8000814:	f000 fcf7 	bl	8001206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000818:	200d      	movs	r0, #13
 800081a:	f000 fd10 	bl	800123e <HAL_NVIC_EnableIRQ>

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000842:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <_ZL12MX_GPIO_Initv+0xa4>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	4a22      	ldr	r2, [pc, #136]	; (80008d0 <_ZL12MX_GPIO_Initv+0xa4>)
 8000848:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800084c:	6153      	str	r3, [r2, #20]
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <_ZL12MX_GPIO_Initv+0xa4>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <_ZL12MX_GPIO_Initv+0xa4>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <_ZL12MX_GPIO_Initv+0xa4>)
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	6153      	str	r3, [r2, #20]
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <_ZL12MX_GPIO_Initv+0xa4>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <_ZL12MX_GPIO_Initv+0xa4>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <_ZL12MX_GPIO_Initv+0xa4>)
 8000878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800087c:	6153      	str	r3, [r2, #20]
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <_ZL12MX_GPIO_Initv+0xa4>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(breaker_GPIO_Port, breaker_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2101      	movs	r1, #1
 800088e:	4811      	ldr	r0, [pc, #68]	; (80008d4 <_ZL12MX_GPIO_Initv+0xa8>)
 8000890:	f001 f84e 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : breaker_Pin */
  GPIO_InitStruct.Pin = breaker_Pin;
 8000894:	2301      	movs	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(breaker_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	480a      	ldr	r0, [pc, #40]	; (80008d4 <_ZL12MX_GPIO_Initv+0xa8>)
 80008ac:	f000 feb6 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pins : sw1_Pin sw2_Pin sw3_Pin sw4_Pin */
  GPIO_InitStruct.Pin = sw1_Pin|sw2_Pin|sw3_Pin|sw4_Pin;
 80008b0:	23f0      	movs	r3, #240	; 0xf0
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	4619      	mov	r1, r3
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <_ZL12MX_GPIO_Initv+0xa8>)
 80008c4:	f000 feaa 	bl	800161c <HAL_GPIO_Init>

}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000400 	.word	0x48000400

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x44>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x44>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x44>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x44>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x44>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x44>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a18      	ldr	r2, [pc, #96]	; (80009ac <HAL_CAN_MspInit+0x80>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d129      	bne.n	80009a2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <HAL_CAN_MspInit+0x84>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <HAL_CAN_MspInit+0x84>)
 8000954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000958:	61d3      	str	r3, [r2, #28]
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_CAN_MspInit+0x84>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_CAN_MspInit+0x84>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <HAL_CAN_MspInit+0x84>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_CAN_MspInit+0x84>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800097e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000990:	2309      	movs	r3, #9
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f000 fe3d 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40006400 	.word	0x40006400
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <HAL_TIM_PWM_MspInit+0x90>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d139      	bne.n	8000a3a <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <HAL_TIM_PWM_MspInit+0x94>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a1f      	ldr	r2, [pc, #124]	; (8000a48 <HAL_TIM_PWM_MspInit+0x94>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <HAL_TIM_PWM_MspInit+0x94>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_TIM_PWM_MspInit+0x98>)
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <HAL_TIM_PWM_MspInit+0x9c>)
 80009e2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <HAL_TIM_PWM_MspInit+0x98>)
 80009e6:	2210      	movs	r2, #16
 80009e8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_TIM_PWM_MspInit+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <HAL_TIM_PWM_MspInit+0x98>)
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_TIM_PWM_MspInit+0x98>)
 80009f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009fc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <HAL_TIM_PWM_MspInit+0x98>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_TIM_PWM_MspInit+0x98>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <HAL_TIM_PWM_MspInit+0x98>)
 8000a0c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000a10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000a12:	480e      	ldr	r0, [pc, #56]	; (8000a4c <HAL_TIM_PWM_MspInit+0x98>)
 8000a14:	f000 fc2d 	bl	8001272 <HAL_DMA_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8000a1e:	f7ff ff5b 	bl	80008d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a09      	ldr	r2, [pc, #36]	; (8000a4c <HAL_TIM_PWM_MspInit+0x98>)
 8000a26:	631a      	str	r2, [r3, #48]	; 0x30
 8000a28:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_TIM_PWM_MspInit+0x98>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_TIM_PWM_MspInit+0x98>)
 8000a32:	621a      	str	r2, [r3, #32]
 8000a34:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <HAL_TIM_PWM_MspInit+0x98>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40000400 	.word	0x40000400
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	20000100 	.word	0x20000100
 8000a50:	40020030 	.word	0x40020030

08000a54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <HAL_TIM_MspPostInit+0x64>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d11b      	bne.n	8000aae <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_TIM_MspPostInit+0x68>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	4a10      	ldr	r2, [pc, #64]	; (8000abc <HAL_TIM_MspPostInit+0x68>)
 8000a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a80:	6153      	str	r3, [r2, #20]
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_TIM_MspPostInit+0x68>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <HAL_TIM_MspPostInit+0x6c>)
 8000aaa:	f000 fdb7 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40000400 	.word	0x40000400
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000400 	.word	0x48000400

08000ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a18      	ldr	r2, [pc, #96]	; (8000b44 <HAL_UART_MspInit+0x80>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d129      	bne.n	8000b3a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_UART_MspInit+0x84>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <HAL_UART_MspInit+0x84>)
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	61d3      	str	r3, [r2, #28]
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_UART_MspInit+0x84>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_UART_MspInit+0x84>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <HAL_UART_MspInit+0x84>)
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	6153      	str	r3, [r2, #20]
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_UART_MspInit+0x84>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000b16:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b36:	f000 fd71 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40021000 	.word	0x40021000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 f88e 	bl	8000cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <DMA1_Channel3_IRQHandler+0x10>)
 8000ba6:	f000 fc48 	bl	800143a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000100 	.word	0x20000100

08000bb4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bde:	490e      	ldr	r1, [pc, #56]	; (8000c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be0:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <LoopForever+0xe>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf4:	4c0b      	ldr	r4, [pc, #44]	; (8000c24 <LoopForever+0x16>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c02:	f7ff ffd7 	bl	8000bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c06:	f003 fd5d 	bl	80046c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0a:	f7ff fbc7 	bl	800039c <main>

08000c0e <LoopForever>:

LoopForever:
    b LoopForever
 8000c0e:	e7fe      	b.n	8000c0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c10:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c1c:	08004854 	.word	0x08004854
  ldr r2, =_sbss
 8000c20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c24:	200001d4 	.word	0x200001d4

08000c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC1_2_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_Init+0x28>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_Init+0x28>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 fad7 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c42:	200f      	movs	r0, #15
 8000c44:	f000 f808 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c48:	f7ff fe4c 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40022000 	.word	0x40022000

08000c58 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x54>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0x58>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 faef 	bl	800125a <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00e      	b.n	8000ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d80a      	bhi.n	8000ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f000 fab7 	bl	8001206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <HAL_InitTick+0x5c>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e000      	b.n	8000ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	200001c8 	.word	0x200001c8

08000ce0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200001c8 	.word	0x200001c8

08000cf8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff ffee 	bl	8000ce0 <HAL_GetTick>
 8000d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d10:	d005      	beq.n	8000d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_Delay+0x44>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d1e:	bf00      	nop
 8000d20:	f7ff ffde 	bl	8000ce0 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d8f7      	bhi.n	8000d20 <HAL_Delay+0x28>
  {
  }
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008

08000d40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e0ed      	b.n	8000f2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fde4 	bl	800092c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0201 	orr.w	r2, r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d74:	f7ff ffb4 	bl	8000ce0 <HAL_GetTick>
 8000d78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d7a:	e012      	b.n	8000da2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d7c:	f7ff ffb0 	bl	8000ce0 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b0a      	cmp	r3, #10
 8000d88:	d90b      	bls.n	8000da2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2205      	movs	r2, #5
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e0c5      	b.n	8000f2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0e5      	beq.n	8000d7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0202 	bic.w	r2, r2, #2
 8000dbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dc0:	f7ff ff8e 	bl	8000ce0 <HAL_GetTick>
 8000dc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dc6:	e012      	b.n	8000dee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dc8:	f7ff ff8a 	bl	8000ce0 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b0a      	cmp	r3, #10
 8000dd4:	d90b      	bls.n	8000dee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2205      	movs	r2, #5
 8000de6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e09f      	b.n	8000f2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e5      	bne.n	8000dc8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7e1b      	ldrb	r3, [r3, #24]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d108      	bne.n	8000e16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e007      	b.n	8000e26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7e5b      	ldrb	r3, [r3, #25]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d108      	bne.n	8000e40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e007      	b.n	8000e50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7e9b      	ldrb	r3, [r3, #26]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d108      	bne.n	8000e6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0220 	orr.w	r2, r2, #32
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e007      	b.n	8000e7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0220 	bic.w	r2, r2, #32
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7edb      	ldrb	r3, [r3, #27]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d108      	bne.n	8000e94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0210 	bic.w	r2, r2, #16
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e007      	b.n	8000ea4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0210 	orr.w	r2, r2, #16
 8000ea2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7f1b      	ldrb	r3, [r3, #28]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d108      	bne.n	8000ebe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0208 	orr.w	r2, r2, #8
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	e007      	b.n	8000ece <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0208 	bic.w	r2, r2, #8
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7f5b      	ldrb	r3, [r3, #29]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d108      	bne.n	8000ee8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f042 0204 	orr.w	r2, r2, #4
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	e007      	b.n	8000ef8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0204 	bic.w	r2, r2, #4
 8000ef6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	ea42 0103 	orr.w	r1, r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	1e5a      	subs	r2, r3, #1
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d12e      	bne.n	8000fa8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0201 	bic.w	r2, r2, #1
 8000f60:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f62:	f7ff febd 	bl	8000ce0 <HAL_GetTick>
 8000f66:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f68:	e012      	b.n	8000f90 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f6a:	f7ff feb9 	bl	8000ce0 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b0a      	cmp	r3, #10
 8000f76:	d90b      	bls.n	8000f90 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2205      	movs	r2, #5
 8000f88:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e012      	b.n	8000fb6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1e5      	bne.n	8000f6a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e006      	b.n	8000fb6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
  }
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d133      	bne.n	800103a <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f042 0201 	orr.w	r2, r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fe2:	f7ff fe7d 	bl	8000ce0 <HAL_GetTick>
 8000fe6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fe8:	e012      	b.n	8001010 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fea:	f7ff fe79 	bl	8000ce0 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b0a      	cmp	r3, #10
 8000ff6:	d90b      	bls.n	8001010 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2205      	movs	r2, #5
 8001008:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e01b      	b.n	8001048 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0e5      	beq.n	8000fea <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 0202 	bic.w	r2, r2, #2
 800102c:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e006      	b.n	8001048 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
  }
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff29 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff3e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff8e 	bl	8001144 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff31 	bl	80010b4 <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffa2 	bl	80011ac <SysTick_Config>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e037      	b.n	80012f8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2202      	movs	r2, #2
 800128c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800129e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f97e 	bl	80015dc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}  
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <HAL_DMA_Start_IT+0x20>
 800131c:	2302      	movs	r3, #2
 800131e:	e04a      	b.n	80013b6 <HAL_DMA_Start_IT+0xb6>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800132e:	2b01      	cmp	r3, #1
 8001330:	d13a      	bne.n	80013a8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2202      	movs	r2, #2
 8001336:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0201 	bic.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 f912 	bl	8001580 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 020e 	orr.w	r2, r2, #14
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e00f      	b.n	8001396 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f042 020a 	orr.w	r2, r2, #10
 8001384:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0204 	bic.w	r2, r2, #4
 8001394:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0201 	orr.w	r2, r2, #1
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	e005      	b.n	80013b4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80013b0:	2302      	movs	r3, #2
 80013b2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013be:	b580      	push	{r7, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d005      	beq.n	80013e0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2204      	movs	r2, #4
 80013d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e027      	b.n	8001430 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 020e 	bic.w	r2, r2, #14
 80013ee:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0201 	bic.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001408:	2101      	movs	r1, #1
 800140a:	fa01 f202 	lsl.w	r2, r1, r2
 800140e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	4798      	blx	r3
    } 
  }
  return status;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b084      	sub	sp, #16
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	2204      	movs	r2, #4
 8001458:	409a      	lsls	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d024      	beq.n	80014ac <HAL_DMA_IRQHandler+0x72>
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d01f      	beq.n	80014ac <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0320 	and.w	r3, r3, #32
 8001476:	2b00      	cmp	r3, #0
 8001478:	d107      	bne.n	800148a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0204 	bic.w	r2, r2, #4
 8001488:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001492:	2104      	movs	r1, #4
 8001494:	fa01 f202 	lsl.w	r2, r1, r2
 8001498:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d06a      	beq.n	8001578 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80014aa:	e065      	b.n	8001578 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	2202      	movs	r2, #2
 80014b2:	409a      	lsls	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d02c      	beq.n	8001516 <HAL_DMA_IRQHandler+0xdc>
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d027      	beq.n	8001516 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10b      	bne.n	80014ec <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 020a 	bic.w	r2, r2, #10
 80014e2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f4:	2102      	movs	r1, #2
 80014f6:	fa01 f202 	lsl.w	r2, r1, r2
 80014fa:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	2b00      	cmp	r3, #0
 800150a:	d035      	beq.n	8001578 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001514:	e030      	b.n	8001578 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	2208      	movs	r2, #8
 800151c:	409a      	lsls	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4013      	ands	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d028      	beq.n	8001578 <HAL_DMA_IRQHandler+0x13e>
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d023      	beq.n	8001578 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 020e 	bic.w	r2, r2, #14
 800153e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001548:	2101      	movs	r1, #1
 800154a:	fa01 f202 	lsl.w	r2, r1, r2
 800154e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4798      	blx	r3
    }
  }
}  
 8001576:	e7ff      	b.n	8001578 <HAL_DMA_IRQHandler+0x13e>
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f202 	lsl.w	r2, r1, r2
 800159c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d108      	bne.n	80015c0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015be:	e007      	b.n	80015d0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	60da      	str	r2, [r3, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <DMA_CalcBaseAndBitshift+0x34>)
 80015ec:	4413      	add	r3, r2
 80015ee:	4a09      	ldr	r2, [pc, #36]	; (8001614 <DMA_CalcBaseAndBitshift+0x38>)
 80015f0:	fba2 2303 	umull	r2, r3, r2, r3
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	009a      	lsls	r2, r3, #2
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a06      	ldr	r2, [pc, #24]	; (8001618 <DMA_CalcBaseAndBitshift+0x3c>)
 8001600:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	bffdfff8 	.word	0xbffdfff8
 8001614:	cccccccd 	.word	0xcccccccd
 8001618:	40020000 	.word	0x40020000

0800161c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162a:	e14e      	b.n	80018ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2101      	movs	r1, #1
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	4013      	ands	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8140 	beq.w	80018c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b01      	cmp	r3, #1
 800164e:	d005      	beq.n	800165c <HAL_GPIO_Init+0x40>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d130      	bne.n	80016be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001692:	2201      	movs	r2, #1
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	f003 0201 	and.w	r2, r3, #1
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d017      	beq.n	80016fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d123      	bne.n	800174e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	08da      	lsrs	r2, r3, #3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3208      	adds	r2, #8
 800170e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	220f      	movs	r2, #15
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	691a      	ldr	r2, [r3, #16]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	08da      	lsrs	r2, r3, #3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3208      	adds	r2, #8
 8001748:	6939      	ldr	r1, [r7, #16]
 800174a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0203 	and.w	r2, r3, #3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 809a 	beq.w	80018c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001790:	4b55      	ldr	r3, [pc, #340]	; (80018e8 <HAL_GPIO_Init+0x2cc>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a54      	ldr	r2, [pc, #336]	; (80018e8 <HAL_GPIO_Init+0x2cc>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b52      	ldr	r3, [pc, #328]	; (80018e8 <HAL_GPIO_Init+0x2cc>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017a8:	4a50      	ldr	r2, [pc, #320]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	3302      	adds	r3, #2
 80017b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	220f      	movs	r2, #15
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017d2:	d013      	beq.n	80017fc <HAL_GPIO_Init+0x1e0>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a46      	ldr	r2, [pc, #280]	; (80018f0 <HAL_GPIO_Init+0x2d4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d00d      	beq.n	80017f8 <HAL_GPIO_Init+0x1dc>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a45      	ldr	r2, [pc, #276]	; (80018f4 <HAL_GPIO_Init+0x2d8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d007      	beq.n	80017f4 <HAL_GPIO_Init+0x1d8>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a44      	ldr	r2, [pc, #272]	; (80018f8 <HAL_GPIO_Init+0x2dc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d101      	bne.n	80017f0 <HAL_GPIO_Init+0x1d4>
 80017ec:	2303      	movs	r3, #3
 80017ee:	e006      	b.n	80017fe <HAL_GPIO_Init+0x1e2>
 80017f0:	2305      	movs	r3, #5
 80017f2:	e004      	b.n	80017fe <HAL_GPIO_Init+0x1e2>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e002      	b.n	80017fe <HAL_GPIO_Init+0x1e2>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <HAL_GPIO_Init+0x1e2>
 80017fc:	2300      	movs	r3, #0
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	f002 0203 	and.w	r2, r2, #3
 8001804:	0092      	lsls	r2, r2, #2
 8001806:	4093      	lsls	r3, r2
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800180e:	4937      	ldr	r1, [pc, #220]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	3302      	adds	r3, #2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181c:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_GPIO_Init+0x2e0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001840:	4a2e      	ldr	r2, [pc, #184]	; (80018fc <HAL_GPIO_Init+0x2e0>)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001846:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_GPIO_Init+0x2e0>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800186a:	4a24      	ldr	r2, [pc, #144]	; (80018fc <HAL_GPIO_Init+0x2e0>)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_GPIO_Init+0x2e0>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001894:	4a19      	ldr	r2, [pc, #100]	; (80018fc <HAL_GPIO_Init+0x2e0>)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_GPIO_Init+0x2e0>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018be:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <HAL_GPIO_Init+0x2e0>)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3301      	adds	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f47f aea9 	bne.w	800162c <HAL_GPIO_Init+0x10>
  }
}
 80018da:	bf00      	nop
 80018dc:	bf00      	nop
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000
 80018f0:	48000400 	.word	0x48000400
 80018f4:	48000800 	.word	0x48000800
 80018f8:	48000c00 	.word	0x48000c00
 80018fc:	40010400 	.word	0x40010400

08001900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e001      	b.n	8001922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
 800193c:	4613      	mov	r3, r2
 800193e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001940:	787b      	ldrb	r3, [r7, #1]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001946:	887a      	ldrh	r2, [r7, #2]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800194c:	e002      	b.n	8001954 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001966:	af00      	add	r7, sp, #0
 8001968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001970:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	f001 b823 	b.w	80029cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 817d 	beq.w	8001c96 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800199c:	4bbc      	ldr	r3, [pc, #752]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d00c      	beq.n	80019c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019a8:	4bb9      	ldr	r3, [pc, #740]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d15c      	bne.n	8001a6e <HAL_RCC_OscConfig+0x10e>
 80019b4:	4bb6      	ldr	r3, [pc, #728]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c0:	d155      	bne.n	8001a6e <HAL_RCC_OscConfig+0x10e>
 80019c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	095b      	lsrs	r3, r3, #5
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d102      	bne.n	80019f4 <HAL_RCC_OscConfig+0x94>
 80019ee:	4ba8      	ldr	r3, [pc, #672]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	e015      	b.n	8001a20 <HAL_RCC_OscConfig+0xc0>
 80019f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a10:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a1c:	4b9c      	ldr	r3, [pc, #624]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a24:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a28:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a2c:	fa92 f2a2 	rbit	r2, r2
 8001a30:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a34:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a38:	fab2 f282 	clz	r2, r2
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f042 0220 	orr.w	r2, r2, #32
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f002 021f 	and.w	r2, r2, #31
 8001a48:	2101      	movs	r1, #1
 8001a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 811f 	beq.w	8001c94 <HAL_RCC_OscConfig+0x334>
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f040 8116 	bne.w	8001c94 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f000 bfaf 	b.w	80029cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x12e>
 8001a80:	4b83      	ldr	r3, [pc, #524]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a82      	ldr	r2, [pc, #520]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e036      	b.n	8001afc <HAL_RCC_OscConfig+0x19c>
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x158>
 8001a9e:	4b7c      	ldr	r3, [pc, #496]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a7b      	ldr	r2, [pc, #492]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b79      	ldr	r3, [pc, #484]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a78      	ldr	r2, [pc, #480]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e021      	b.n	8001afc <HAL_RCC_OscConfig+0x19c>
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x184>
 8001aca:	4b71      	ldr	r3, [pc, #452]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a70      	ldr	r2, [pc, #448]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b6e      	ldr	r3, [pc, #440]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a6d      	ldr	r2, [pc, #436]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e00b      	b.n	8001afc <HAL_RCC_OscConfig+0x19c>
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a69      	ldr	r2, [pc, #420]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a66      	ldr	r2, [pc, #408]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001afc:	4b64      	ldr	r3, [pc, #400]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	f023 020f 	bic.w	r2, r3, #15
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	495f      	ldr	r1, [pc, #380]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d059      	beq.n	8001bda <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b26:	f7ff f8db 	bl	8000ce0 <HAL_GetTick>
 8001b2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff f8d6 	bl	8000ce0 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b64      	cmp	r3, #100	; 0x64
 8001b3e:	d902      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	f000 bf43 	b.w	80029cc <HAL_RCC_OscConfig+0x106c>
 8001b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b4a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b5a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	095b      	lsrs	r3, r3, #5
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d102      	bne.n	8001b78 <HAL_RCC_OscConfig+0x218>
 8001b72:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	e015      	b.n	8001ba4 <HAL_RCC_OscConfig+0x244>
 8001b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b7c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b90:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b94:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ba0:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ba8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001bac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001bb0:	fa92 f2a2 	rbit	r2, r2
 8001bb4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001bb8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001bbc:	fab2 f282 	clz	r2, r2
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	f042 0220 	orr.w	r2, r2, #32
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	f002 021f 	and.w	r2, r2, #31
 8001bcc:	2101      	movs	r1, #1
 8001bce:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0ab      	beq.n	8001b30 <HAL_RCC_OscConfig+0x1d0>
 8001bd8:	e05d      	b.n	8001c96 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bda:	f7ff f881 	bl	8000ce0 <HAL_GetTick>
 8001bde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff f87c 	bl	8000ce0 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b64      	cmp	r3, #100	; 0x64
 8001bf2:	d902      	bls.n	8001bfa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	f000 bee9 	b.w	80029cc <HAL_RCC_OscConfig+0x106c>
 8001bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	095b      	lsrs	r3, r3, #5
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d102      	bne.n	8001c2c <HAL_RCC_OscConfig+0x2cc>
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	e015      	b.n	8001c58 <HAL_RCC_OscConfig+0x2f8>
 8001c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c30:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c44:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c48:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c5c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c60:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c64:	fa92 f2a2 	rbit	r2, r2
 8001c68:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c6c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c70:	fab2 f282 	clz	r2, r2
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f042 0220 	orr.w	r2, r2, #32
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	f002 021f 	and.w	r2, r2, #31
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f202 	lsl.w	r2, r1, r2
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1ab      	bne.n	8001be4 <HAL_RCC_OscConfig+0x284>
 8001c8c:	e003      	b.n	8001c96 <HAL_RCC_OscConfig+0x336>
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 817d 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cac:	4ba6      	ldr	r3, [pc, #664]	; (8001f48 <HAL_RCC_OscConfig+0x5e8>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00b      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cb8:	4ba3      	ldr	r3, [pc, #652]	; (8001f48 <HAL_RCC_OscConfig+0x5e8>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d172      	bne.n	8001daa <HAL_RCC_OscConfig+0x44a>
 8001cc4:	4ba0      	ldr	r3, [pc, #640]	; (8001f48 <HAL_RCC_OscConfig+0x5e8>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d16c      	bne.n	8001daa <HAL_RCC_OscConfig+0x44a>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001ce2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d102      	bne.n	8001d00 <HAL_RCC_OscConfig+0x3a0>
 8001cfa:	4b93      	ldr	r3, [pc, #588]	; (8001f48 <HAL_RCC_OscConfig+0x5e8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	e013      	b.n	8001d28 <HAL_RCC_OscConfig+0x3c8>
 8001d00:	2302      	movs	r3, #2
 8001d02:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d12:	2302      	movs	r3, #2
 8001d14:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d24:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <HAL_RCC_OscConfig+0x5e8>)
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	2202      	movs	r2, #2
 8001d2a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d2e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d32:	fa92 f2a2 	rbit	r2, r2
 8001d36:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d3a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d3e:	fab2 f282 	clz	r2, r2
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	f042 0220 	orr.w	r2, r2, #32
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	f002 021f 	and.w	r2, r2, #31
 8001d4e:	2101      	movs	r1, #1
 8001d50:	fa01 f202 	lsl.w	r2, r1, r2
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_RCC_OscConfig+0x410>
 8001d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d002      	beq.n	8001d70 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f000 be2e 	b.w	80029cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d70:	4b75      	ldr	r3, [pc, #468]	; (8001f48 <HAL_RCC_OscConfig+0x5e8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	21f8      	movs	r1, #248	; 0xf8
 8001d86:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d8e:	fa91 f1a1 	rbit	r1, r1
 8001d92:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001d96:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001d9a:	fab1 f181 	clz	r1, r1
 8001d9e:	b2c9      	uxtb	r1, r1
 8001da0:	408b      	lsls	r3, r1
 8001da2:	4969      	ldr	r1, [pc, #420]	; (8001f48 <HAL_RCC_OscConfig+0x5e8>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da8:	e0fd      	b.n	8001fa6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8088 	beq.w	8001ecc <HAL_RCC_OscConfig+0x56c>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001dce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ddc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	461a      	mov	r2, r3
 8001de4:	2301      	movs	r3, #1
 8001de6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7fe ff7a 	bl	8000ce0 <HAL_GetTick>
 8001dec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df2:	f7fe ff75 	bl	8000ce0 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d902      	bls.n	8001e08 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	f000 bde2 	b.w	80029cc <HAL_RCC_OscConfig+0x106c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	095b      	lsrs	r3, r3, #5
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d102      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4d8>
 8001e32:	4b45      	ldr	r3, [pc, #276]	; (8001f48 <HAL_RCC_OscConfig+0x5e8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	e013      	b.n	8001e60 <HAL_RCC_OscConfig+0x500>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e50:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <HAL_RCC_OscConfig+0x5e8>)
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	2202      	movs	r2, #2
 8001e62:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e66:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e6a:	fa92 f2a2 	rbit	r2, r2
 8001e6e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e72:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e76:	fab2 f282 	clz	r2, r2
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	f042 0220 	orr.w	r2, r2, #32
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	f002 021f 	and.w	r2, r2, #31
 8001e86:	2101      	movs	r1, #1
 8001e88:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0af      	beq.n	8001df2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_RCC_OscConfig+0x5e8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	21f8      	movs	r1, #248	; 0xf8
 8001ea8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001eb0:	fa91 f1a1 	rbit	r1, r1
 8001eb4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001eb8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ebc:	fab1 f181 	clz	r1, r1
 8001ec0:	b2c9      	uxtb	r1, r1
 8001ec2:	408b      	lsls	r3, r1
 8001ec4:	4920      	ldr	r1, [pc, #128]	; (8001f48 <HAL_RCC_OscConfig+0x5e8>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
 8001eca:	e06c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x646>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ede:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fef2 	bl	8000ce0 <HAL_GetTick>
 8001efc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f02:	f7fe feed 	bl	8000ce0 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d902      	bls.n	8001f18 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	f000 bd5a 	b.w	80029cc <HAL_RCC_OscConfig+0x106c>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	095b      	lsrs	r3, r3, #5
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d104      	bne.n	8001f4c <HAL_RCC_OscConfig+0x5ec>
 8001f42:	4b01      	ldr	r3, [pc, #4]	; (8001f48 <HAL_RCC_OscConfig+0x5e8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	e015      	b.n	8001f74 <HAL_RCC_OscConfig+0x614>
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f5e:	2302      	movs	r3, #2
 8001f60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f70:	4bc8      	ldr	r3, [pc, #800]	; (8002294 <HAL_RCC_OscConfig+0x934>)
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	2202      	movs	r2, #2
 8001f76:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f7e:	fa92 f2a2 	rbit	r2, r2
 8001f82:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f86:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f8a:	fab2 f282 	clz	r2, r2
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	f042 0220 	orr.w	r2, r2, #32
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f002 021f 	and.w	r2, r2, #31
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1ad      	bne.n	8001f02 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8110 	beq.w	80021dc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d079      	beq.n	80020c0 <HAL_RCC_OscConfig+0x760>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4bab      	ldr	r3, [pc, #684]	; (8002298 <HAL_RCC_OscConfig+0x938>)
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff6:	f7fe fe73 	bl	8000ce0 <HAL_GetTick>
 8001ffa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002000:	f7fe fe6e 	bl	8000ce0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d902      	bls.n	8002016 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	f000 bcdb 	b.w	80029cc <HAL_RCC_OscConfig+0x106c>
 8002016:	2302      	movs	r3, #2
 8002018:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002030:	2202      	movs	r2, #2
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	fa93 f2a3 	rbit	r2, r3
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002054:	2202      	movs	r2, #2
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	fa93 f2a3 	rbit	r2, r3
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800206e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002070:	4b88      	ldr	r3, [pc, #544]	; (8002294 <HAL_RCC_OscConfig+0x934>)
 8002072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002078:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800207c:	2102      	movs	r1, #2
 800207e:	6019      	str	r1, [r3, #0]
 8002080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002084:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	fa93 f1a3 	rbit	r1, r3
 800208e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002092:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002096:	6019      	str	r1, [r3, #0]
  return result;
 8002098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0a0      	beq.n	8002000 <HAL_RCC_OscConfig+0x6a0>
 80020be:	e08d      	b.n	80021dc <HAL_RCC_OscConfig+0x87c>
 80020c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	fa93 f2a3 	rbit	r2, r3
 80020da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020e2:	601a      	str	r2, [r3, #0]
  return result;
 80020e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b68      	ldr	r3, [pc, #416]	; (8002298 <HAL_RCC_OscConfig+0x938>)
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	461a      	mov	r2, r3
 80020fe:	2300      	movs	r3, #0
 8002100:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7fe fded 	bl	8000ce0 <HAL_GetTick>
 8002106:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210c:	f7fe fde8 	bl	8000ce0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d902      	bls.n	8002122 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	f000 bc55 	b.w	80029cc <HAL_RCC_OscConfig+0x106c>
 8002122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002126:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800212a:	2202      	movs	r2, #2
 800212c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002132:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	fa93 f2a3 	rbit	r2, r3
 800213c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002140:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800214e:	2202      	movs	r2, #2
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	fa93 f2a3 	rbit	r2, r3
 8002160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002164:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002172:	2202      	movs	r2, #2
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fa93 f2a3 	rbit	r2, r3
 8002184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002188:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800218c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCC_OscConfig+0x934>)
 8002190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002196:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800219a:	2102      	movs	r1, #2
 800219c:	6019      	str	r1, [r3, #0]
 800219e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	fa93 f1a3 	rbit	r1, r3
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021b4:	6019      	str	r1, [r3, #0]
  return result;
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2101      	movs	r1, #1
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d197      	bne.n	800210c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 81a1 	beq.w	8002534 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f8:	4b26      	ldr	r3, [pc, #152]	; (8002294 <HAL_RCC_OscConfig+0x934>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d116      	bne.n	8002232 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <HAL_RCC_OscConfig+0x934>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	4a22      	ldr	r2, [pc, #136]	; (8002294 <HAL_RCC_OscConfig+0x934>)
 800220a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220e:	61d3      	str	r3, [r2, #28]
 8002210:	4b20      	ldr	r3, [pc, #128]	; (8002294 <HAL_RCC_OscConfig+0x934>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002226:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800222a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_RCC_OscConfig+0x93c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d11a      	bne.n	8002274 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_RCC_OscConfig+0x93c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a16      	ldr	r2, [pc, #88]	; (800229c <HAL_RCC_OscConfig+0x93c>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7fe fd49 	bl	8000ce0 <HAL_GetTick>
 800224e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	e009      	b.n	8002268 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002254:	f7fe fd44 	bl	8000ce0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b64      	cmp	r3, #100	; 0x64
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e3b1      	b.n	80029cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_RCC_OscConfig+0x93c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ef      	beq.n	8002254 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002278:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d10d      	bne.n	80022a0 <HAL_RCC_OscConfig+0x940>
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <HAL_RCC_OscConfig+0x934>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4a02      	ldr	r2, [pc, #8]	; (8002294 <HAL_RCC_OscConfig+0x934>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6213      	str	r3, [r2, #32]
 8002290:	e03c      	b.n	800230c <HAL_RCC_OscConfig+0x9ac>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	10908120 	.word	0x10908120
 800229c:	40007000 	.word	0x40007000
 80022a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x96a>
 80022b0:	4bc1      	ldr	r3, [pc, #772]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4ac0      	ldr	r2, [pc, #768]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6213      	str	r3, [r2, #32]
 80022bc:	4bbe      	ldr	r3, [pc, #760]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4abd      	ldr	r2, [pc, #756]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 80022c2:	f023 0304 	bic.w	r3, r3, #4
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	e020      	b.n	800230c <HAL_RCC_OscConfig+0x9ac>
 80022ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x994>
 80022da:	4bb7      	ldr	r3, [pc, #732]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4ab6      	ldr	r2, [pc, #728]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 80022e0:	f043 0304 	orr.w	r3, r3, #4
 80022e4:	6213      	str	r3, [r2, #32]
 80022e6:	4bb4      	ldr	r3, [pc, #720]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4ab3      	ldr	r2, [pc, #716]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6213      	str	r3, [r2, #32]
 80022f2:	e00b      	b.n	800230c <HAL_RCC_OscConfig+0x9ac>
 80022f4:	4bb0      	ldr	r3, [pc, #704]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4aaf      	ldr	r2, [pc, #700]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	4bad      	ldr	r3, [pc, #692]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4aac      	ldr	r2, [pc, #688]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 8002306:	f023 0304 	bic.w	r3, r3, #4
 800230a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800230c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8081 	beq.w	8002420 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231e:	f7fe fcdf 	bl	8000ce0 <HAL_GetTick>
 8002322:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002328:	f7fe fcda 	bl	8000ce0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e345      	b.n	80029cc <HAL_RCC_OscConfig+0x106c>
 8002340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002344:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002348:	2202      	movs	r2, #2
 800234a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	fa93 f2a3 	rbit	r2, r3
 800235a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002368:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800236c:	2202      	movs	r2, #2
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002374:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002382:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002386:	601a      	str	r2, [r3, #0]
  return result;
 8002388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002390:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d102      	bne.n	80023ac <HAL_RCC_OscConfig+0xa4c>
 80023a6:	4b84      	ldr	r3, [pc, #528]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	e013      	b.n	80023d4 <HAL_RCC_OscConfig+0xa74>
 80023ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023b4:	2202      	movs	r2, #2
 80023b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	4b79      	ldr	r3, [pc, #484]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023dc:	2102      	movs	r1, #2
 80023de:	6011      	str	r1, [r2, #0]
 80023e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	fa92 f1a2 	rbit	r1, r2
 80023ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023f2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80023f6:	6011      	str	r1, [r2, #0]
  return result;
 80023f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023fc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	fab2 f282 	clz	r2, r2
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	f002 021f 	and.w	r2, r2, #31
 8002412:	2101      	movs	r1, #1
 8002414:	fa01 f202 	lsl.w	r2, r1, r2
 8002418:	4013      	ands	r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d084      	beq.n	8002328 <HAL_RCC_OscConfig+0x9c8>
 800241e:	e07f      	b.n	8002520 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002420:	f7fe fc5e 	bl	8000ce0 <HAL_GetTick>
 8002424:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002428:	e00b      	b.n	8002442 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe fc59 	bl	8000ce0 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	; 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e2c4      	b.n	80029cc <HAL_RCC_OscConfig+0x106c>
 8002442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002446:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800244a:	2202      	movs	r2, #2
 800244c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002452:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	fa93 f2a3 	rbit	r2, r3
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800246e:	2202      	movs	r2, #2
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002476:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	fa93 f2a3 	rbit	r2, r3
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002488:	601a      	str	r2, [r3, #0]
  return result;
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002492:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d102      	bne.n	80024ae <HAL_RCC_OscConfig+0xb4e>
 80024a8:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	e013      	b.n	80024d6 <HAL_RCC_OscConfig+0xb76>
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024b6:	2202      	movs	r2, #2
 80024b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	fa93 f2a3 	rbit	r2, r3
 80024c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	4b39      	ldr	r3, [pc, #228]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024de:	2102      	movs	r1, #2
 80024e0:	6011      	str	r1, [r2, #0]
 80024e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	fa92 f1a2 	rbit	r1, r2
 80024f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80024f8:	6011      	str	r1, [r2, #0]
  return result;
 80024fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024fe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	fab2 f282 	clz	r2, r2
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	f002 021f 	and.w	r2, r2, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f202 	lsl.w	r2, r1, r2
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d184      	bne.n	800242a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002520:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	4a22      	ldr	r2, [pc, #136]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 800252e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002532:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8242 	beq.w	80029ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <HAL_RCC_OscConfig+0xc58>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b08      	cmp	r3, #8
 8002550:	f000 8213 	beq.w	800297a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	2b02      	cmp	r3, #2
 8002562:	f040 8162 	bne.w	800282a <HAL_RCC_OscConfig+0xeca>
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800256e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002578:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	fa93 f2a3 	rbit	r2, r3
 8002582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002586:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800258a:	601a      	str	r2, [r3, #0]
  return result;
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002594:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	461a      	mov	r2, r3
 80025a8:	2300      	movs	r3, #0
 80025aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fb98 	bl	8000ce0 <HAL_GetTick>
 80025b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b4:	e00c      	b.n	80025d0 <HAL_RCC_OscConfig+0xc70>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025bc:	f7fe fb90 	bl	8000ce0 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1fd      	b.n	80029cc <HAL_RCC_OscConfig+0x106c>
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	fa93 f2a3 	rbit	r2, r3
 80025ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80025f4:	601a      	str	r2, [r3, #0]
  return result;
 80025f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80025fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b01      	cmp	r3, #1
 8002612:	d102      	bne.n	800261a <HAL_RCC_OscConfig+0xcba>
 8002614:	4bb0      	ldr	r3, [pc, #704]	; (80028d8 <HAL_RCC_OscConfig+0xf78>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	e027      	b.n	800266a <HAL_RCC_OscConfig+0xd0a>
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	fa93 f2a3 	rbit	r2, r3
 8002636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	fa93 f2a3 	rbit	r2, r3
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	4b9c      	ldr	r3, [pc, #624]	; (80028d8 <HAL_RCC_OscConfig+0xf78>)
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800266e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002672:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002676:	6011      	str	r1, [r2, #0]
 8002678:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800267c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	fa92 f1a2 	rbit	r1, r2
 8002686:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800268a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800268e:	6011      	str	r1, [r2, #0]
  return result;
 8002690:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002694:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	fab2 f282 	clz	r2, r2
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	f042 0220 	orr.w	r2, r2, #32
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	f002 021f 	and.w	r2, r2, #31
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f202 	lsl.w	r2, r1, r2
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d182      	bne.n	80025bc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b6:	4b88      	ldr	r3, [pc, #544]	; (80028d8 <HAL_RCC_OscConfig+0xf78>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	430b      	orrs	r3, r1
 80026d8:	497f      	ldr	r1, [pc, #508]	; (80028d8 <HAL_RCC_OscConfig+0xf78>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
 80026de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	fa93 f2a3 	rbit	r2, r3
 80026fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002702:	601a      	str	r2, [r3, #0]
  return result;
 8002704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002708:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800270c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002718:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	461a      	mov	r2, r3
 8002720:	2301      	movs	r3, #1
 8002722:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe fadc 	bl	8000ce0 <HAL_GetTick>
 8002728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800272c:	e009      	b.n	8002742 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272e:	f7fe fad7 	bl	8000ce0 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e144      	b.n	80029cc <HAL_RCC_OscConfig+0x106c>
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800274a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800274e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002754:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	fa93 f2a3 	rbit	r2, r3
 800275e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002762:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002766:	601a      	str	r2, [r3, #0]
  return result;
 8002768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002770:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d102      	bne.n	800278c <HAL_RCC_OscConfig+0xe2c>
 8002786:	4b54      	ldr	r3, [pc, #336]	; (80028d8 <HAL_RCC_OscConfig+0xf78>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	e027      	b.n	80027dc <HAL_RCC_OscConfig+0xe7c>
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	fa93 f2a3 	rbit	r2, r3
 80027a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	fa93 f2a3 	rbit	r2, r3
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	4b3f      	ldr	r3, [pc, #252]	; (80028d8 <HAL_RCC_OscConfig+0xf78>)
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027e8:	6011      	str	r1, [r2, #0]
 80027ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	fa92 f1a2 	rbit	r1, r2
 80027f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027fc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002800:	6011      	str	r1, [r2, #0]
  return result;
 8002802:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002806:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	fab2 f282 	clz	r2, r2
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	f042 0220 	orr.w	r2, r2, #32
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f002 021f 	and.w	r2, r2, #31
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f202 	lsl.w	r2, r1, r2
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d082      	beq.n	800272e <HAL_RCC_OscConfig+0xdce>
 8002828:	e0cf      	b.n	80029ca <HAL_RCC_OscConfig+0x106a>
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002832:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	fa93 f2a3 	rbit	r2, r3
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800284e:	601a      	str	r2, [r3, #0]
  return result;
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002858:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002864:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	461a      	mov	r2, r3
 800286c:	2300      	movs	r3, #0
 800286e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe fa36 	bl	8000ce0 <HAL_GetTick>
 8002874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002878:	e009      	b.n	800288e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe fa31 	bl	8000ce0 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e09e      	b.n	80029cc <HAL_RCC_OscConfig+0x106c>
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002896:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800289a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	fa93 f2a3 	rbit	r2, r3
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028b2:	601a      	str	r2, [r3, #0]
  return result;
 80028b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d104      	bne.n	80028dc <HAL_RCC_OscConfig+0xf7c>
 80028d2:	4b01      	ldr	r3, [pc, #4]	; (80028d8 <HAL_RCC_OscConfig+0xf78>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	e029      	b.n	800292c <HAL_RCC_OscConfig+0xfcc>
 80028d8:	40021000 	.word	0x40021000
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	fa93 f2a3 	rbit	r2, r3
 80028f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800290a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	fa93 f2a3 	rbit	r2, r3
 800291e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002922:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_OscConfig+0x1078>)
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002930:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002934:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002938:	6011      	str	r1, [r2, #0]
 800293a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800293e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	fa92 f1a2 	rbit	r1, r2
 8002948:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800294c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002950:	6011      	str	r1, [r2, #0]
  return result;
 8002952:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002956:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	fab2 f282 	clz	r2, r2
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	f042 0220 	orr.w	r2, r2, #32
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f002 021f 	and.w	r2, r2, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f202 	lsl.w	r2, r1, r2
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d180      	bne.n	800287a <HAL_RCC_OscConfig+0xf1a>
 8002978:	e027      	b.n	80029ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e01e      	b.n	80029cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_RCC_OscConfig+0x1078>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002996:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800299a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d10b      	bne.n	80029c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000

080029dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b09e      	sub	sp, #120	; 0x78
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e162      	b.n	8002cba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b90      	ldr	r3, [pc, #576]	; (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d910      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b8d      	ldr	r3, [pc, #564]	; (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 0207 	bic.w	r2, r3, #7
 8002a0a:	498b      	ldr	r1, [pc, #556]	; (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b89      	ldr	r3, [pc, #548]	; (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e14a      	b.n	8002cba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b82      	ldr	r3, [pc, #520]	; (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	497f      	ldr	r1, [pc, #508]	; (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 80dc 	beq.w	8002c08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d13c      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xf6>
 8002a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d102      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xa6>
 8002a7c:	4b6f      	ldr	r3, [pc, #444]	; (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	e00f      	b.n	8002aa2 <HAL_RCC_ClockConfig+0xc6>
 8002a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	667b      	str	r3, [r7, #100]	; 0x64
 8002a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a94:	663b      	str	r3, [r7, #96]	; 0x60
 8002a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a9e:	4b67      	ldr	r3, [pc, #412]	; (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aa6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002aa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002aaa:	fa92 f2a2 	rbit	r2, r2
 8002aae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ab0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ab2:	fab2 f282 	clz	r2, r2
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	f042 0220 	orr.w	r2, r2, #32
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	f002 021f 	and.w	r2, r2, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d17b      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0f3      	b.n	8002cba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d13c      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x178>
 8002ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ade:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	095b      	lsrs	r3, r3, #5
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d102      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x128>
 8002afe:	4b4f      	ldr	r3, [pc, #316]	; (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	e00f      	b.n	8002b24 <HAL_RCC_ClockConfig+0x148>
 8002b04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	647b      	str	r3, [r7, #68]	; 0x44
 8002b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b16:	643b      	str	r3, [r7, #64]	; 0x40
 8002b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b20:	4b46      	ldr	r3, [pc, #280]	; (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b28:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b2c:	fa92 f2a2 	rbit	r2, r2
 8002b30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b34:	fab2 f282 	clz	r2, r2
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f042 0220 	orr.w	r2, r2, #32
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	f002 021f 	and.w	r2, r2, #31
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d13a      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0b2      	b.n	8002cba <HAL_RCC_ClockConfig+0x2de>
 8002b54:	2302      	movs	r3, #2
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d102      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x1a0>
 8002b76:	4b31      	ldr	r3, [pc, #196]	; (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	e00d      	b.n	8002b98 <HAL_RCC_ClockConfig+0x1bc>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
 8002b88:	2302      	movs	r3, #2
 8002b8a:	623b      	str	r3, [r7, #32]
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	2202      	movs	r2, #2
 8002b9a:	61ba      	str	r2, [r7, #24]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	fa92 f2a2 	rbit	r2, r2
 8002ba2:	617a      	str	r2, [r7, #20]
  return result;
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	fab2 f282 	clz	r2, r2
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	f042 0220 	orr.w	r2, r2, #32
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	f002 021f 	and.w	r2, r2, #31
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e079      	b.n	8002cba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc6:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	491a      	ldr	r1, [pc, #104]	; (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd8:	f7fe f882 	bl	8000ce0 <HAL_GetTick>
 8002bdc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be0:	f7fe f87e 	bl	8000ce0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e061      	b.n	8002cba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 020c 	and.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d1eb      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d214      	bcs.n	8002c40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 0207 	bic.w	r2, r3, #7
 8002c1e:	4906      	ldr	r1, [pc, #24]	; (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e040      	b.n	8002cba <HAL_RCC_ClockConfig+0x2de>
 8002c38:	40022000 	.word	0x40022000
 8002c3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	491a      	ldr	r1, [pc, #104]	; (8002cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6a:	4b16      	ldr	r3, [pc, #88]	; (8002cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4912      	ldr	r1, [pc, #72]	; (8002cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c7e:	f000 f829 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002c82:	4601      	mov	r1, r0
 8002c84:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c8c:	22f0      	movs	r2, #240	; 0xf0
 8002c8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	fa92 f2a2 	rbit	r2, r2
 8002c96:	60fa      	str	r2, [r7, #12]
  return result;
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	fab2 f282 	clz	r2, r2
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	40d3      	lsrs	r3, r2
 8002ca2:	4a09      	ldr	r2, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x2ec>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	fa21 f303 	lsr.w	r3, r1, r3
 8002caa:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <HAL_RCC_ClockConfig+0x2f0>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <HAL_RCC_ClockConfig+0x2f4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd ffd0 	bl	8000c58 <HAL_InitTick>
  
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3778      	adds	r7, #120	; 0x78
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	08004814 	.word	0x08004814
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b08b      	sub	sp, #44	; 0x2c
 8002cd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cee:	4b29      	ldr	r3, [pc, #164]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d002      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x30>
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d003      	beq.n	8002d0a <HAL_RCC_GetSysClockFreq+0x36>
 8002d02:	e03c      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d06:	623b      	str	r3, [r7, #32]
      break;
 8002d08:	e03c      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d10:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d14:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	fa92 f2a2 	rbit	r2, r2
 8002d1c:	607a      	str	r2, [r7, #4]
  return result;
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	fab2 f282 	clz	r2, r2
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	40d3      	lsrs	r3, r2
 8002d28:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d2a:	5cd3      	ldrb	r3, [r2, r3]
 8002d2c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d2e:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	220f      	movs	r2, #15
 8002d38:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	fa92 f2a2 	rbit	r2, r2
 8002d40:	60fa      	str	r2, [r7, #12]
  return result;
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	fab2 f282 	clz	r2, r2
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	40d3      	lsrs	r3, r2
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d4e:	5cd3      	ldrb	r3, [r2, r3]
 8002d50:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d5c:	4a0e      	ldr	r2, [pc, #56]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6c:	e004      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	4a0c      	ldr	r2, [pc, #48]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	623b      	str	r3, [r7, #32]
      break;
 8002d7c:	e002      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d80:	623b      	str	r3, [r7, #32]
      break;
 8002d82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d84:	6a3b      	ldr	r3, [r7, #32]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	372c      	adds	r7, #44	; 0x2c
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
 8002d98:	00f42400 	.word	0x00f42400
 8002d9c:	0800482c 	.word	0x0800482c
 8002da0:	0800483c 	.word	0x0800483c
 8002da4:	003d0900 	.word	0x003d0900
 8002da8:	007a1200 	.word	0x007a1200

08002dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000000 	.word	0x20000000

08002dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002dca:	f7ff ffef 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002dce:	4601      	mov	r1, r0
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ddc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	fa92 f2a2 	rbit	r2, r2
 8002de4:	603a      	str	r2, [r7, #0]
  return result;
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	fab2 f282 	clz	r2, r2
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	40d3      	lsrs	r3, r2
 8002df0:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002df2:	5cd3      	ldrb	r3, [r2, r3]
 8002df4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08004824 	.word	0x08004824

08002e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e0e:	f7ff ffcd 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002e12:	4601      	mov	r1, r0
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002e1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002e20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	fa92 f2a2 	rbit	r2, r2
 8002e28:	603a      	str	r2, [r7, #0]
  return result;
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	fab2 f282 	clz	r2, r2
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	40d3      	lsrs	r3, r2
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e36:	5cd3      	ldrb	r3, [r2, r3]
 8002e38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	08004824 	.word	0x08004824

08002e4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e049      	b.n	8002ef2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fd fd9e 	bl	80009b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f000 fd30 	bl	80038f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d109      	bne.n	8002f28 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e03c      	b.n	8002fa2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d109      	bne.n	8002f42 <HAL_TIM_PWM_Start_DMA+0x46>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	bf0c      	ite	eq
 8002f3a:	2301      	moveq	r3, #1
 8002f3c:	2300      	movne	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	e02f      	b.n	8002fa2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d109      	bne.n	8002f5c <HAL_TIM_PWM_Start_DMA+0x60>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e022      	b.n	8002fa2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d109      	bne.n	8002f76 <HAL_TIM_PWM_Start_DMA+0x7a>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2301      	moveq	r3, #1
 8002f70:	2300      	movne	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	e015      	b.n	8002fa2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b10      	cmp	r3, #16
 8002f7a:	d109      	bne.n	8002f90 <HAL_TIM_PWM_Start_DMA+0x94>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	e008      	b.n	8002fa2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e197      	b.n	80032da <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	e03c      	b.n	800303e <HAL_TIM_PWM_Start_DMA+0x142>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d109      	bne.n	8002fde <HAL_TIM_PWM_Start_DMA+0xe2>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	bf0c      	ite	eq
 8002fd6:	2301      	moveq	r3, #1
 8002fd8:	2300      	movne	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	e02f      	b.n	800303e <HAL_TIM_PWM_Start_DMA+0x142>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d109      	bne.n	8002ff8 <HAL_TIM_PWM_Start_DMA+0xfc>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e022      	b.n	800303e <HAL_TIM_PWM_Start_DMA+0x142>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	d109      	bne.n	8003012 <HAL_TIM_PWM_Start_DMA+0x116>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	e015      	b.n	800303e <HAL_TIM_PWM_Start_DMA+0x142>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b10      	cmp	r3, #16
 8003016:	d109      	bne.n	800302c <HAL_TIM_PWM_Start_DMA+0x130>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e008      	b.n	800303e <HAL_TIM_PWM_Start_DMA+0x142>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d034      	beq.n	80030ac <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d104      	bne.n	8003052 <HAL_TIM_PWM_Start_DMA+0x156>
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e143      	b.n	80032da <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d104      	bne.n	8003062 <HAL_TIM_PWM_Start_DMA+0x166>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003060:	e026      	b.n	80030b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b04      	cmp	r3, #4
 8003066:	d104      	bne.n	8003072 <HAL_TIM_PWM_Start_DMA+0x176>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003070:	e01e      	b.n	80030b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b08      	cmp	r3, #8
 8003076:	d104      	bne.n	8003082 <HAL_TIM_PWM_Start_DMA+0x186>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003080:	e016      	b.n	80030b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d104      	bne.n	8003092 <HAL_TIM_PWM_Start_DMA+0x196>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003090:	e00e      	b.n	80030b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b10      	cmp	r3, #16
 8003096:	d104      	bne.n	80030a2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030a0:	e006      	b.n	80030b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2202      	movs	r2, #2
 80030a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030aa:	e001      	b.n	80030b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e114      	b.n	80032da <HAL_TIM_PWM_Start_DMA+0x3de>
  }

  switch (Channel)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	f200 80ae 	bhi.w	8003214 <HAL_TIM_PWM_Start_DMA+0x318>
 80030b8:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	080030f5 	.word	0x080030f5
 80030c4:	08003215 	.word	0x08003215
 80030c8:	08003215 	.word	0x08003215
 80030cc:	08003215 	.word	0x08003215
 80030d0:	0800313d 	.word	0x0800313d
 80030d4:	08003215 	.word	0x08003215
 80030d8:	08003215 	.word	0x08003215
 80030dc:	08003215 	.word	0x08003215
 80030e0:	08003185 	.word	0x08003185
 80030e4:	08003215 	.word	0x08003215
 80030e8:	08003215 	.word	0x08003215
 80030ec:	08003215 	.word	0x08003215
 80030f0:	080031cd 	.word	0x080031cd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	4a7a      	ldr	r2, [pc, #488]	; (80032e4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	4a79      	ldr	r2, [pc, #484]	; (80032e8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	4a78      	ldr	r2, [pc, #480]	; (80032ec <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800310a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3334      	adds	r3, #52	; 0x34
 8003118:	461a      	mov	r2, r3
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	f7fe f8f0 	bl	8001300 <HAL_DMA_Start_IT>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0d7      	b.n	80032da <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003138:	60da      	str	r2, [r3, #12]
      break;
 800313a:	e06e      	b.n	800321a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	4a68      	ldr	r2, [pc, #416]	; (80032e4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003142:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	4a67      	ldr	r2, [pc, #412]	; (80032e8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	4a66      	ldr	r2, [pc, #408]	; (80032ec <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003152:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3338      	adds	r3, #56	; 0x38
 8003160:	461a      	mov	r2, r3
 8003162:	887b      	ldrh	r3, [r7, #2]
 8003164:	f7fe f8cc 	bl	8001300 <HAL_DMA_Start_IT>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0b3      	b.n	80032da <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003180:	60da      	str	r2, [r3, #12]
      break;
 8003182:	e04a      	b.n	800321a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	4a56      	ldr	r2, [pc, #344]	; (80032e4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	4a55      	ldr	r2, [pc, #340]	; (80032e8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	4a54      	ldr	r2, [pc, #336]	; (80032ec <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800319a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	333c      	adds	r3, #60	; 0x3c
 80031a8:	461a      	mov	r2, r3
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	f7fe f8a8 	bl	8001300 <HAL_DMA_Start_IT>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e08f      	b.n	80032da <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c8:	60da      	str	r2, [r3, #12]
      break;
 80031ca:	e026      	b.n	800321a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	4a44      	ldr	r2, [pc, #272]	; (80032e4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	4a43      	ldr	r2, [pc, #268]	; (80032e8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	4a42      	ldr	r2, [pc, #264]	; (80032ec <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3340      	adds	r3, #64	; 0x40
 80031f0:	461a      	mov	r2, r3
 80031f2:	887b      	ldrh	r3, [r7, #2]
 80031f4:	f7fe f884 	bl	8001300 <HAL_DMA_Start_IT>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e06b      	b.n	80032da <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003210:	60da      	str	r2, [r3, #12]
      break;
 8003212:	e002      	b.n	800321a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	75fb      	strb	r3, [r7, #23]
      break;
 8003218:	bf00      	nop
  }

  if (status == HAL_OK)
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d15b      	bne.n	80032d8 <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2201      	movs	r2, #1
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fe7f 	bl	8003f2c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00e      	beq.n	8003256 <HAL_TIM_PWM_Start_DMA+0x35a>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2d      	ldr	r2, [pc, #180]	; (80032f4 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d009      	beq.n	8003256 <HAL_TIM_PWM_Start_DMA+0x35a>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2c      	ldr	r2, [pc, #176]	; (80032f8 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_TIM_PWM_Start_DMA+0x35a>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <HAL_TIM_PWM_Start_DMA+0x400>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_TIM_PWM_Start_DMA+0x35e>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_TIM_PWM_Start_DMA+0x360>
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800326e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00e      	beq.n	8003298 <HAL_TIM_PWM_Start_DMA+0x39c>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003282:	d009      	beq.n	8003298 <HAL_TIM_PWM_Start_DMA+0x39c>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <HAL_TIM_PWM_Start_DMA+0x404>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_TIM_PWM_Start_DMA+0x39c>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d115      	bne.n	80032c4 <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	4b19      	ldr	r3, [pc, #100]	; (8003304 <HAL_TIM_PWM_Start_DMA+0x408>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d015      	beq.n	80032d6 <HAL_TIM_PWM_Start_DMA+0x3da>
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b0:	d011      	beq.n	80032d6 <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c2:	e008      	b.n	80032d6 <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	e000      	b.n	80032d8 <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	080037df 	.word	0x080037df
 80032e8:	08003887 	.word	0x08003887
 80032ec:	0800374d 	.word	0x0800374d
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40014000 	.word	0x40014000
 80032f8:	40014400 	.word	0x40014400
 80032fc:	40014800 	.word	0x40014800
 8003300:	40000400 	.word	0x40000400
 8003304:	00010007 	.word	0x00010007

08003308 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b0c      	cmp	r3, #12
 800331a:	d855      	bhi.n	80033c8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003359 	.word	0x08003359
 8003328:	080033c9 	.word	0x080033c9
 800332c:	080033c9 	.word	0x080033c9
 8003330:	080033c9 	.word	0x080033c9
 8003334:	08003375 	.word	0x08003375
 8003338:	080033c9 	.word	0x080033c9
 800333c:	080033c9 	.word	0x080033c9
 8003340:	080033c9 	.word	0x080033c9
 8003344:	08003391 	.word	0x08003391
 8003348:	080033c9 	.word	0x080033c9
 800334c:	080033c9 	.word	0x080033c9
 8003350:	080033c9 	.word	0x080033c9
 8003354:	080033ad 	.word	0x080033ad
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003366:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	4618      	mov	r0, r3
 800336e:	f7fe f826 	bl	80013be <HAL_DMA_Abort_IT>
      break;
 8003372:	e02c      	b.n	80033ce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003382:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe f818 	bl	80013be <HAL_DMA_Abort_IT>
      break;
 800338e:	e01e      	b.n	80033ce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800339e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe f80a 	bl	80013be <HAL_DMA_Abort_IT>
      break;
 80033aa:	e010      	b.n	80033ce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fd fffc 	bl	80013be <HAL_DMA_Abort_IT>
      break;
 80033c6:	e002      	b.n	80033ce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
      break;
 80033cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d17b      	bne.n	80034cc <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2200      	movs	r2, #0
 80033da:	6839      	ldr	r1, [r7, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fda5 	bl	8003f2c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a3c      	ldr	r2, [pc, #240]	; (80034d8 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00e      	beq.n	800340a <HAL_TIM_PWM_Stop_DMA+0x102>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a3a      	ldr	r2, [pc, #232]	; (80034dc <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d009      	beq.n	800340a <HAL_TIM_PWM_Stop_DMA+0x102>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a39      	ldr	r2, [pc, #228]	; (80034e0 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d004      	beq.n	800340a <HAL_TIM_PWM_Stop_DMA+0x102>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a37      	ldr	r2, [pc, #220]	; (80034e4 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d101      	bne.n	800340e <HAL_TIM_PWM_Stop_DMA+0x106>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_TIM_PWM_Stop_DMA+0x108>
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d017      	beq.n	8003444 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6a1a      	ldr	r2, [r3, #32]
 800341a:	f241 1311 	movw	r3, #4369	; 0x1111
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10f      	bne.n	8003444 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6a1a      	ldr	r2, [r3, #32]
 800342a:	f240 4344 	movw	r3, #1092	; 0x444
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d107      	bne.n	8003444 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003442:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6a1a      	ldr	r2, [r3, #32]
 800344a:	f241 1311 	movw	r3, #4369	; 0x1111
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10f      	bne.n	8003474 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6a1a      	ldr	r2, [r3, #32]
 800345a:	f240 4344 	movw	r3, #1092	; 0x444
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d107      	bne.n	8003474 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003482:	e023      	b.n	80034cc <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b04      	cmp	r3, #4
 8003488:	d104      	bne.n	8003494 <HAL_TIM_PWM_Stop_DMA+0x18c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003492:	e01b      	b.n	80034cc <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b08      	cmp	r3, #8
 8003498:	d104      	bne.n	80034a4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034a2:	e013      	b.n	80034cc <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	d104      	bne.n	80034b4 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034b2:	e00b      	b.n	80034cc <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d104      	bne.n	80034c4 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c2:	e003      	b.n	80034cc <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40014400 	.word	0x40014400
 80034e4:	40014800 	.word	0x40014800

080034e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003502:	2302      	movs	r3, #2
 8003504:	e0ff      	b.n	8003706 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b14      	cmp	r3, #20
 8003512:	f200 80f0 	bhi.w	80036f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	08003571 	.word	0x08003571
 8003520:	080036f7 	.word	0x080036f7
 8003524:	080036f7 	.word	0x080036f7
 8003528:	080036f7 	.word	0x080036f7
 800352c:	080035b1 	.word	0x080035b1
 8003530:	080036f7 	.word	0x080036f7
 8003534:	080036f7 	.word	0x080036f7
 8003538:	080036f7 	.word	0x080036f7
 800353c:	080035f3 	.word	0x080035f3
 8003540:	080036f7 	.word	0x080036f7
 8003544:	080036f7 	.word	0x080036f7
 8003548:	080036f7 	.word	0x080036f7
 800354c:	08003633 	.word	0x08003633
 8003550:	080036f7 	.word	0x080036f7
 8003554:	080036f7 	.word	0x080036f7
 8003558:	080036f7 	.word	0x080036f7
 800355c:	08003675 	.word	0x08003675
 8003560:	080036f7 	.word	0x080036f7
 8003564:	080036f7 	.word	0x080036f7
 8003568:	080036f7 	.word	0x080036f7
 800356c:	080036b5 	.word	0x080036b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fa32 	bl	80039e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0208 	orr.w	r2, r2, #8
 800358a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0204 	bic.w	r2, r2, #4
 800359a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6999      	ldr	r1, [r3, #24]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	619a      	str	r2, [r3, #24]
      break;
 80035ae:	e0a5      	b.n	80036fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fa98 	bl	8003aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6999      	ldr	r1, [r3, #24]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	021a      	lsls	r2, r3, #8
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	619a      	str	r2, [r3, #24]
      break;
 80035f0:	e084      	b.n	80036fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 faf7 	bl	8003bec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0208 	orr.w	r2, r2, #8
 800360c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0204 	bic.w	r2, r2, #4
 800361c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69d9      	ldr	r1, [r3, #28]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	61da      	str	r2, [r3, #28]
      break;
 8003630:	e064      	b.n	80036fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fb55 	bl	8003ce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800364c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800365c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69d9      	ldr	r1, [r3, #28]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	021a      	lsls	r2, r3, #8
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	61da      	str	r2, [r3, #28]
      break;
 8003672:	e043      	b.n	80036fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fb98 	bl	8003db0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0208 	orr.w	r2, r2, #8
 800368e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0204 	bic.w	r2, r2, #4
 800369e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036b2:	e023      	b.n	80036fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fbd6 	bl	8003e6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	021a      	lsls	r2, r3, #8
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036f4:	e002      	b.n	80036fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
      break;
 80036fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003704:	7dfb      	ldrb	r3, [r7, #23]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop

08003710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d107      	bne.n	8003774 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003772:	e02a      	b.n	80037ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	d107      	bne.n	800378e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2202      	movs	r2, #2
 8003782:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800378c:	e01d      	b.n	80037ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	d107      	bne.n	80037a8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2204      	movs	r2, #4
 800379c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a6:	e010      	b.n	80037ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d107      	bne.n	80037c2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2208      	movs	r2, #8
 80037b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037c0:	e003      	b.n	80037ca <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7ff ffb4 	bl	8003738 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	771a      	strb	r2, [r3, #28]
}
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d10b      	bne.n	800380e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d136      	bne.n	8003872 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800380c:	e031      	b.n	8003872 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	d10b      	bne.n	8003830 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2202      	movs	r2, #2
 800381c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d125      	bne.n	8003872 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800382e:	e020      	b.n	8003872 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	d10b      	bne.n	8003852 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2204      	movs	r2, #4
 800383e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d114      	bne.n	8003872 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003850:	e00f      	b.n	8003872 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	429a      	cmp	r2, r3
 800385a:	d10a      	bne.n	8003872 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2208      	movs	r2, #8
 8003860:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff ff4c 	bl	8003710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	771a      	strb	r2, [r3, #28]
}
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	429a      	cmp	r2, r3
 800389c:	d103      	bne.n	80038a6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	771a      	strb	r2, [r3, #28]
 80038a4:	e019      	b.n	80038da <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d103      	bne.n	80038b8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2202      	movs	r2, #2
 80038b4:	771a      	strb	r2, [r3, #28]
 80038b6:	e010      	b.n	80038da <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d103      	bne.n	80038ca <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2204      	movs	r2, #4
 80038c6:	771a      	strb	r2, [r3, #28]
 80038c8:	e007      	b.n	80038da <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d102      	bne.n	80038da <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2208      	movs	r2, #8
 80038d8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7ff ff22 	bl	8003724 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	771a      	strb	r2, [r3, #28]
}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a32      	ldr	r2, [pc, #200]	; (80039cc <TIM_Base_SetConfig+0xdc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d007      	beq.n	8003918 <TIM_Base_SetConfig+0x28>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390e:	d003      	beq.n	8003918 <TIM_Base_SetConfig+0x28>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a2f      	ldr	r2, [pc, #188]	; (80039d0 <TIM_Base_SetConfig+0xe0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d108      	bne.n	800392a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a27      	ldr	r2, [pc, #156]	; (80039cc <TIM_Base_SetConfig+0xdc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <TIM_Base_SetConfig+0x6a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003938:	d00f      	beq.n	800395a <TIM_Base_SetConfig+0x6a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a24      	ldr	r2, [pc, #144]	; (80039d0 <TIM_Base_SetConfig+0xe0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00b      	beq.n	800395a <TIM_Base_SetConfig+0x6a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a23      	ldr	r2, [pc, #140]	; (80039d4 <TIM_Base_SetConfig+0xe4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d007      	beq.n	800395a <TIM_Base_SetConfig+0x6a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a22      	ldr	r2, [pc, #136]	; (80039d8 <TIM_Base_SetConfig+0xe8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d003      	beq.n	800395a <TIM_Base_SetConfig+0x6a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a21      	ldr	r2, [pc, #132]	; (80039dc <TIM_Base_SetConfig+0xec>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d108      	bne.n	800396c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a0e      	ldr	r2, [pc, #56]	; (80039cc <TIM_Base_SetConfig+0xdc>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00b      	beq.n	80039b0 <TIM_Base_SetConfig+0xc0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <TIM_Base_SetConfig+0xe4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d007      	beq.n	80039b0 <TIM_Base_SetConfig+0xc0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <TIM_Base_SetConfig+0xe8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d003      	beq.n	80039b0 <TIM_Base_SetConfig+0xc0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a0c      	ldr	r2, [pc, #48]	; (80039dc <TIM_Base_SetConfig+0xec>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d103      	bne.n	80039b8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	615a      	str	r2, [r3, #20]
}
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40012c00 	.word	0x40012c00
 80039d0:	40000400 	.word	0x40000400
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800

080039e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f023 0201 	bic.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0303 	bic.w	r3, r3, #3
 8003a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 0302 	bic.w	r3, r3, #2
 8003a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a28      	ldr	r2, [pc, #160]	; (8003adc <TIM_OC1_SetConfig+0xfc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00b      	beq.n	8003a58 <TIM_OC1_SetConfig+0x78>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a27      	ldr	r2, [pc, #156]	; (8003ae0 <TIM_OC1_SetConfig+0x100>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d007      	beq.n	8003a58 <TIM_OC1_SetConfig+0x78>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a26      	ldr	r2, [pc, #152]	; (8003ae4 <TIM_OC1_SetConfig+0x104>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_OC1_SetConfig+0x78>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a25      	ldr	r2, [pc, #148]	; (8003ae8 <TIM_OC1_SetConfig+0x108>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d10c      	bne.n	8003a72 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f023 0308 	bic.w	r3, r3, #8
 8003a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f023 0304 	bic.w	r3, r3, #4
 8003a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a19      	ldr	r2, [pc, #100]	; (8003adc <TIM_OC1_SetConfig+0xfc>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00b      	beq.n	8003a92 <TIM_OC1_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <TIM_OC1_SetConfig+0x100>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <TIM_OC1_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <TIM_OC1_SetConfig+0x104>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_OC1_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <TIM_OC1_SetConfig+0x108>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d111      	bne.n	8003ab6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	621a      	str	r2, [r3, #32]
}
 8003ad0:	bf00      	nop
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40014000 	.word	0x40014000
 8003ae4:	40014400 	.word	0x40014400
 8003ae8:	40014800 	.word	0x40014800

08003aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f023 0210 	bic.w	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0320 	bic.w	r3, r3, #32
 8003b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a24      	ldr	r2, [pc, #144]	; (8003bdc <TIM_OC2_SetConfig+0xf0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10d      	bne.n	8003b6c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <TIM_OC2_SetConfig+0xf0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00b      	beq.n	8003b8c <TIM_OC2_SetConfig+0xa0>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a1a      	ldr	r2, [pc, #104]	; (8003be0 <TIM_OC2_SetConfig+0xf4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <TIM_OC2_SetConfig+0xa0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a19      	ldr	r2, [pc, #100]	; (8003be4 <TIM_OC2_SetConfig+0xf8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_OC2_SetConfig+0xa0>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <TIM_OC2_SetConfig+0xfc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d113      	bne.n	8003bb4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b92:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b9a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40014000 	.word	0x40014000
 8003be4:	40014400 	.word	0x40014400
 8003be8:	40014800 	.word	0x40014800

08003bec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0303 	bic.w	r3, r3, #3
 8003c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a23      	ldr	r2, [pc, #140]	; (8003cd8 <TIM_OC3_SetConfig+0xec>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10d      	bne.n	8003c6a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c68:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a1a      	ldr	r2, [pc, #104]	; (8003cd8 <TIM_OC3_SetConfig+0xec>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00b      	beq.n	8003c8a <TIM_OC3_SetConfig+0x9e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <TIM_OC3_SetConfig+0xf0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d007      	beq.n	8003c8a <TIM_OC3_SetConfig+0x9e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a18      	ldr	r2, [pc, #96]	; (8003ce0 <TIM_OC3_SetConfig+0xf4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d003      	beq.n	8003c8a <TIM_OC3_SetConfig+0x9e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a17      	ldr	r2, [pc, #92]	; (8003ce4 <TIM_OC3_SetConfig+0xf8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d113      	bne.n	8003cb2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	621a      	str	r2, [r3, #32]
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800

08003ce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	031b      	lsls	r3, r3, #12
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <TIM_OC4_SetConfig+0xb8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00b      	beq.n	8003d64 <TIM_OC4_SetConfig+0x7c>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <TIM_OC4_SetConfig+0xbc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d007      	beq.n	8003d64 <TIM_OC4_SetConfig+0x7c>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a14      	ldr	r2, [pc, #80]	; (8003da8 <TIM_OC4_SetConfig+0xc0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d003      	beq.n	8003d64 <TIM_OC4_SetConfig+0x7c>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a13      	ldr	r2, [pc, #76]	; (8003dac <TIM_OC4_SetConfig+0xc4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d109      	bne.n	8003d78 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	019b      	lsls	r3, r3, #6
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40014000 	.word	0x40014000
 8003da8:	40014400 	.word	0x40014400
 8003dac:	40014800 	.word	0x40014800

08003db0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003df4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	041b      	lsls	r3, r3, #16
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a15      	ldr	r2, [pc, #84]	; (8003e5c <TIM_OC5_SetConfig+0xac>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00b      	beq.n	8003e22 <TIM_OC5_SetConfig+0x72>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a14      	ldr	r2, [pc, #80]	; (8003e60 <TIM_OC5_SetConfig+0xb0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d007      	beq.n	8003e22 <TIM_OC5_SetConfig+0x72>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <TIM_OC5_SetConfig+0xb4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d003      	beq.n	8003e22 <TIM_OC5_SetConfig+0x72>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <TIM_OC5_SetConfig+0xb8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d109      	bne.n	8003e36 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	621a      	str	r2, [r3, #32]
}
 8003e50:	bf00      	nop
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40014400 	.word	0x40014400
 8003e68:	40014800 	.word	0x40014800

08003e6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	051b      	lsls	r3, r3, #20
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a16      	ldr	r2, [pc, #88]	; (8003f1c <TIM_OC6_SetConfig+0xb0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00b      	beq.n	8003ee0 <TIM_OC6_SetConfig+0x74>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a15      	ldr	r2, [pc, #84]	; (8003f20 <TIM_OC6_SetConfig+0xb4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d007      	beq.n	8003ee0 <TIM_OC6_SetConfig+0x74>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <TIM_OC6_SetConfig+0xb8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_OC6_SetConfig+0x74>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <TIM_OC6_SetConfig+0xbc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d109      	bne.n	8003ef4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	029b      	lsls	r3, r3, #10
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	40014000 	.word	0x40014000
 8003f24:	40014400 	.word	0x40014400
 8003f28:	40014800 	.word	0x40014800

08003f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2201      	movs	r2, #1
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	401a      	ands	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a1a      	ldr	r2, [r3, #32]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e054      	b.n	800403a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a24      	ldr	r2, [pc, #144]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d108      	bne.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003fc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a17      	ldr	r2, [pc, #92]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff8:	d009      	beq.n	800400e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a13      	ldr	r2, [pc, #76]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a11      	ldr	r2, [pc, #68]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10c      	bne.n	8004028 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004014:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	4313      	orrs	r3, r2
 800401e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40000400 	.word	0x40000400
 8004050:	40014000 	.word	0x40014000

08004054 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e040      	b.n	80040e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fc fd24 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2224      	movs	r2, #36	; 0x24
 8004080:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f82c 	bl	80040f0 <UART_SetConfig>
 8004098:	4603      	mov	r3, r0
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e022      	b.n	80040e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f956 	bl	800435c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f9dd 	bl	80044a0 <UART_CheckIdleState>
 80040e6:	4603      	mov	r3, r0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4b8a      	ldr	r3, [pc, #552]	; (8004344 <UART_SetConfig+0x254>)
 800411c:	4013      	ands	r3, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6812      	ldr	r2, [r2, #0]
 8004122:	6979      	ldr	r1, [r7, #20]
 8004124:	430b      	orrs	r3, r1
 8004126:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	430a      	orrs	r2, r1
 8004160:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a78      	ldr	r2, [pc, #480]	; (8004348 <UART_SetConfig+0x258>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d120      	bne.n	80041ae <UART_SetConfig+0xbe>
 800416c:	4b77      	ldr	r3, [pc, #476]	; (800434c <UART_SetConfig+0x25c>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	2b03      	cmp	r3, #3
 8004176:	d817      	bhi.n	80041a8 <UART_SetConfig+0xb8>
 8004178:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <UART_SetConfig+0x90>)
 800417a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417e:	bf00      	nop
 8004180:	08004191 	.word	0x08004191
 8004184:	0800419d 	.word	0x0800419d
 8004188:	080041a3 	.word	0x080041a3
 800418c:	08004197 	.word	0x08004197
 8004190:	2300      	movs	r3, #0
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e01d      	b.n	80041d2 <UART_SetConfig+0xe2>
 8004196:	2302      	movs	r3, #2
 8004198:	77fb      	strb	r3, [r7, #31]
 800419a:	e01a      	b.n	80041d2 <UART_SetConfig+0xe2>
 800419c:	2304      	movs	r3, #4
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e017      	b.n	80041d2 <UART_SetConfig+0xe2>
 80041a2:	2308      	movs	r3, #8
 80041a4:	77fb      	strb	r3, [r7, #31]
 80041a6:	e014      	b.n	80041d2 <UART_SetConfig+0xe2>
 80041a8:	2310      	movs	r3, #16
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e011      	b.n	80041d2 <UART_SetConfig+0xe2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a67      	ldr	r2, [pc, #412]	; (8004350 <UART_SetConfig+0x260>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d102      	bne.n	80041be <UART_SetConfig+0xce>
 80041b8:	2300      	movs	r3, #0
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e009      	b.n	80041d2 <UART_SetConfig+0xe2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a64      	ldr	r2, [pc, #400]	; (8004354 <UART_SetConfig+0x264>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d102      	bne.n	80041ce <UART_SetConfig+0xde>
 80041c8:	2300      	movs	r3, #0
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e001      	b.n	80041d2 <UART_SetConfig+0xe2>
 80041ce:	2310      	movs	r3, #16
 80041d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041da:	d15b      	bne.n	8004294 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80041dc:	7ffb      	ldrb	r3, [r7, #31]
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d827      	bhi.n	8004232 <UART_SetConfig+0x142>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <UART_SetConfig+0xf8>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	0800420d 	.word	0x0800420d
 80041ec:	08004215 	.word	0x08004215
 80041f0:	0800421d 	.word	0x0800421d
 80041f4:	08004233 	.word	0x08004233
 80041f8:	08004223 	.word	0x08004223
 80041fc:	08004233 	.word	0x08004233
 8004200:	08004233 	.word	0x08004233
 8004204:	08004233 	.word	0x08004233
 8004208:	0800422b 	.word	0x0800422b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800420c:	f7fe fdda 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 8004210:	61b8      	str	r0, [r7, #24]
        break;
 8004212:	e013      	b.n	800423c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004214:	f7fe fdf8 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 8004218:	61b8      	str	r0, [r7, #24]
        break;
 800421a:	e00f      	b.n	800423c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800421c:	4b4e      	ldr	r3, [pc, #312]	; (8004358 <UART_SetConfig+0x268>)
 800421e:	61bb      	str	r3, [r7, #24]
        break;
 8004220:	e00c      	b.n	800423c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004222:	f7fe fd57 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8004226:	61b8      	str	r0, [r7, #24]
        break;
 8004228:	e008      	b.n	800423c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800422e:	61bb      	str	r3, [r7, #24]
        break;
 8004230:	e004      	b.n	800423c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	77bb      	strb	r3, [r7, #30]
        break;
 800423a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d074      	beq.n	800432c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	005a      	lsls	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	085b      	lsrs	r3, r3, #1
 800424c:	441a      	add	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	fbb2 f3f3 	udiv	r3, r2, r3
 8004256:	b29b      	uxth	r3, r3
 8004258:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b0f      	cmp	r3, #15
 800425e:	d916      	bls.n	800428e <UART_SetConfig+0x19e>
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004266:	d212      	bcs.n	800428e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	b29b      	uxth	r3, r3
 800426c:	f023 030f 	bic.w	r3, r3, #15
 8004270:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	b29b      	uxth	r3, r3
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	b29a      	uxth	r2, r3
 800427e:	89fb      	ldrh	r3, [r7, #14]
 8004280:	4313      	orrs	r3, r2
 8004282:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	89fa      	ldrh	r2, [r7, #14]
 800428a:	60da      	str	r2, [r3, #12]
 800428c:	e04e      	b.n	800432c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	77bb      	strb	r3, [r7, #30]
 8004292:	e04b      	b.n	800432c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004294:	7ffb      	ldrb	r3, [r7, #31]
 8004296:	2b08      	cmp	r3, #8
 8004298:	d827      	bhi.n	80042ea <UART_SetConfig+0x1fa>
 800429a:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <UART_SetConfig+0x1b0>)
 800429c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a0:	080042c5 	.word	0x080042c5
 80042a4:	080042cd 	.word	0x080042cd
 80042a8:	080042d5 	.word	0x080042d5
 80042ac:	080042eb 	.word	0x080042eb
 80042b0:	080042db 	.word	0x080042db
 80042b4:	080042eb 	.word	0x080042eb
 80042b8:	080042eb 	.word	0x080042eb
 80042bc:	080042eb 	.word	0x080042eb
 80042c0:	080042e3 	.word	0x080042e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042c4:	f7fe fd7e 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 80042c8:	61b8      	str	r0, [r7, #24]
        break;
 80042ca:	e013      	b.n	80042f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042cc:	f7fe fd9c 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 80042d0:	61b8      	str	r0, [r7, #24]
        break;
 80042d2:	e00f      	b.n	80042f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d4:	4b20      	ldr	r3, [pc, #128]	; (8004358 <UART_SetConfig+0x268>)
 80042d6:	61bb      	str	r3, [r7, #24]
        break;
 80042d8:	e00c      	b.n	80042f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042da:	f7fe fcfb 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 80042de:	61b8      	str	r0, [r7, #24]
        break;
 80042e0:	e008      	b.n	80042f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042e6:	61bb      	str	r3, [r7, #24]
        break;
 80042e8:	e004      	b.n	80042f4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	77bb      	strb	r3, [r7, #30]
        break;
 80042f2:	bf00      	nop
    }

    if (pclk != 0U)
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d018      	beq.n	800432c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	085a      	lsrs	r2, r3, #1
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	441a      	add	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	fbb2 f3f3 	udiv	r3, r2, r3
 800430c:	b29b      	uxth	r3, r3
 800430e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b0f      	cmp	r3, #15
 8004314:	d908      	bls.n	8004328 <UART_SetConfig+0x238>
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431c:	d204      	bcs.n	8004328 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	e001      	b.n	800432c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004338:	7fbb      	ldrb	r3, [r7, #30]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3720      	adds	r7, #32
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	efff69f3 	.word	0xefff69f3
 8004348:	40013800 	.word	0x40013800
 800434c:	40021000 	.word	0x40021000
 8004350:	40004400 	.word	0x40004400
 8004354:	40004800 	.word	0x40004800
 8004358:	007a1200 	.word	0x007a1200

0800435c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01a      	beq.n	8004472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445a:	d10a      	bne.n	8004472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044b0:	f7fc fc16 	bl	8000ce0 <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d10e      	bne.n	80044e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f82d 	bl	8004532 <UART_WaitOnFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e023      	b.n	800452a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d10e      	bne.n	800450e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f817 	bl	8004532 <UART_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e00d      	b.n	800452a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b09c      	sub	sp, #112	; 0x70
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	4613      	mov	r3, r2
 8004540:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004542:	e0a5      	b.n	8004690 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	f000 80a1 	beq.w	8004690 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454e:	f7fc fbc7 	bl	8000ce0 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800455a:	429a      	cmp	r2, r3
 800455c:	d302      	bcc.n	8004564 <UART_WaitOnFlagUntilTimeout+0x32>
 800455e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004560:	2b00      	cmp	r3, #0
 8004562:	d13e      	bne.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004574:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004578:	667b      	str	r3, [r7, #100]	; 0x64
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004582:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004584:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004588:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e6      	bne.n	8004564 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3308      	adds	r3, #8
 800459c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	663b      	str	r3, [r7, #96]	; 0x60
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3308      	adds	r3, #8
 80045b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80045b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e5      	bne.n	8004596 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e067      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d04f      	beq.n	8004690 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045fe:	d147      	bne.n	8004690 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004608:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800461e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
 800462a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800462e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e6      	bne.n	800460a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3308      	adds	r3, #8
 8004642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	e853 3f00 	ldrex	r3, [r3]
 800464a:	613b      	str	r3, [r7, #16]
   return(result);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	66bb      	str	r3, [r7, #104]	; 0x68
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800465c:	623a      	str	r2, [r7, #32]
 800465e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004660:	69f9      	ldr	r1, [r7, #28]
 8004662:	6a3a      	ldr	r2, [r7, #32]
 8004664:	e841 2300 	strex	r3, r2, [r1]
 8004668:	61bb      	str	r3, [r7, #24]
   return(result);
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e5      	bne.n	800463c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e010      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4013      	ands	r3, r2
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	429a      	cmp	r2, r3
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	f43f af4a 	beq.w	8004544 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3770      	adds	r7, #112	; 0x70
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <_ZdlPvj>:
 80046ba:	f000 b800 	b.w	80046be <_ZdlPv>

080046be <_ZdlPv>:
 80046be:	f000 b825 	b.w	800470c <free>
	...

080046c4 <__libc_init_array>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	4d0d      	ldr	r5, [pc, #52]	; (80046fc <__libc_init_array+0x38>)
 80046c8:	4c0d      	ldr	r4, [pc, #52]	; (8004700 <__libc_init_array+0x3c>)
 80046ca:	1b64      	subs	r4, r4, r5
 80046cc:	10a4      	asrs	r4, r4, #2
 80046ce:	2600      	movs	r6, #0
 80046d0:	42a6      	cmp	r6, r4
 80046d2:	d109      	bne.n	80046e8 <__libc_init_array+0x24>
 80046d4:	4d0b      	ldr	r5, [pc, #44]	; (8004704 <__libc_init_array+0x40>)
 80046d6:	4c0c      	ldr	r4, [pc, #48]	; (8004708 <__libc_init_array+0x44>)
 80046d8:	f000 f882 	bl	80047e0 <_init>
 80046dc:	1b64      	subs	r4, r4, r5
 80046de:	10a4      	asrs	r4, r4, #2
 80046e0:	2600      	movs	r6, #0
 80046e2:	42a6      	cmp	r6, r4
 80046e4:	d105      	bne.n	80046f2 <__libc_init_array+0x2e>
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
 80046e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ec:	4798      	blx	r3
 80046ee:	3601      	adds	r6, #1
 80046f0:	e7ee      	b.n	80046d0 <__libc_init_array+0xc>
 80046f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f6:	4798      	blx	r3
 80046f8:	3601      	adds	r6, #1
 80046fa:	e7f2      	b.n	80046e2 <__libc_init_array+0x1e>
 80046fc:	0800484c 	.word	0x0800484c
 8004700:	0800484c 	.word	0x0800484c
 8004704:	0800484c 	.word	0x0800484c
 8004708:	08004850 	.word	0x08004850

0800470c <free>:
 800470c:	4b02      	ldr	r3, [pc, #8]	; (8004718 <free+0xc>)
 800470e:	4601      	mov	r1, r0
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	f000 b80b 	b.w	800472c <_free_r>
 8004716:	bf00      	nop
 8004718:	2000000c 	.word	0x2000000c

0800471c <memset>:
 800471c:	4402      	add	r2, r0
 800471e:	4603      	mov	r3, r0
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	f803 1b01 	strb.w	r1, [r3], #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>

0800472c <_free_r>:
 800472c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800472e:	2900      	cmp	r1, #0
 8004730:	d044      	beq.n	80047bc <_free_r+0x90>
 8004732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004736:	9001      	str	r0, [sp, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	f1a1 0404 	sub.w	r4, r1, #4
 800473e:	bfb8      	it	lt
 8004740:	18e4      	addlt	r4, r4, r3
 8004742:	f000 f83f 	bl	80047c4 <__malloc_lock>
 8004746:	4a1e      	ldr	r2, [pc, #120]	; (80047c0 <_free_r+0x94>)
 8004748:	9801      	ldr	r0, [sp, #4]
 800474a:	6813      	ldr	r3, [r2, #0]
 800474c:	b933      	cbnz	r3, 800475c <_free_r+0x30>
 800474e:	6063      	str	r3, [r4, #4]
 8004750:	6014      	str	r4, [r2, #0]
 8004752:	b003      	add	sp, #12
 8004754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004758:	f000 b83a 	b.w	80047d0 <__malloc_unlock>
 800475c:	42a3      	cmp	r3, r4
 800475e:	d908      	bls.n	8004772 <_free_r+0x46>
 8004760:	6825      	ldr	r5, [r4, #0]
 8004762:	1961      	adds	r1, r4, r5
 8004764:	428b      	cmp	r3, r1
 8004766:	bf01      	itttt	eq
 8004768:	6819      	ldreq	r1, [r3, #0]
 800476a:	685b      	ldreq	r3, [r3, #4]
 800476c:	1949      	addeq	r1, r1, r5
 800476e:	6021      	streq	r1, [r4, #0]
 8004770:	e7ed      	b.n	800474e <_free_r+0x22>
 8004772:	461a      	mov	r2, r3
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	b10b      	cbz	r3, 800477c <_free_r+0x50>
 8004778:	42a3      	cmp	r3, r4
 800477a:	d9fa      	bls.n	8004772 <_free_r+0x46>
 800477c:	6811      	ldr	r1, [r2, #0]
 800477e:	1855      	adds	r5, r2, r1
 8004780:	42a5      	cmp	r5, r4
 8004782:	d10b      	bne.n	800479c <_free_r+0x70>
 8004784:	6824      	ldr	r4, [r4, #0]
 8004786:	4421      	add	r1, r4
 8004788:	1854      	adds	r4, r2, r1
 800478a:	42a3      	cmp	r3, r4
 800478c:	6011      	str	r1, [r2, #0]
 800478e:	d1e0      	bne.n	8004752 <_free_r+0x26>
 8004790:	681c      	ldr	r4, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	6053      	str	r3, [r2, #4]
 8004796:	4421      	add	r1, r4
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	e7da      	b.n	8004752 <_free_r+0x26>
 800479c:	d902      	bls.n	80047a4 <_free_r+0x78>
 800479e:	230c      	movs	r3, #12
 80047a0:	6003      	str	r3, [r0, #0]
 80047a2:	e7d6      	b.n	8004752 <_free_r+0x26>
 80047a4:	6825      	ldr	r5, [r4, #0]
 80047a6:	1961      	adds	r1, r4, r5
 80047a8:	428b      	cmp	r3, r1
 80047aa:	bf04      	itt	eq
 80047ac:	6819      	ldreq	r1, [r3, #0]
 80047ae:	685b      	ldreq	r3, [r3, #4]
 80047b0:	6063      	str	r3, [r4, #4]
 80047b2:	bf04      	itt	eq
 80047b4:	1949      	addeq	r1, r1, r5
 80047b6:	6021      	streq	r1, [r4, #0]
 80047b8:	6054      	str	r4, [r2, #4]
 80047ba:	e7ca      	b.n	8004752 <_free_r+0x26>
 80047bc:	b003      	add	sp, #12
 80047be:	bd30      	pop	{r4, r5, pc}
 80047c0:	200001cc 	.word	0x200001cc

080047c4 <__malloc_lock>:
 80047c4:	4801      	ldr	r0, [pc, #4]	; (80047cc <__malloc_lock+0x8>)
 80047c6:	f000 b809 	b.w	80047dc <__retarget_lock_acquire_recursive>
 80047ca:	bf00      	nop
 80047cc:	200001d0 	.word	0x200001d0

080047d0 <__malloc_unlock>:
 80047d0:	4801      	ldr	r0, [pc, #4]	; (80047d8 <__malloc_unlock+0x8>)
 80047d2:	f000 b804 	b.w	80047de <__retarget_lock_release_recursive>
 80047d6:	bf00      	nop
 80047d8:	200001d0 	.word	0x200001d0

080047dc <__retarget_lock_acquire_recursive>:
 80047dc:	4770      	bx	lr

080047de <__retarget_lock_release_recursive>:
 80047de:	4770      	bx	lr

080047e0 <_init>:
 80047e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e2:	bf00      	nop
 80047e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e6:	bc08      	pop	{r3}
 80047e8:	469e      	mov	lr, r3
 80047ea:	4770      	bx	lr

080047ec <_fini>:
 80047ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ee:	bf00      	nop
 80047f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f2:	bc08      	pop	{r3}
 80047f4:	469e      	mov	lr, r3
 80047f6:	4770      	bx	lr
