
PW-2_firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000470c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004894  08004894  00014894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e8  080048e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080048e8  080048e8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048e8  080048e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048ec  080048ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000164  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001120a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000235b  00000000  00000000  000312aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00033608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d28  00000000  00000000  000343f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cdc7  00000000  00000000  00035120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c13  00000000  00000000  00051ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3f02  00000000  00000000  00062afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001069fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ca4  00000000  00000000  00106a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800487c 	.word	0x0800487c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800487c 	.word	0x0800487c

080001c8 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>:
	}else{
		return read_retval::more_message_received;
	}
}

CAN_303x8::CAN_303x8(CAN_HandleTypeDef *hcan) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	4a08      	ldr	r2, [pc, #32]	; (80001f4 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef+0x2c>)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->hcan = hcan;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	683a      	ldr	r2, [r7, #0]
 80001dc:	605a      	str	r2, [r3, #4]
	HAL_CAN_Start(this->hcan);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	685b      	ldr	r3, [r3, #4]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 fef5 	bl	8000fd2 <HAL_CAN_Start>
}
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4618      	mov	r0, r3
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	080048a8 	.word	0x080048a8

080001f8 <_ZN7stm_CAN9CAN_303x8D1Ev>:

CAN_303x8::~CAN_303x8() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	4a06      	ldr	r2, [pc, #24]	; (800021c <_ZN7stm_CAN9CAN_303x8D1Ev+0x24>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	HAL_CAN_Stop(this->hcan);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	4618      	mov	r0, r3
 800020c:	f000 ff25 	bl	800105a <HAL_CAN_Stop>
}
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4618      	mov	r0, r3
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	080048a8 	.word	0x080048a8

08000220 <_ZN7stm_CAN9CAN_303x8D0Ev>:
CAN_303x8::~CAN_303x8() {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
}
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ffe5 	bl	80001f8 <_ZN7stm_CAN9CAN_303x8D1Ev>
 800022e:	2194      	movs	r1, #148	; 0x94
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f004 fa90 	bl	8004756 <_ZdlPvj>
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4618      	mov	r0, r3
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <_ZN6ws28128NeoPixel19update_write_bufferEv>:

#include "NeoPixel.h"

namespace ws2812 {

void NeoPixel::update_write_buffer(){
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < pixel_num; i++){
 8000248:	2300      	movs	r3, #0
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	2b03      	cmp	r3, #3
 8000250:	d854      	bhi.n	80002fc <_ZN6ws28128NeoPixel19update_write_bufferEv+0xbc>
		for(uint8_t j = 0; j < color_num; j++){
 8000252:	2300      	movs	r3, #0
 8000254:	73bb      	strb	r3, [r7, #14]
 8000256:	7bbb      	ldrb	r3, [r7, #14]
 8000258:	2b02      	cmp	r3, #2
 800025a:	d84b      	bhi.n	80002f4 <_ZN6ws28128NeoPixel19update_write_bufferEv+0xb4>
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 800025c:	7bbb      	ldrb	r3, [r7, #14]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d108      	bne.n	8000274 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x34>
 8000262:	7bfa      	ldrb	r2, [r7, #15]
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	4613      	mov	r3, r2
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	4413      	add	r3, r2
 800026c:	440b      	add	r3, r1
 800026e:	3370      	adds	r3, #112	; 0x70
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	e018      	b.n	80002a6 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 8000274:	7bbb      	ldrb	r3, [r7, #14]
 8000276:	2b01      	cmp	r3, #1
 8000278:	d108      	bne.n	800028c <_ZN6ws28128NeoPixel19update_write_bufferEv+0x4c>
							: 	(j == 1) ? NeoPixel::colors[i].red
 800027a:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 800027c:	6879      	ldr	r1, [r7, #4]
 800027e:	4613      	mov	r3, r2
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	4413      	add	r3, r2
 8000284:	440b      	add	r3, r1
 8000286:	336f      	adds	r3, #111	; 0x6f
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	e00c      	b.n	80002a6 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 800028c:	7bbb      	ldrb	r3, [r7, #14]
 800028e:	2b02      	cmp	r3, #2
 8000290:	d108      	bne.n	80002a4 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x64>
							: 	(j == 2) ? NeoPixel::colors[i].blue : 0;
 8000292:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	4613      	mov	r3, r2
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	4413      	add	r3, r2
 800029c:	440b      	add	r3, r1
 800029e:	3371      	adds	r3, #113	; 0x71
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	e000      	b.n	80002a6 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 80002a4:	2300      	movs	r3, #0
 80002a6:	733b      	strb	r3, [r7, #12]
			for(uint8_t k = 0; k < byte; k++){
 80002a8:	2300      	movs	r3, #0
 80002aa:	737b      	strb	r3, [r7, #13]
 80002ac:	7b7b      	ldrb	r3, [r7, #13]
 80002ae:	2b07      	cmp	r3, #7
 80002b0:	d81c      	bhi.n	80002ec <_ZN6ws28128NeoPixel19update_write_bufferEv+0xac>
				NeoPixel::write_buffer[(i * color_num + j) * byte + k] = ((color & (0x80 >> k)) > 0) ? NeoPixel::high : NeoPixel::low;
 80002b2:	7b3a      	ldrb	r2, [r7, #12]
 80002b4:	7b7b      	ldrb	r3, [r7, #13]
 80002b6:	2180      	movs	r1, #128	; 0x80
 80002b8:	fa41 f303 	asr.w	r3, r1, r3
 80002bc:	4013      	ands	r3, r2
 80002be:	2b00      	cmp	r3, #0
 80002c0:	dd02      	ble.n	80002c8 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x88>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	7b1a      	ldrb	r2, [r3, #12]
 80002c6:	e001      	b.n	80002cc <_ZN6ws28128NeoPixel19update_write_bufferEv+0x8c>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7b5a      	ldrb	r2, [r3, #13]
 80002cc:	7bf9      	ldrb	r1, [r7, #15]
 80002ce:	460b      	mov	r3, r1
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	4419      	add	r1, r3
 80002d4:	7bbb      	ldrb	r3, [r7, #14]
 80002d6:	440b      	add	r3, r1
 80002d8:	00d9      	lsls	r1, r3, #3
 80002da:	7b7b      	ldrb	r3, [r7, #13]
 80002dc:	440b      	add	r3, r1
 80002de:	6879      	ldr	r1, [r7, #4]
 80002e0:	440b      	add	r3, r1
 80002e2:	739a      	strb	r2, [r3, #14]
			for(uint8_t k = 0; k < byte; k++){
 80002e4:	7b7b      	ldrb	r3, [r7, #13]
 80002e6:	3301      	adds	r3, #1
 80002e8:	737b      	strb	r3, [r7, #13]
 80002ea:	e7df      	b.n	80002ac <_ZN6ws28128NeoPixel19update_write_bufferEv+0x6c>
		for(uint8_t j = 0; j < color_num; j++){
 80002ec:	7bbb      	ldrb	r3, [r7, #14]
 80002ee:	3301      	adds	r3, #1
 80002f0:	73bb      	strb	r3, [r7, #14]
 80002f2:	e7b0      	b.n	8000256 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x16>
	for(uint8_t i = 0; i < pixel_num; i++){
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	3301      	adds	r3, #1
 80002f8:	73fb      	strb	r3, [r7, #15]
 80002fa:	e7a7      	b.n	800024c <_ZN6ws28128NeoPixel19update_write_bufferEv+0xc>
			}
		}
	}
	NeoPixel::write_buffer[data_len] = 0;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <_ZN6ws28128NeoPixel4rendEv>:

void NeoPixel::rend(){
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	update_write_buffer();
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f7ff ff91 	bl	8000240 <_ZN6ws28128NeoPixel19update_write_bufferEv>
	if(NeoPixel::hdma->State != HAL_DMA_STATE_READY) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000326:	2b01      	cmp	r3, #1
 8000328:	d007      	beq.n	800033a <_ZN6ws28128NeoPixel4rendEv+0x2a>
    	HAL_TIM_PWM_Stop_DMA(NeoPixel::htim, NeoPixel::Channel);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	4619      	mov	r1, r3
 8000334:	4610      	mov	r0, r2
 8000336:	f003 f835 	bl	80033a4 <HAL_TIM_PWM_Stop_DMA>
//		 return;
  	}
	HAL_TIM_PWM_Start_DMA(NeoPixel::htim, NeoPixel::Channel, (uint32_t*)NeoPixel::write_buffer, data_len + reset_bit);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	6818      	ldr	r0, [r3, #0]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	6859      	ldr	r1, [r3, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f103 020e 	add.w	r2, r3, #14
 8000348:	2361      	movs	r3, #97	; 0x61
 800034a:	f002 fe25 	bl	8002f98 <HAL_TIM_PWM_Start_DMA>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>:

NeoPixel::NeoPixel(TIM_HandleTypeDef *htim, uint32_t Channel, DMA_HandleTypeDef *hdma, uint8_t high_level_pulse_len, uint8_t low_level_pulse_len) {
 8000356:	b480      	push	{r7}
 8000358:	b085      	sub	sp, #20
 800035a:	af00      	add	r7, sp, #0
 800035c:	60f8      	str	r0, [r7, #12]
 800035e:	60b9      	str	r1, [r7, #8]
 8000360:	607a      	str	r2, [r7, #4]
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	336f      	adds	r3, #111	; 0x6f
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
	// TODO Auto-generated constructor stub
	NeoPixel::htim = htim;
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	601a      	str	r2, [r3, #0]
	NeoPixel::Channel = Channel;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	605a      	str	r2, [r3, #4]
	NeoPixel::hdma = hdma;
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	609a      	str	r2, [r3, #8]
	NeoPixel::high = high_level_pulse_len;
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	7e3a      	ldrb	r2, [r7, #24]
 8000386:	731a      	strb	r2, [r3, #12]
	NeoPixel::low = low_level_pulse_len;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	7f3a      	ldrb	r2, [r7, #28]
 800038c:	735a      	strb	r2, [r3, #13]
}
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b590      	push	{r4, r7, lr}
 800039e:	b0cf      	sub	sp, #316	; 0x13c
 80003a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a2:	f000 fc91 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a6:	f000 f911 	bl	80005cc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003aa:	f000 fa55 	bl	8000858 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80003ae:	f000 fa35 	bl	800081c <_ZL11MX_DMA_Initv>
  MX_CAN_Init();
 80003b2:	f000 f95b 	bl	800066c <_ZL11MX_CAN_Initv>
  MX_TIM3_Init();
 80003b6:	f000 f995 	bl	80006e4 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 80003ba:	f000 f9fb 	bl	80007b4 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  stm_CAN::CAN_303x8 can(&hcan);
 80003be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80003c2:	497b      	ldr	r1, [pc, #492]	; (80005b0 <main+0x214>)
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff feff 	bl	80001c8 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>
  ws2812::NeoPixel pixels(&htim3, TIM_CHANNEL_4, &hdma_tim3_ch4_up, 45, 22);
 80003ca:	f107 0014 	add.w	r0, r7, #20
 80003ce:	2316      	movs	r3, #22
 80003d0:	9301      	str	r3, [sp, #4]
 80003d2:	232d      	movs	r3, #45	; 0x2d
 80003d4:	9300      	str	r3, [sp, #0]
 80003d6:	4b77      	ldr	r3, [pc, #476]	; (80005b4 <main+0x218>)
 80003d8:	220c      	movs	r2, #12
 80003da:	4977      	ldr	r1, [pc, #476]	; (80005b8 <main+0x21c>)
 80003dc:	f7ff ffbb 	bl	8000356 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>

  const ws2812::color _orenge = {48, 24, 0};
 80003e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80003e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80003e8:	4a74      	ldr	r2, [pc, #464]	; (80005bc <main+0x220>)
 80003ea:	6812      	ldr	r2, [r2, #0]
 80003ec:	4611      	mov	r1, r2
 80003ee:	8019      	strh	r1, [r3, #0]
 80003f0:	3302      	adds	r3, #2
 80003f2:	0c12      	lsrs	r2, r2, #16
 80003f4:	701a      	strb	r2, [r3, #0]
  const ws2812::color _blue = {0, 48, 128};
 80003f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80003fa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80003fe:	4a70      	ldr	r2, [pc, #448]	; (80005c0 <main+0x224>)
 8000400:	6812      	ldr	r2, [r2, #0]
 8000402:	4611      	mov	r1, r2
 8000404:	8019      	strh	r1, [r3, #0]
 8000406:	3302      	adds	r3, #2
 8000408:	0c12      	lsrs	r2, r2, #16
 800040a:	701a      	strb	r2, [r3, #0]
  const ws2812::color _green = {0, 48, 0};
 800040c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000410:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800041c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000420:	2230      	movs	r2, #48	; 0x30
 8000422:	705a      	strb	r2, [r3, #1]
 8000424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000428:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800042c:	2200      	movs	r2, #0
 800042e:	709a      	strb	r2, [r3, #2]
  const ws2812::color _purple = {24, 0, 72};
  const ws2812::color _white = {12, 16, 32};
 8000430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000434:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000438:	4a62      	ldr	r2, [pc, #392]	; (80005c4 <main+0x228>)
 800043a:	6812      	ldr	r2, [r2, #0]
 800043c:	4611      	mov	r1, r2
 800043e:	8019      	strh	r1, [r3, #0]
 8000440:	3302      	adds	r3, #2
 8000442:	0c12      	lsrs	r2, r2, #16
 8000444:	701a      	strb	r2, [r3, #0]
  const ws2812::color _full = {255, 255, 255};

  HAL_GPIO_WritePin(IM920_RESET_GPIO_Port, IM920_RESET_Pin, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	f44f 7180 	mov.w	r1, #256	; 0x100
 800044c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000450:	f001 fabc 	bl	80019cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IM920_IO10_GPIO_Port, IM920_IO10_Pin, GPIO_PIN_SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2180      	movs	r1, #128	; 0x80
 8000458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045c:	f001 fab6 	bl	80019cc <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000460:	200a      	movs	r0, #10
 8000462:	f000 fc97 	bl	8000d94 <HAL_Delay>
  HAL_GPIO_WritePin(IM920_RESET_GPIO_Port, IM920_RESET_Pin, GPIO_PIN_SET);
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000470:	f001 faac 	bl	80019cc <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint8_t switches =
      HAL_GPIO_ReadPin(sw1_GPIO_Port, sw1_Pin) |
 8000474:	2110      	movs	r1, #16
 8000476:	4854      	ldr	r0, [pc, #336]	; (80005c8 <main+0x22c>)
 8000478:	f001 fa90 	bl	800199c <HAL_GPIO_ReadPin>
 800047c:	4603      	mov	r3, r0
 800047e:	b25c      	sxtb	r4, r3
      (HAL_GPIO_ReadPin(sw4_GPIO_Port, sw4_Pin) << 1) |
 8000480:	2180      	movs	r1, #128	; 0x80
 8000482:	4851      	ldr	r0, [pc, #324]	; (80005c8 <main+0x22c>)
 8000484:	f001 fa8a 	bl	800199c <HAL_GPIO_ReadPin>
 8000488:	4603      	mov	r3, r0
 800048a:	005b      	lsls	r3, r3, #1
      HAL_GPIO_ReadPin(sw1_GPIO_Port, sw1_Pin) |
 800048c:	b25b      	sxtb	r3, r3
 800048e:	4323      	orrs	r3, r4
 8000490:	b25c      	sxtb	r4, r3
      (HAL_GPIO_ReadPin(sw3_GPIO_Port, sw3_Pin) << 2) |
 8000492:	2140      	movs	r1, #64	; 0x40
 8000494:	484c      	ldr	r0, [pc, #304]	; (80005c8 <main+0x22c>)
 8000496:	f001 fa81 	bl	800199c <HAL_GPIO_ReadPin>
 800049a:	4603      	mov	r3, r0
 800049c:	009b      	lsls	r3, r3, #2
      (HAL_GPIO_ReadPin(sw4_GPIO_Port, sw4_Pin) << 1) |
 800049e:	b25b      	sxtb	r3, r3
 80004a0:	4323      	orrs	r3, r4
 80004a2:	b25c      	sxtb	r4, r3
      (HAL_GPIO_ReadPin(IM920_IO1_GPIO_Port, IM920_IO1_Pin) << 3);
 80004a4:	2101      	movs	r1, #1
 80004a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004aa:	f001 fa77 	bl	800199c <HAL_GPIO_ReadPin>
 80004ae:	4603      	mov	r3, r0
 80004b0:	00db      	lsls	r3, r3, #3
      (HAL_GPIO_ReadPin(sw3_GPIO_Port, sw3_Pin) << 2) |
 80004b2:	b25b      	sxtb	r3, r3
 80004b4:	4323      	orrs	r3, r4
 80004b6:	b25b      	sxtb	r3, r3
      (HAL_GPIO_ReadPin(IM920_IO1_GPIO_Port, IM920_IO1_Pin) << 3);
 80004b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    HAL_GPIO_WritePin(breaker_GPIO_Port, breaker_Pin, !switches ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d101      	bne.n	80004c8 <main+0x12c>
 80004c4:	2301      	movs	r3, #1
 80004c6:	e000      	b.n	80004ca <main+0x12e>
 80004c8:	2300      	movs	r3, #0
 80004ca:	461a      	mov	r2, r3
 80004cc:	2101      	movs	r1, #1
 80004ce:	483e      	ldr	r0, [pc, #248]	; (80005c8 <main+0x22c>)
 80004d0:	f001 fa7c 	bl	80019cc <HAL_GPIO_WritePin>

    if(!switches){
 80004d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d120      	bne.n	800051e <main+0x182>
      for(int i = 0; i < 45; i++){
 80004dc:	2300      	movs	r3, #0
 80004de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80004e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80004e6:	2b2c      	cmp	r3, #44	; 0x2c
 80004e8:	dc59      	bgt.n	800059e <main+0x202>
        pixels.colors[i] = _blue;
 80004ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80004ee:	f5a3 718e 	sub.w	r1, r3, #284	; 0x11c
 80004f2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80004f6:	4613      	mov	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4413      	add	r3, r2
 80004fc:	440b      	add	r3, r1
 80004fe:	3368      	adds	r3, #104	; 0x68
 8000500:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8000504:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8000508:	3307      	adds	r3, #7
 800050a:	8811      	ldrh	r1, [r2, #0]
 800050c:	7892      	ldrb	r2, [r2, #2]
 800050e:	8019      	strh	r1, [r3, #0]
 8000510:	709a      	strb	r2, [r3, #2]
      for(int i = 0; i < 45; i++){
 8000512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000516:	3301      	adds	r3, #1
 8000518:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800051c:	e7e1      	b.n	80004e2 <main+0x146>
      }
    }else{
      for(int i = 0; i < 4; i++){
 800051e:	2300      	movs	r3, #0
 8000520:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000524:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000528:	2b03      	cmp	r3, #3
 800052a:	dc38      	bgt.n	800059e <main+0x202>
        if(switches & (1 << i)){
 800052c:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8000530:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000534:	fa42 f303 	asr.w	r3, r2, r3
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	2b00      	cmp	r3, #0
 800053e:	d014      	beq.n	800056a <main+0x1ce>
          pixels.colors[i] = _orenge;
 8000540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000544:	f5a3 718e 	sub.w	r1, r3, #284	; 0x11c
 8000548:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800054c:	4613      	mov	r3, r2
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	4413      	add	r3, r2
 8000552:	440b      	add	r3, r1
 8000554:	3368      	adds	r3, #104	; 0x68
 8000556:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800055a:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800055e:	3307      	adds	r3, #7
 8000560:	8811      	ldrh	r1, [r2, #0]
 8000562:	7892      	ldrb	r2, [r2, #2]
 8000564:	8019      	strh	r1, [r3, #0]
 8000566:	709a      	strb	r2, [r3, #2]
 8000568:	e013      	b.n	8000592 <main+0x1f6>
        }else{
          pixels.colors[i] = _white;
 800056a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800056e:	f5a3 718e 	sub.w	r1, r3, #284	; 0x11c
 8000572:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000576:	4613      	mov	r3, r2
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	4413      	add	r3, r2
 800057c:	440b      	add	r3, r1
 800057e:	3368      	adds	r3, #104	; 0x68
 8000580:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8000584:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8000588:	3307      	adds	r3, #7
 800058a:	8811      	ldrh	r1, [r2, #0]
 800058c:	7892      	ldrb	r2, [r2, #2]
 800058e:	8019      	strh	r1, [r3, #0]
 8000590:	709a      	strb	r2, [r3, #2]
      for(int i = 0; i < 4; i++){
 8000592:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000596:	3301      	adds	r3, #1
 8000598:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800059c:	e7c2      	b.n	8000524 <main+0x188>
        }
      }
    }
    pixels.rend();
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff feb4 	bl	8000310 <_ZN6ws28128NeoPixel4rendEv>

    HAL_Delay(1);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 fbf3 	bl	8000d94 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80005ae:	e761      	b.n	8000474 <main+0xd8>
 80005b0:	2000008c 	.word	0x2000008c
 80005b4:	20000100 	.word	0x20000100
 80005b8:	200000b4 	.word	0x200000b4
 80005bc:	08004894 	.word	0x08004894
 80005c0:	08004898 	.word	0x08004898
 80005c4:	0800489c 	.word	0x0800489c
 80005c8:	48000400 	.word	0x48000400

080005cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b090      	sub	sp, #64	; 0x40
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	2228      	movs	r2, #40	; 0x28
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 f8ec 	bl	80047b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800060a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0318 	add.w	r3, r7, #24
 8000614:	4618      	mov	r0, r3
 8000616:	f001 f9f1 	bl	80019fc <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf14      	ite	ne
 8000620:	2301      	movne	r3, #1
 8000622:	2300      	moveq	r3, #0
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800062a:	f000 f9a3 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2102      	movs	r1, #2
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fa15 	bl	8002a78 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	bf14      	ite	ne
 8000654:	2301      	movne	r3, #1
 8000656:	2300      	moveq	r3, #0
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800065e:	f000 f989 	bl	8000974 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3740      	adds	r7, #64	; 0x40
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <_ZL11MX_CAN_Initv+0x70>)
 8000672:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <_ZL11MX_CAN_Initv+0x74>)
 8000674:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <_ZL11MX_CAN_Initv+0x70>)
 8000678:	2202      	movs	r2, #2
 800067a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <_ZL11MX_CAN_Initv+0x70>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <_ZL11MX_CAN_Initv+0x70>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <_ZL11MX_CAN_Initv+0x70>)
 800068a:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800068e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <_ZL11MX_CAN_Initv+0x70>)
 8000692:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000696:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <_ZL11MX_CAN_Initv+0x70>)
 800069a:	2200      	movs	r2, #0
 800069c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <_ZL11MX_CAN_Initv+0x70>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <_ZL11MX_CAN_Initv+0x70>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <_ZL11MX_CAN_Initv+0x70>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <_ZL11MX_CAN_Initv+0x70>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <_ZL11MX_CAN_Initv+0x70>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006bc:	4807      	ldr	r0, [pc, #28]	; (80006dc <_ZL11MX_CAN_Initv+0x70>)
 80006be:	f000 fb8d 	bl	8000ddc <HAL_CAN_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	bf14      	ite	ne
 80006c8:	2301      	movne	r3, #1
 80006ca:	2300      	moveq	r3, #0
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 80006d2:	f000 f94f 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	40006400 	.word	0x40006400

080006e4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
 8000704:	615a      	str	r2, [r3, #20]
 8000706:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000708:	4b28      	ldr	r3, [pc, #160]	; (80007ac <_ZL12MX_TIM3_Initv+0xc8>)
 800070a:	4a29      	ldr	r2, [pc, #164]	; (80007b0 <_ZL12MX_TIM3_Initv+0xcc>)
 800070c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800070e:	4b27      	ldr	r3, [pc, #156]	; (80007ac <_ZL12MX_TIM3_Initv+0xc8>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <_ZL12MX_TIM3_Initv+0xc8>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <_ZL12MX_TIM3_Initv+0xc8>)
 800071c:	2259      	movs	r2, #89	; 0x59
 800071e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <_ZL12MX_TIM3_Initv+0xc8>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <_ZL12MX_TIM3_Initv+0xc8>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800072c:	481f      	ldr	r0, [pc, #124]	; (80007ac <_ZL12MX_TIM3_Initv+0xc8>)
 800072e:	f002 fbdb 	bl	8002ee8 <HAL_TIM_PWM_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	bf14      	ite	ne
 8000738:	2301      	movne	r3, #1
 800073a:	2300      	moveq	r3, #0
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8000742:	f000 f917 	bl	8000974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4815      	ldr	r0, [pc, #84]	; (80007ac <_ZL12MX_TIM3_Initv+0xc8>)
 8000756:	f003 fc5d 	bl	8004014 <HAL_TIMEx_MasterConfigSynchronization>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 800076a:	f000 f903 	bl	8000974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076e:	2360      	movs	r3, #96	; 0x60
 8000770:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	220c      	movs	r2, #12
 8000782:	4619      	mov	r1, r3
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <_ZL12MX_TIM3_Initv+0xc8>)
 8000786:	f002 fefd 	bl	8003584 <HAL_TIM_PWM_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	bf14      	ite	ne
 8000790:	2301      	movne	r3, #1
 8000792:	2300      	moveq	r3, #0
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800079a:	f000 f8eb 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800079e:	4803      	ldr	r0, [pc, #12]	; (80007ac <_ZL12MX_TIM3_Initv+0xc8>)
 80007a0:	f000 f9a6 	bl	8000af0 <HAL_TIM_MspPostInit>

}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000b4 	.word	0x200000b4
 80007b0:	40000400 	.word	0x40000400

080007b4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <_ZL19MX_USART2_UART_Initv+0x64>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007c0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80007c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4807      	ldr	r0, [pc, #28]	; (8000814 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007f8:	f003 fc7a 	bl	80040f0 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf14      	ite	ne
 8000802:	2301      	movne	r3, #1
 8000804:	2300      	moveq	r3, #0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 800080c:	f000 f8b2 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000144 	.word	0x20000144
 8000818:	40004400 	.word	0x40004400

0800081c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <_ZL11MX_DMA_Initv+0x38>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <_ZL11MX_DMA_Initv+0x38>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <_ZL11MX_DMA_Initv+0x38>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	200d      	movs	r0, #13
 8000840:	f000 fd2f 	bl	80012a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000844:	200d      	movs	r0, #13
 8000846:	f000 fd48 	bl	80012da <HAL_NVIC_EnableIRQ>

}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086e:	4b3f      	ldr	r3, [pc, #252]	; (800096c <_ZL12MX_GPIO_Initv+0x114>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a3e      	ldr	r2, [pc, #248]	; (800096c <_ZL12MX_GPIO_Initv+0x114>)
 8000874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <_ZL12MX_GPIO_Initv+0x114>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b39      	ldr	r3, [pc, #228]	; (800096c <_ZL12MX_GPIO_Initv+0x114>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a38      	ldr	r2, [pc, #224]	; (800096c <_ZL12MX_GPIO_Initv+0x114>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b36      	ldr	r3, [pc, #216]	; (800096c <_ZL12MX_GPIO_Initv+0x114>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b33      	ldr	r3, [pc, #204]	; (800096c <_ZL12MX_GPIO_Initv+0x114>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a32      	ldr	r2, [pc, #200]	; (800096c <_ZL12MX_GPIO_Initv+0x114>)
 80008a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b30      	ldr	r3, [pc, #192]	; (800096c <_ZL12MX_GPIO_Initv+0x114>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IM920_IO10_GPIO_Port, IM920_IO10_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f001 f885 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(breaker_GPIO_Port, breaker_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2101      	movs	r1, #1
 80008c6:	482a      	ldr	r0, [pc, #168]	; (8000970 <_ZL12MX_GPIO_Initv+0x118>)
 80008c8:	f001 f880 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IM920_RESET_GPIO_Port, IM920_RESET_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d6:	f001 f879 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IM920_IO1_Pin IM920_IO2_Pin IM920_IO3_Pin IM920_IO4_Pin
                           IM920_IO5_Pin IM920_IO8_Pin IM920_IO6_Pin IM920_IO7_Pin */
  GPIO_InitStruct.Pin = IM920_IO1_Pin|IM920_IO2_Pin|IM920_IO3_Pin|IM920_IO4_Pin
 80008da:	f240 637b 	movw	r3, #1659	; 0x67b
 80008de:	60fb      	str	r3, [r7, #12]
                          |IM920_IO5_Pin|IM920_IO8_Pin|IM920_IO6_Pin|IM920_IO7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4619      	mov	r1, r3
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f000 fee1 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IM920_IO10_Pin IM920_RESET_Pin */
  GPIO_InitStruct.Pin = IM920_IO10_Pin|IM920_RESET_Pin;
 80008f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4619      	mov	r1, r3
 800090e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000912:	f000 fed1 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : breaker_Pin */
  GPIO_InitStruct.Pin = breaker_Pin;
 8000916:	2301      	movs	r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(breaker_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	4810      	ldr	r0, [pc, #64]	; (8000970 <_ZL12MX_GPIO_Initv+0x118>)
 800092e:	f000 fec3 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS_RMTKL_Pin */
  GPIO_InitStruct.Pin = DS_RMTKL_Pin;
 8000932:	2308      	movs	r3, #8
 8000934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DS_RMTKL_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	4619      	mov	r1, r3
 8000944:	480a      	ldr	r0, [pc, #40]	; (8000970 <_ZL12MX_GPIO_Initv+0x118>)
 8000946:	f000 feb7 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : sw1_Pin sw2_Pin sw3_Pin sw4_Pin */
  GPIO_InitStruct.Pin = sw1_Pin|sw2_Pin|sw3_Pin|sw4_Pin;
 800094a:	23f0      	movs	r3, #240	; 0xf0
 800094c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000952:	2301      	movs	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	4619      	mov	r1, r3
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <_ZL12MX_GPIO_Initv+0x118>)
 800095e:	f000 feab 	bl	80016b8 <HAL_GPIO_Init>

}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	48000400 	.word	0x48000400

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_MspInit+0x44>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_MspInit+0x44>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6193      	str	r3, [r2, #24]
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_MspInit+0x44>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x44>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x44>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x44>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <HAL_CAN_MspInit+0x80>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d129      	bne.n	8000a3e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_CAN_MspInit+0x84>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_CAN_MspInit+0x84>)
 80009f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f4:	61d3      	str	r3, [r2, #28]
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_CAN_MspInit+0x84>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_CAN_MspInit+0x84>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <HAL_CAN_MspInit+0x84>)
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	6153      	str	r3, [r2, #20]
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_CAN_MspInit+0x84>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000a2c:	2309      	movs	r3, #9
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f000 fe3d 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40006400 	.word	0x40006400
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a20      	ldr	r2, [pc, #128]	; (8000ae0 <HAL_TIM_PWM_MspInit+0x90>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d139      	bne.n	8000ad6 <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <HAL_TIM_PWM_MspInit+0x94>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a1f      	ldr	r2, [pc, #124]	; (8000ae4 <HAL_TIM_PWM_MspInit+0x94>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <HAL_TIM_PWM_MspInit+0x94>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <HAL_TIM_PWM_MspInit+0x98>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <HAL_TIM_PWM_MspInit+0x9c>)
 8000a7e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_TIM_PWM_MspInit+0x98>)
 8000a82:	2210      	movs	r2, #16
 8000a84:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_TIM_PWM_MspInit+0x98>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_TIM_PWM_MspInit+0x98>)
 8000a8e:	2280      	movs	r2, #128	; 0x80
 8000a90:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_TIM_PWM_MspInit+0x98>)
 8000a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a98:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <HAL_TIM_PWM_MspInit+0x98>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_TIM_PWM_MspInit+0x98>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_TIM_PWM_MspInit+0x98>)
 8000aa8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000aac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000aae:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <HAL_TIM_PWM_MspInit+0x98>)
 8000ab0:	f000 fc2d 	bl	800130e <HAL_DMA_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8000aba:	f7ff ff5b 	bl	8000974 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <HAL_TIM_PWM_MspInit+0x98>)
 8000ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ac4:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_TIM_PWM_MspInit+0x98>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <HAL_TIM_PWM_MspInit+0x98>)
 8000ace:	621a      	str	r2, [r3, #32]
 8000ad0:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <HAL_TIM_PWM_MspInit+0x98>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40000400 	.word	0x40000400
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	20000100 	.word	0x20000100
 8000aec:	40020030 	.word	0x40020030

08000af0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_TIM_MspPostInit+0x64>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d11b      	bne.n	8000b4a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_TIM_MspPostInit+0x68>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <HAL_TIM_MspPostInit+0x68>)
 8000b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b1c:	6153      	str	r3, [r2, #20]
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_TIM_MspPostInit+0x68>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <HAL_TIM_MspPostInit+0x6c>)
 8000b46:	f000 fdb7 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40000400 	.word	0x40000400
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48000400 	.word	0x48000400

08000b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a18      	ldr	r2, [pc, #96]	; (8000be0 <HAL_UART_MspInit+0x80>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d129      	bne.n	8000bd6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_UART_MspInit+0x84>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <HAL_UART_MspInit+0x84>)
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	61d3      	str	r3, [r2, #28]
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_UART_MspInit+0x84>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_UART_MspInit+0x84>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4a11      	ldr	r2, [pc, #68]	; (8000be4 <HAL_UART_MspInit+0x84>)
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	6153      	str	r3, [r2, #20]
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_UART_MspInit+0x84>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000bb2:	f248 0304 	movw	r3, #32772	; 0x8004
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd2:	f000 fd71 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40004400 	.word	0x40004400
 8000be4:	40021000 	.word	0x40021000

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 f88e 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <DMA1_Channel3_IRQHandler+0x10>)
 8000c42:	f000 fc48 	bl	80014d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000100 	.word	0x20000100

08000c50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7a:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <LoopForever+0xe>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c90:	4c0b      	ldr	r4, [pc, #44]	; (8000cc0 <LoopForever+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c9e:	f7ff ffd7 	bl	8000c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f003 fd5d 	bl	8004760 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ca6:	f7ff fb79 	bl	800039c <main>

08000caa <LoopForever>:

LoopForever:
    b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cac:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cb8:	080048f0 	.word	0x080048f0
  ldr r2, =_sbss
 8000cbc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cc0:	200001d4 	.word	0x200001d4

08000cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC1_2_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x28>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x28>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 fad7 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	200f      	movs	r0, #15
 8000ce0:	f000 f808 	bl	8000cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff fe4c 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x54>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x58>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 faef 	bl	80012f6 <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00e      	b.n	8000d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d80a      	bhi.n	8000d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f000 fab7 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <HAL_InitTick+0x5c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000004 	.word	0x20000004

08000d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	200001c8 	.word	0x200001c8

08000d7c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200001c8 	.word	0x200001c8

08000d94 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d9c:	f7ff ffee 	bl	8000d7c <HAL_GetTick>
 8000da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dac:	d005      	beq.n	8000dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_Delay+0x44>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dba:	bf00      	nop
 8000dbc:	f7ff ffde 	bl	8000d7c <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d8f7      	bhi.n	8000dbc <HAL_Delay+0x28>
  {
  }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008

08000ddc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e0ed      	b.n	8000fca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d102      	bne.n	8000e00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fde4 	bl	80009c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e10:	f7ff ffb4 	bl	8000d7c <HAL_GetTick>
 8000e14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e16:	e012      	b.n	8000e3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e18:	f7ff ffb0 	bl	8000d7c <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b0a      	cmp	r3, #10
 8000e24:	d90b      	bls.n	8000e3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2205      	movs	r2, #5
 8000e36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e0c5      	b.n	8000fca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0e5      	beq.n	8000e18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0202 	bic.w	r2, r2, #2
 8000e5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e5c:	f7ff ff8e 	bl	8000d7c <HAL_GetTick>
 8000e60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e62:	e012      	b.n	8000e8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e64:	f7ff ff8a 	bl	8000d7c <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b0a      	cmp	r3, #10
 8000e70:	d90b      	bls.n	8000e8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2205      	movs	r2, #5
 8000e82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e09f      	b.n	8000fca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e5      	bne.n	8000e64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7e1b      	ldrb	r3, [r3, #24]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d108      	bne.n	8000eb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e007      	b.n	8000ec2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7e5b      	ldrb	r3, [r3, #25]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d108      	bne.n	8000edc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e007      	b.n	8000eec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7e9b      	ldrb	r3, [r3, #26]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d108      	bne.n	8000f06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0220 	orr.w	r2, r2, #32
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e007      	b.n	8000f16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0220 	bic.w	r2, r2, #32
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7edb      	ldrb	r3, [r3, #27]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d108      	bne.n	8000f30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0210 	bic.w	r2, r2, #16
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	e007      	b.n	8000f40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0210 	orr.w	r2, r2, #16
 8000f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7f1b      	ldrb	r3, [r3, #28]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d108      	bne.n	8000f5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0208 	orr.w	r2, r2, #8
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e007      	b.n	8000f6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0208 	bic.w	r2, r2, #8
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7f5b      	ldrb	r3, [r3, #29]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d108      	bne.n	8000f84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0204 	orr.w	r2, r2, #4
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	e007      	b.n	8000f94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0204 	bic.w	r2, r2, #4
 8000f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	ea42 0103 	orr.w	r1, r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	1e5a      	subs	r2, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d12e      	bne.n	8001044 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0201 	bic.w	r2, r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ffe:	f7ff febd 	bl	8000d7c <HAL_GetTick>
 8001002:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001004:	e012      	b.n	800102c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001006:	f7ff feb9 	bl	8000d7c <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b0a      	cmp	r3, #10
 8001012:	d90b      	bls.n	800102c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2205      	movs	r2, #5
 8001024:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e012      	b.n	8001052 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1e5      	bne.n	8001006 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	e006      	b.n	8001052 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
  }
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d133      	bne.n	80010d6 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f042 0201 	orr.w	r2, r2, #1
 800107c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800107e:	f7ff fe7d 	bl	8000d7c <HAL_GetTick>
 8001082:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001084:	e012      	b.n	80010ac <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001086:	f7ff fe79 	bl	8000d7c <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b0a      	cmp	r3, #10
 8001092:	d90b      	bls.n	80010ac <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2205      	movs	r2, #5
 80010a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e01b      	b.n	80010e4 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0e5      	beq.n	8001086 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0202 	bic.w	r2, r2, #2
 80010c8:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e006      	b.n	80010e4 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
  }
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	; (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff29 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff3e 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff8e 	bl	80011e0 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5d 	bl	800118c <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff31 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffa2 	bl	8001248 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e037      	b.n	8001394 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2202      	movs	r2, #2
 8001328:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800133a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800133e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001348:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001354:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001360:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f97e 	bl	8001678 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}  
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_DMA_Start_IT+0x20>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e04a      	b.n	8001452 <HAL_DMA_Start_IT+0xb6>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d13a      	bne.n	8001444 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2202      	movs	r2, #2
 80013d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0201 	bic.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f000 f912 	bl	800161c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d008      	beq.n	8001412 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 020e 	orr.w	r2, r2, #14
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e00f      	b.n	8001432 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 020a 	orr.w	r2, r2, #10
 8001420:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0204 	bic.w	r2, r2, #4
 8001430:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 0201 	orr.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e005      	b.n	8001450 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800144c:	2302      	movs	r3, #2
 800144e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001450:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800146c:	2b02      	cmp	r3, #2
 800146e:	d005      	beq.n	800147c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2204      	movs	r2, #4
 8001474:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	73fb      	strb	r3, [r7, #15]
 800147a:	e027      	b.n	80014cc <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 020e 	bic.w	r2, r2, #14
 800148a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a4:	2101      	movs	r1, #1
 80014a6:	fa01 f202 	lsl.w	r2, r1, r2
 80014aa:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	4798      	blx	r3
    } 
  }
  return status;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	2204      	movs	r2, #4
 80014f4:	409a      	lsls	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d024      	beq.n	8001548 <HAL_DMA_IRQHandler+0x72>
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	d01f      	beq.n	8001548 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	2b00      	cmp	r3, #0
 8001514:	d107      	bne.n	8001526 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0204 	bic.w	r2, r2, #4
 8001524:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152e:	2104      	movs	r1, #4
 8001530:	fa01 f202 	lsl.w	r2, r1, r2
 8001534:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	2b00      	cmp	r3, #0
 800153c:	d06a      	beq.n	8001614 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001546:	e065      	b.n	8001614 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	2202      	movs	r2, #2
 800154e:	409a      	lsls	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d02c      	beq.n	80015b2 <HAL_DMA_IRQHandler+0xdc>
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d027      	beq.n	80015b2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0320 	and.w	r3, r3, #32
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10b      	bne.n	8001588 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 020a 	bic.w	r2, r2, #10
 800157e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001590:	2102      	movs	r1, #2
 8001592:	fa01 f202 	lsl.w	r2, r1, r2
 8001596:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d035      	beq.n	8001614 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80015b0:	e030      	b.n	8001614 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	2208      	movs	r2, #8
 80015b8:	409a      	lsls	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4013      	ands	r3, r2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d028      	beq.n	8001614 <HAL_DMA_IRQHandler+0x13e>
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d023      	beq.n	8001614 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 020e 	bic.w	r2, r2, #14
 80015da:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e4:	2101      	movs	r1, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	2b00      	cmp	r3, #0
 8001608:	d004      	beq.n	8001614 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	4798      	blx	r3
    }
  }
}  
 8001612:	e7ff      	b.n	8001614 <HAL_DMA_IRQHandler+0x13e>
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b10      	cmp	r3, #16
 8001648:	d108      	bne.n	800165c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800165a:	e007      	b.n	800166c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	60da      	str	r2, [r3, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <DMA_CalcBaseAndBitshift+0x34>)
 8001688:	4413      	add	r3, r2
 800168a:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <DMA_CalcBaseAndBitshift+0x38>)
 800168c:	fba2 2303 	umull	r2, r3, r2, r3
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	009a      	lsls	r2, r3, #2
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <DMA_CalcBaseAndBitshift+0x3c>)
 800169c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	bffdfff8 	.word	0xbffdfff8
 80016b0:	cccccccd 	.word	0xcccccccd
 80016b4:	40020000 	.word	0x40020000

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c6:	e14e      	b.n	8001966 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2101      	movs	r1, #1
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	4013      	ands	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 8140 	beq.w	8001960 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d005      	beq.n	80016f8 <HAL_GPIO_Init+0x40>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d130      	bne.n	800175a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800172e:	2201      	movs	r2, #1
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f003 0201 	and.w	r2, r3, #1
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b03      	cmp	r3, #3
 8001764:	d017      	beq.n	8001796 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d123      	bne.n	80017ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3208      	adds	r2, #8
 80017aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	220f      	movs	r2, #15
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	08da      	lsrs	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3208      	adds	r2, #8
 80017e4:	6939      	ldr	r1, [r7, #16]
 80017e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0203 	and.w	r2, r3, #3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 809a 	beq.w	8001960 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182c:	4b55      	ldr	r3, [pc, #340]	; (8001984 <HAL_GPIO_Init+0x2cc>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a54      	ldr	r2, [pc, #336]	; (8001984 <HAL_GPIO_Init+0x2cc>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b52      	ldr	r3, [pc, #328]	; (8001984 <HAL_GPIO_Init+0x2cc>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001844:	4a50      	ldr	r2, [pc, #320]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	220f      	movs	r2, #15
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800186e:	d013      	beq.n	8001898 <HAL_GPIO_Init+0x1e0>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a46      	ldr	r2, [pc, #280]	; (800198c <HAL_GPIO_Init+0x2d4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d00d      	beq.n	8001894 <HAL_GPIO_Init+0x1dc>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a45      	ldr	r2, [pc, #276]	; (8001990 <HAL_GPIO_Init+0x2d8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d007      	beq.n	8001890 <HAL_GPIO_Init+0x1d8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a44      	ldr	r2, [pc, #272]	; (8001994 <HAL_GPIO_Init+0x2dc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d101      	bne.n	800188c <HAL_GPIO_Init+0x1d4>
 8001888:	2303      	movs	r3, #3
 800188a:	e006      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 800188c:	2305      	movs	r3, #5
 800188e:	e004      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001890:	2302      	movs	r3, #2
 8001892:	e002      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001898:	2300      	movs	r3, #0
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	f002 0203 	and.w	r2, r2, #3
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	4093      	lsls	r3, r2
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018aa:	4937      	ldr	r1, [pc, #220]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018b8:	4b37      	ldr	r3, [pc, #220]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018dc:	4a2e      	ldr	r2, [pc, #184]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001906:	4a24      	ldr	r2, [pc, #144]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43db      	mvns	r3, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001930:	4a19      	ldr	r2, [pc, #100]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3301      	adds	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	f47f aea9 	bne.w	80016c8 <HAL_GPIO_Init+0x10>
  }
}
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	48000400 	.word	0x48000400
 8001990:	48000800 	.word	0x48000800
 8001994:	48000c00 	.word	0x48000c00
 8001998:	40010400 	.word	0x40010400

0800199c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	887b      	ldrh	r3, [r7, #2]
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
 80019b8:	e001      	b.n	80019be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a0c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	f001 b823 	b.w	8002a68 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 817d 	beq.w	8001d32 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a38:	4bbc      	ldr	r3, [pc, #752]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d00c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a44:	4bb9      	ldr	r3, [pc, #740]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d15c      	bne.n	8001b0a <HAL_RCC_OscConfig+0x10e>
 8001a50:	4bb6      	ldr	r3, [pc, #728]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5c:	d155      	bne.n	8001b0a <HAL_RCC_OscConfig+0x10e>
 8001a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a62:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a6a:	fa93 f3a3 	rbit	r3, r3
 8001a6e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d102      	bne.n	8001a90 <HAL_RCC_OscConfig+0x94>
 8001a8a:	4ba8      	ldr	r3, [pc, #672]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	e015      	b.n	8001abc <HAL_RCC_OscConfig+0xc0>
 8001a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a94:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001aac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ab8:	4b9c      	ldr	r3, [pc, #624]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ac0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001ac4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ac8:	fa92 f2a2 	rbit	r2, r2
 8001acc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001ad0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ad4:	fab2 f282 	clz	r2, r2
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	f042 0220 	orr.w	r2, r2, #32
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f002 021f 	and.w	r2, r2, #31
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 811f 	beq.w	8001d30 <HAL_RCC_OscConfig+0x334>
 8001af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 8116 	bne.w	8001d30 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f000 bfaf 	b.w	8002a68 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x12e>
 8001b1c:	4b83      	ldr	r3, [pc, #524]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a82      	ldr	r2, [pc, #520]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e036      	b.n	8001b98 <HAL_RCC_OscConfig+0x19c>
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x158>
 8001b3a:	4b7c      	ldr	r3, [pc, #496]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7b      	ldr	r2, [pc, #492]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b79      	ldr	r3, [pc, #484]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a78      	ldr	r2, [pc, #480]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e021      	b.n	8001b98 <HAL_RCC_OscConfig+0x19c>
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x184>
 8001b66:	4b71      	ldr	r3, [pc, #452]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a70      	ldr	r2, [pc, #448]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b6e      	ldr	r3, [pc, #440]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a6d      	ldr	r2, [pc, #436]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e00b      	b.n	8001b98 <HAL_RCC_OscConfig+0x19c>
 8001b80:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a69      	ldr	r2, [pc, #420]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b67      	ldr	r3, [pc, #412]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a66      	ldr	r2, [pc, #408]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b96:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b98:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	f023 020f 	bic.w	r2, r3, #15
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	495f      	ldr	r1, [pc, #380]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d059      	beq.n	8001c76 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7ff f8db 	bl	8000d7c <HAL_GetTick>
 8001bc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff f8d6 	bl	8000d7c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b64      	cmp	r3, #100	; 0x64
 8001bda:	d902      	bls.n	8001be2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	f000 bf43 	b.w	8002a68 <HAL_RCC_OscConfig+0x106c>
 8001be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001bf6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	095b      	lsrs	r3, r3, #5
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d102      	bne.n	8001c14 <HAL_RCC_OscConfig+0x218>
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	e015      	b.n	8001c40 <HAL_RCC_OscConfig+0x244>
 8001c14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c18:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c30:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c3c:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c44:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c48:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c4c:	fa92 f2a2 	rbit	r2, r2
 8001c50:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c54:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c58:	fab2 f282 	clz	r2, r2
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	f042 0220 	orr.w	r2, r2, #32
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	f002 021f 	and.w	r2, r2, #31
 8001c68:	2101      	movs	r1, #1
 8001c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0ab      	beq.n	8001bcc <HAL_RCC_OscConfig+0x1d0>
 8001c74:	e05d      	b.n	8001d32 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff f881 	bl	8000d7c <HAL_GetTick>
 8001c7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff f87c 	bl	8000d7c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b64      	cmp	r3, #100	; 0x64
 8001c8e:	d902      	bls.n	8001c96 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	f000 bee9 	b.w	8002a68 <HAL_RCC_OscConfig+0x106c>
 8001c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c9a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001caa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x2cc>
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	e015      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2f8>
 8001cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ccc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ce4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cf8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001cfc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d00:	fa92 f2a2 	rbit	r2, r2
 8001d04:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d08:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d0c:	fab2 f282 	clz	r2, r2
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	f042 0220 	orr.w	r2, r2, #32
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	f002 021f 	and.w	r2, r2, #31
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1ab      	bne.n	8001c80 <HAL_RCC_OscConfig+0x284>
 8001d28:	e003      	b.n	8001d32 <HAL_RCC_OscConfig+0x336>
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 817d 	beq.w	8002042 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d48:	4ba6      	ldr	r3, [pc, #664]	; (8001fe4 <HAL_RCC_OscConfig+0x5e8>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00b      	beq.n	8001d6c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d54:	4ba3      	ldr	r3, [pc, #652]	; (8001fe4 <HAL_RCC_OscConfig+0x5e8>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d172      	bne.n	8001e46 <HAL_RCC_OscConfig+0x44a>
 8001d60:	4ba0      	ldr	r3, [pc, #640]	; (8001fe4 <HAL_RCC_OscConfig+0x5e8>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d16c      	bne.n	8001e46 <HAL_RCC_OscConfig+0x44a>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d7e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d102      	bne.n	8001d9c <HAL_RCC_OscConfig+0x3a0>
 8001d96:	4b93      	ldr	r3, [pc, #588]	; (8001fe4 <HAL_RCC_OscConfig+0x5e8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	e013      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3c8>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001dae:	2302      	movs	r3, #2
 8001db0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001db4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001dc0:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <HAL_RCC_OscConfig+0x5e8>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001dca:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001dce:	fa92 f2a2 	rbit	r2, r2
 8001dd2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001dd6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001dda:	fab2 f282 	clz	r2, r2
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f042 0220 	orr.w	r2, r2, #32
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	f002 021f 	and.w	r2, r2, #31
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f202 	lsl.w	r2, r1, r2
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <HAL_RCC_OscConfig+0x410>
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d002      	beq.n	8001e0c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	f000 be2e 	b.w	8002a68 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b75      	ldr	r3, [pc, #468]	; (8001fe4 <HAL_RCC_OscConfig+0x5e8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	21f8      	movs	r1, #248	; 0xf8
 8001e22:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e2a:	fa91 f1a1 	rbit	r1, r1
 8001e2e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e32:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e36:	fab1 f181 	clz	r1, r1
 8001e3a:	b2c9      	uxtb	r1, r1
 8001e3c:	408b      	lsls	r3, r1
 8001e3e:	4969      	ldr	r1, [pc, #420]	; (8001fe4 <HAL_RCC_OscConfig+0x5e8>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e44:	e0fd      	b.n	8002042 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8088 	beq.w	8001f68 <HAL_RCC_OscConfig+0x56c>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2301      	movs	r3, #1
 8001e82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7fe ff7a 	bl	8000d7c <HAL_GetTick>
 8001e88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7fe ff75 	bl	8000d7c <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d902      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	f000 bde2 	b.w	8002a68 <HAL_RCC_OscConfig+0x106c>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001eb6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d102      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x4d8>
 8001ece:	4b45      	ldr	r3, [pc, #276]	; (8001fe4 <HAL_RCC_OscConfig+0x5e8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	e013      	b.n	8001efc <HAL_RCC_OscConfig+0x500>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001eec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ef8:	4b3a      	ldr	r3, [pc, #232]	; (8001fe4 <HAL_RCC_OscConfig+0x5e8>)
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	2202      	movs	r2, #2
 8001efe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f02:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f06:	fa92 f2a2 	rbit	r2, r2
 8001f0a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f0e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f12:	fab2 f282 	clz	r2, r2
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	f042 0220 	orr.w	r2, r2, #32
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	f002 021f 	and.w	r2, r2, #31
 8001f22:	2101      	movs	r1, #1
 8001f24:	fa01 f202 	lsl.w	r2, r1, r2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0af      	beq.n	8001e8e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_RCC_OscConfig+0x5e8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	21f8      	movs	r1, #248	; 0xf8
 8001f44:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f4c:	fa91 f1a1 	rbit	r1, r1
 8001f50:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f54:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001f58:	fab1 f181 	clz	r1, r1
 8001f5c:	b2c9      	uxtb	r1, r1
 8001f5e:	408b      	lsls	r3, r1
 8001f60:	4920      	ldr	r1, [pc, #128]	; (8001fe4 <HAL_RCC_OscConfig+0x5e8>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
 8001f66:	e06c      	b.n	8002042 <HAL_RCC_OscConfig+0x646>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2300      	movs	r3, #0
 8001f92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7fe fef2 	bl	8000d7c <HAL_GetTick>
 8001f98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7fe feed 	bl	8000d7c <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d902      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	f000 bd5a 	b.w	8002a68 <HAL_RCC_OscConfig+0x106c>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d104      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5ec>
 8001fde:	4b01      	ldr	r3, [pc, #4]	; (8001fe4 <HAL_RCC_OscConfig+0x5e8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	e015      	b.n	8002010 <HAL_RCC_OscConfig+0x614>
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002000:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800200c:	4bc8      	ldr	r3, [pc, #800]	; (8002330 <HAL_RCC_OscConfig+0x934>)
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	2202      	movs	r2, #2
 8002012:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002016:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800201a:	fa92 f2a2 	rbit	r2, r2
 800201e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002022:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002026:	fab2 f282 	clz	r2, r2
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	f042 0220 	orr.w	r2, r2, #32
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	f002 021f 	and.w	r2, r2, #31
 8002036:	2101      	movs	r1, #1
 8002038:	fa01 f202 	lsl.w	r2, r1, r2
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ad      	bne.n	8001f9e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8110 	beq.w	8002278 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d079      	beq.n	800215c <HAL_RCC_OscConfig+0x760>
 8002068:	2301      	movs	r3, #1
 800206a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800207a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	4bab      	ldr	r3, [pc, #684]	; (8002334 <HAL_RCC_OscConfig+0x938>)
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	461a      	mov	r2, r3
 800208e:	2301      	movs	r3, #1
 8002090:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002092:	f7fe fe73 	bl	8000d7c <HAL_GetTick>
 8002096:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209c:	f7fe fe6e 	bl	8000d7c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d902      	bls.n	80020b2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	f000 bcdb 	b.w	8002a68 <HAL_RCC_OscConfig+0x106c>
 80020b2:	2302      	movs	r3, #2
 80020b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80020c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020cc:	2202      	movs	r2, #2
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	fa93 f2a3 	rbit	r2, r3
 80020de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020f0:	2202      	movs	r2, #2
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	fa93 f2a3 	rbit	r2, r3
 8002102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002106:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800210a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210c:	4b88      	ldr	r3, [pc, #544]	; (8002330 <HAL_RCC_OscConfig+0x934>)
 800210e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002114:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002118:	2102      	movs	r1, #2
 800211a:	6019      	str	r1, [r3, #0]
 800211c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002120:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	fa93 f1a3 	rbit	r1, r3
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002132:	6019      	str	r1, [r3, #0]
  return result;
 8002134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002138:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	2101      	movs	r1, #1
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0a0      	beq.n	800209c <HAL_RCC_OscConfig+0x6a0>
 800215a:	e08d      	b.n	8002278 <HAL_RCC_OscConfig+0x87c>
 800215c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002160:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002164:	2201      	movs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	fa93 f2a3 	rbit	r2, r3
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800217e:	601a      	str	r2, [r3, #0]
  return result;
 8002180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002184:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002188:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	4b68      	ldr	r3, [pc, #416]	; (8002334 <HAL_RCC_OscConfig+0x938>)
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	461a      	mov	r2, r3
 800219a:	2300      	movs	r3, #0
 800219c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219e:	f7fe fded 	bl	8000d7c <HAL_GetTick>
 80021a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a6:	e00a      	b.n	80021be <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a8:	f7fe fde8 	bl	8000d7c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d902      	bls.n	80021be <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	f000 bc55 	b.w	8002a68 <HAL_RCC_OscConfig+0x106c>
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021c6:	2202      	movs	r2, #2
 80021c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	fa93 f2a3 	rbit	r2, r3
 80021d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021ea:	2202      	movs	r2, #2
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	fa93 f2a3 	rbit	r2, r3
 80021fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800220e:	2202      	movs	r2, #2
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	fa93 f2a3 	rbit	r2, r3
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002228:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_RCC_OscConfig+0x934>)
 800222c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002236:	2102      	movs	r1, #2
 8002238:	6019      	str	r1, [r3, #0]
 800223a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fa93 f1a3 	rbit	r1, r3
 8002248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002250:	6019      	str	r1, [r3, #0]
  return result;
 8002252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002256:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d197      	bne.n	80021a8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 81a1 	beq.w	80025d0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002294:	4b26      	ldr	r3, [pc, #152]	; (8002330 <HAL_RCC_OscConfig+0x934>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d116      	bne.n	80022ce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <HAL_RCC_OscConfig+0x934>)
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	4a22      	ldr	r2, [pc, #136]	; (8002330 <HAL_RCC_OscConfig+0x934>)
 80022a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022aa:	61d3      	str	r3, [r2, #28]
 80022ac:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_RCC_OscConfig+0x934>)
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022c8:	2301      	movs	r3, #1
 80022ca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_RCC_OscConfig+0x93c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d11a      	bne.n	8002310 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_RCC_OscConfig+0x93c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a16      	ldr	r2, [pc, #88]	; (8002338 <HAL_RCC_OscConfig+0x93c>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e6:	f7fe fd49 	bl	8000d7c <HAL_GetTick>
 80022ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	e009      	b.n	8002304 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f0:	f7fe fd44 	bl	8000d7c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b64      	cmp	r3, #100	; 0x64
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e3b1      	b.n	8002a68 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_RCC_OscConfig+0x93c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0ef      	beq.n	80022f0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d10d      	bne.n	800233c <HAL_RCC_OscConfig+0x940>
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_RCC_OscConfig+0x934>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4a02      	ldr	r2, [pc, #8]	; (8002330 <HAL_RCC_OscConfig+0x934>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6213      	str	r3, [r2, #32]
 800232c:	e03c      	b.n	80023a8 <HAL_RCC_OscConfig+0x9ac>
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	10908120 	.word	0x10908120
 8002338:	40007000 	.word	0x40007000
 800233c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002340:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10c      	bne.n	8002366 <HAL_RCC_OscConfig+0x96a>
 800234c:	4bc1      	ldr	r3, [pc, #772]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4ac0      	ldr	r2, [pc, #768]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 8002352:	f023 0301 	bic.w	r3, r3, #1
 8002356:	6213      	str	r3, [r2, #32]
 8002358:	4bbe      	ldr	r3, [pc, #760]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4abd      	ldr	r2, [pc, #756]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 800235e:	f023 0304 	bic.w	r3, r3, #4
 8002362:	6213      	str	r3, [r2, #32]
 8002364:	e020      	b.n	80023a8 <HAL_RCC_OscConfig+0x9ac>
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b05      	cmp	r3, #5
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x994>
 8002376:	4bb7      	ldr	r3, [pc, #732]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4ab6      	ldr	r2, [pc, #728]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 800237c:	f043 0304 	orr.w	r3, r3, #4
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	4bb4      	ldr	r3, [pc, #720]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4ab3      	ldr	r2, [pc, #716]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6213      	str	r3, [r2, #32]
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0x9ac>
 8002390:	4bb0      	ldr	r3, [pc, #704]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4aaf      	ldr	r2, [pc, #700]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6213      	str	r3, [r2, #32]
 800239c:	4bad      	ldr	r3, [pc, #692]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4aac      	ldr	r2, [pc, #688]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 80023a2:	f023 0304 	bic.w	r3, r3, #4
 80023a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 8081 	beq.w	80024bc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7fe fcdf 	bl	8000d7c <HAL_GetTick>
 80023be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c4:	f7fe fcda 	bl	8000d7c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e345      	b.n	8002a68 <HAL_RCC_OscConfig+0x106c>
 80023dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80023e4:	2202      	movs	r2, #2
 80023e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	fa93 f2a3 	rbit	r2, r3
 80023f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002404:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002408:	2202      	movs	r2, #2
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002410:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	fa93 f2a3 	rbit	r2, r3
 800241a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002422:	601a      	str	r2, [r3, #0]
  return result;
 8002424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002428:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800242c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d102      	bne.n	8002448 <HAL_RCC_OscConfig+0xa4c>
 8002442:	4b84      	ldr	r3, [pc, #528]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	e013      	b.n	8002470 <HAL_RCC_OscConfig+0xa74>
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002450:	2202      	movs	r2, #2
 8002452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	fa93 f2a3 	rbit	r2, r3
 8002462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002466:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	4b79      	ldr	r3, [pc, #484]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002474:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002478:	2102      	movs	r1, #2
 800247a:	6011      	str	r1, [r2, #0]
 800247c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002480:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	fa92 f1a2 	rbit	r1, r2
 800248a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800248e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002492:	6011      	str	r1, [r2, #0]
  return result;
 8002494:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002498:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	fab2 f282 	clz	r2, r2
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	f002 021f 	and.w	r2, r2, #31
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d084      	beq.n	80023c4 <HAL_RCC_OscConfig+0x9c8>
 80024ba:	e07f      	b.n	80025bc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024bc:	f7fe fc5e 	bl	8000d7c <HAL_GetTick>
 80024c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	e00b      	b.n	80024de <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe fc59 	bl	8000d7c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e2c4      	b.n	8002a68 <HAL_RCC_OscConfig+0x106c>
 80024de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80024e6:	2202      	movs	r2, #2
 80024e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	fa93 f2a3 	rbit	r2, r3
 80024f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002506:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800250a:	2202      	movs	r2, #2
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f2a3 	rbit	r2, r3
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002524:	601a      	str	r2, [r3, #0]
  return result;
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800252e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f043 0302 	orr.w	r3, r3, #2
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d102      	bne.n	800254a <HAL_RCC_OscConfig+0xb4e>
 8002544:	4b43      	ldr	r3, [pc, #268]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	e013      	b.n	8002572 <HAL_RCC_OscConfig+0xb76>
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002552:	2202      	movs	r2, #2
 8002554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	4b39      	ldr	r3, [pc, #228]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002576:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800257a:	2102      	movs	r1, #2
 800257c:	6011      	str	r1, [r2, #0]
 800257e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002582:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	fa92 f1a2 	rbit	r1, r2
 800258c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002590:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002594:	6011      	str	r1, [r2, #0]
  return result;
 8002596:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800259a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	fab2 f282 	clz	r2, r2
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	f002 021f 	and.w	r2, r2, #31
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f202 	lsl.w	r2, r1, r2
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d184      	bne.n	80024c6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d105      	bne.n	80025d0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c4:	4b23      	ldr	r3, [pc, #140]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4a22      	ldr	r2, [pc, #136]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 80025ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8242 	beq.w	8002a66 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <HAL_RCC_OscConfig+0xc58>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	f000 8213 	beq.w	8002a16 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	f040 8162 	bne.w	80028c6 <HAL_RCC_OscConfig+0xeca>
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800260a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800260e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	fa93 f2a3 	rbit	r2, r3
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002626:	601a      	str	r2, [r3, #0]
  return result;
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002630:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800263c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	461a      	mov	r2, r3
 8002644:	2300      	movs	r3, #0
 8002646:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fb98 	bl	8000d7c <HAL_GetTick>
 800264c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002650:	e00c      	b.n	800266c <HAL_RCC_OscConfig+0xc70>
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe fb90 	bl	8000d7c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e1fd      	b.n	8002a68 <HAL_RCC_OscConfig+0x106c>
 800266c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002670:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	fa93 f2a3 	rbit	r2, r3
 8002688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002690:	601a      	str	r2, [r3, #0]
  return result;
 8002692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002696:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800269a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d102      	bne.n	80026b6 <HAL_RCC_OscConfig+0xcba>
 80026b0:	4bb0      	ldr	r3, [pc, #704]	; (8002974 <HAL_RCC_OscConfig+0xf78>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	e027      	b.n	8002706 <HAL_RCC_OscConfig+0xd0a>
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	fa93 f2a3 	rbit	r2, r3
 80026d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80026e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	fa93 f2a3 	rbit	r2, r3
 80026f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	4b9c      	ldr	r3, [pc, #624]	; (8002974 <HAL_RCC_OscConfig+0xf78>)
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800270a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800270e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002712:	6011      	str	r1, [r2, #0]
 8002714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002718:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	fa92 f1a2 	rbit	r1, r2
 8002722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002726:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800272a:	6011      	str	r1, [r2, #0]
  return result;
 800272c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002730:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	fab2 f282 	clz	r2, r2
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	f042 0220 	orr.w	r2, r2, #32
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	f002 021f 	and.w	r2, r2, #31
 8002746:	2101      	movs	r1, #1
 8002748:	fa01 f202 	lsl.w	r2, r1, r2
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d182      	bne.n	8002658 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002752:	4b88      	ldr	r3, [pc, #544]	; (8002974 <HAL_RCC_OscConfig+0xf78>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	430b      	orrs	r3, r1
 8002774:	497f      	ldr	r1, [pc, #508]	; (8002974 <HAL_RCC_OscConfig+0xf78>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002782:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800279e:	601a      	str	r2, [r3, #0]
  return result;
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027a8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	461a      	mov	r2, r3
 80027bc:	2301      	movs	r3, #1
 80027be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7fe fadc 	bl	8000d7c <HAL_GetTick>
 80027c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c8:	e009      	b.n	80027de <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ca:	f7fe fad7 	bl	8000d7c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e144      	b.n	8002a68 <HAL_RCC_OscConfig+0x106c>
 80027de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80027e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	fa93 f2a3 	rbit	r2, r3
 80027fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002802:	601a      	str	r2, [r3, #0]
  return result;
 8002804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002808:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800280c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d102      	bne.n	8002828 <HAL_RCC_OscConfig+0xe2c>
 8002822:	4b54      	ldr	r3, [pc, #336]	; (8002974 <HAL_RCC_OscConfig+0xf78>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	e027      	b.n	8002878 <HAL_RCC_OscConfig+0xe7c>
 8002828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	fa93 f2a3 	rbit	r2, r3
 8002844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002848:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002856:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	fa93 f2a3 	rbit	r2, r3
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	4b3f      	ldr	r3, [pc, #252]	; (8002974 <HAL_RCC_OscConfig+0xf78>)
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800287c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002880:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002884:	6011      	str	r1, [r2, #0]
 8002886:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800288a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	fa92 f1a2 	rbit	r1, r2
 8002894:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002898:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800289c:	6011      	str	r1, [r2, #0]
  return result;
 800289e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028a2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	fab2 f282 	clz	r2, r2
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f042 0220 	orr.w	r2, r2, #32
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	f002 021f 	and.w	r2, r2, #31
 80028b8:	2101      	movs	r1, #1
 80028ba:	fa01 f202 	lsl.w	r2, r1, r2
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d082      	beq.n	80027ca <HAL_RCC_OscConfig+0xdce>
 80028c4:	e0cf      	b.n	8002a66 <HAL_RCC_OscConfig+0x106a>
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	fa93 f2a3 	rbit	r2, r3
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80028ea:	601a      	str	r2, [r3, #0]
  return result;
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80028f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002900:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	461a      	mov	r2, r3
 8002908:	2300      	movs	r3, #0
 800290a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe fa36 	bl	8000d7c <HAL_GetTick>
 8002910:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002914:	e009      	b.n	800292a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe fa31 	bl	8000d7c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e09e      	b.n	8002a68 <HAL_RCC_OscConfig+0x106c>
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002936:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	fa93 f2a3 	rbit	r2, r3
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800294e:	601a      	str	r2, [r3, #0]
  return result;
 8002950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002954:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002958:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d104      	bne.n	8002978 <HAL_RCC_OscConfig+0xf7c>
 800296e:	4b01      	ldr	r3, [pc, #4]	; (8002974 <HAL_RCC_OscConfig+0xf78>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	e029      	b.n	80029c8 <HAL_RCC_OscConfig+0xfcc>
 8002974:	40021000 	.word	0x40021000
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	fa93 f2a3 	rbit	r2, r3
 8002994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002998:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	fa93 f2a3 	rbit	r2, r3
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <HAL_RCC_OscConfig+0x1078>)
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029cc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80029d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029d4:	6011      	str	r1, [r2, #0]
 80029d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029da:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	fa92 f1a2 	rbit	r1, r2
 80029e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029e8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80029ec:	6011      	str	r1, [r2, #0]
  return result;
 80029ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029f2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	fab2 f282 	clz	r2, r2
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	f042 0220 	orr.w	r2, r2, #32
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	f002 021f 	and.w	r2, r2, #31
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d180      	bne.n	8002916 <HAL_RCC_OscConfig+0xf1a>
 8002a14:	e027      	b.n	8002a66 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e01e      	b.n	8002a68 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_RCC_OscConfig+0x1078>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a36:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d10b      	bne.n	8002a62 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d001      	beq.n	8002a66 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000

08002a78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b09e      	sub	sp, #120	; 0x78
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e162      	b.n	8002d56 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a90:	4b90      	ldr	r3, [pc, #576]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d910      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b8d      	ldr	r3, [pc, #564]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 0207 	bic.w	r2, r3, #7
 8002aa6:	498b      	ldr	r1, [pc, #556]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aae:	4b89      	ldr	r3, [pc, #548]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e14a      	b.n	8002d56 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002acc:	4b82      	ldr	r3, [pc, #520]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	497f      	ldr	r1, [pc, #508]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 80dc 	beq.w	8002ca4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d13c      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xf6>
 8002af4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002af8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d102      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xa6>
 8002b18:	4b6f      	ldr	r3, [pc, #444]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	e00f      	b.n	8002b3e <HAL_RCC_ClockConfig+0xc6>
 8002b1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	667b      	str	r3, [r7, #100]	; 0x64
 8002b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b30:	663b      	str	r3, [r7, #96]	; 0x60
 8002b32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b3a:	4b67      	ldr	r3, [pc, #412]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b42:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b46:	fa92 f2a2 	rbit	r2, r2
 8002b4a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b4e:	fab2 f282 	clz	r2, r2
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	f042 0220 	orr.w	r2, r2, #32
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	f002 021f 	and.w	r2, r2, #31
 8002b5e:	2101      	movs	r1, #1
 8002b60:	fa01 f202 	lsl.w	r2, r1, r2
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d17b      	bne.n	8002c62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e0f3      	b.n	8002d56 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d13c      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0x178>
 8002b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d102      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x128>
 8002b9a:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	e00f      	b.n	8002bc0 <HAL_RCC_ClockConfig+0x148>
 8002ba0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	647b      	str	r3, [r7, #68]	; 0x44
 8002bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bb2:	643b      	str	r3, [r7, #64]	; 0x40
 8002bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bbc:	4b46      	ldr	r3, [pc, #280]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bc4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bc8:	fa92 f2a2 	rbit	r2, r2
 8002bcc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd0:	fab2 f282 	clz	r2, r2
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f042 0220 	orr.w	r2, r2, #32
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	f002 021f 	and.w	r2, r2, #31
 8002be0:	2101      	movs	r1, #1
 8002be2:	fa01 f202 	lsl.w	r2, r1, r2
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d13a      	bne.n	8002c62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0b2      	b.n	8002d56 <HAL_RCC_ClockConfig+0x2de>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d102      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x1a0>
 8002c12:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	e00d      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1bc>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
 8002c24:	2302      	movs	r3, #2
 8002c26:	623b      	str	r3, [r7, #32]
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	2202      	movs	r2, #2
 8002c36:	61ba      	str	r2, [r7, #24]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	fa92 f2a2 	rbit	r2, r2
 8002c3e:	617a      	str	r2, [r7, #20]
  return result;
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	fab2 f282 	clz	r2, r2
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	f042 0220 	orr.w	r2, r2, #32
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	f002 021f 	and.w	r2, r2, #31
 8002c52:	2101      	movs	r1, #1
 8002c54:	fa01 f202 	lsl.w	r2, r1, r2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e079      	b.n	8002d56 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f023 0203 	bic.w	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	491a      	ldr	r1, [pc, #104]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c74:	f7fe f882 	bl	8000d7c <HAL_GetTick>
 8002c78:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c7c:	f7fe f87e 	bl	8000d7c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e061      	b.n	8002d56 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 020c 	and.w	r2, r3, #12
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d1eb      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d214      	bcs.n	8002cdc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 0207 	bic.w	r2, r3, #7
 8002cba:	4906      	ldr	r1, [pc, #24]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <HAL_RCC_ClockConfig+0x25c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e040      	b.n	8002d56 <HAL_RCC_ClockConfig+0x2de>
 8002cd4:	40022000 	.word	0x40022000
 8002cd8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <HAL_RCC_ClockConfig+0x2e8>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	491a      	ldr	r1, [pc, #104]	; (8002d60 <HAL_RCC_ClockConfig+0x2e8>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d009      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d06:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <HAL_RCC_ClockConfig+0x2e8>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4912      	ldr	r1, [pc, #72]	; (8002d60 <HAL_RCC_ClockConfig+0x2e8>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d1a:	f000 f829 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002d1e:	4601      	mov	r1, r0
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <HAL_RCC_ClockConfig+0x2e8>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d28:	22f0      	movs	r2, #240	; 0xf0
 8002d2a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	fa92 f2a2 	rbit	r2, r2
 8002d32:	60fa      	str	r2, [r7, #12]
  return result;
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	fab2 f282 	clz	r2, r2
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	40d3      	lsrs	r3, r2
 8002d3e:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <HAL_RCC_ClockConfig+0x2ec>)
 8002d40:	5cd3      	ldrb	r3, [r2, r3]
 8002d42:	fa21 f303 	lsr.w	r3, r1, r3
 8002d46:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <HAL_RCC_ClockConfig+0x2f0>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <HAL_RCC_ClockConfig+0x2f4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd ffd0 	bl	8000cf4 <HAL_InitTick>
  
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3778      	adds	r7, #120	; 0x78
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	080048b0 	.word	0x080048b0
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	20000004 	.word	0x20000004

08002d70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b08b      	sub	sp, #44	; 0x2c
 8002d74:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d8a:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d002      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x30>
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0x36>
 8002d9e:	e03c      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002da0:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002da2:	623b      	str	r3, [r7, #32]
      break;
 8002da4:	e03c      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002dac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002db0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	fa92 f2a2 	rbit	r2, r2
 8002db8:	607a      	str	r2, [r7, #4]
  return result;
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	fab2 f282 	clz	r2, r2
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	40d3      	lsrs	r3, r2
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dc6:	5cd3      	ldrb	r3, [r2, r3]
 8002dc8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002dca:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	fa92 f2a2 	rbit	r2, r2
 8002ddc:	60fa      	str	r2, [r7, #12]
  return result;
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	fab2 f282 	clz	r2, r2
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	40d3      	lsrs	r3, r2
 8002de8:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002dea:	5cd3      	ldrb	r3, [r2, r3]
 8002dec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002df8:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
 8002e08:	e004      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	4a0c      	ldr	r2, [pc, #48]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	623b      	str	r3, [r7, #32]
      break;
 8002e18:	e002      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e1c:	623b      	str	r3, [r7, #32]
      break;
 8002e1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e20:	6a3b      	ldr	r3, [r7, #32]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	372c      	adds	r7, #44	; 0x2c
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
 8002e34:	00f42400 	.word	0x00f42400
 8002e38:	080048c8 	.word	0x080048c8
 8002e3c:	080048d8 	.word	0x080048d8
 8002e40:	003d0900 	.word	0x003d0900
 8002e44:	007a1200 	.word	0x007a1200

08002e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000000 	.word	0x20000000

08002e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e66:	f7ff ffef 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e6a:	4601      	mov	r1, r0
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e74:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	fa92 f2a2 	rbit	r2, r2
 8002e80:	603a      	str	r2, [r7, #0]
  return result;
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	fab2 f282 	clz	r2, r2
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	40d3      	lsrs	r3, r2
 8002e8c:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e8e:	5cd3      	ldrb	r3, [r2, r3]
 8002e90:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	080048c0 	.word	0x080048c0

08002ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002eaa:	f7ff ffcd 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002eae:	4601      	mov	r1, r0
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002eb8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ebc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	fa92 f2a2 	rbit	r2, r2
 8002ec4:	603a      	str	r2, [r7, #0]
  return result;
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	fab2 f282 	clz	r2, r2
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	40d3      	lsrs	r3, r2
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ed2:	5cd3      	ldrb	r3, [r2, r3]
 8002ed4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	080048c0 	.word	0x080048c0

08002ee8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e049      	b.n	8002f8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fd fd9e 	bl	8000a50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f000 fd30 	bl	800398c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	e03c      	b.n	800303e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d109      	bne.n	8002fde <HAL_TIM_PWM_Start_DMA+0x46>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	bf0c      	ite	eq
 8002fd6:	2301      	moveq	r3, #1
 8002fd8:	2300      	movne	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	e02f      	b.n	800303e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d109      	bne.n	8002ff8 <HAL_TIM_PWM_Start_DMA+0x60>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e022      	b.n	800303e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	d109      	bne.n	8003012 <HAL_TIM_PWM_Start_DMA+0x7a>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	e015      	b.n	800303e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b10      	cmp	r3, #16
 8003016:	d109      	bne.n	800302c <HAL_TIM_PWM_Start_DMA+0x94>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e008      	b.n	800303e <HAL_TIM_PWM_Start_DMA+0xa6>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
 8003044:	e197      	b.n	8003376 <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_TIM_PWM_Start_DMA+0xc8>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e03c      	b.n	80030da <HAL_TIM_PWM_Start_DMA+0x142>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b04      	cmp	r3, #4
 8003064:	d109      	bne.n	800307a <HAL_TIM_PWM_Start_DMA+0xe2>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	bf0c      	ite	eq
 8003072:	2301      	moveq	r3, #1
 8003074:	2300      	movne	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	e02f      	b.n	80030da <HAL_TIM_PWM_Start_DMA+0x142>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d109      	bne.n	8003094 <HAL_TIM_PWM_Start_DMA+0xfc>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b01      	cmp	r3, #1
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	e022      	b.n	80030da <HAL_TIM_PWM_Start_DMA+0x142>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d109      	bne.n	80030ae <HAL_TIM_PWM_Start_DMA+0x116>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	e015      	b.n	80030da <HAL_TIM_PWM_Start_DMA+0x142>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d109      	bne.n	80030c8 <HAL_TIM_PWM_Start_DMA+0x130>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e008      	b.n	80030da <HAL_TIM_PWM_Start_DMA+0x142>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d034      	beq.n	8003148 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d104      	bne.n	80030ee <HAL_TIM_PWM_Start_DMA+0x156>
 80030e4:	887b      	ldrh	r3, [r7, #2]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e143      	b.n	8003376 <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d104      	bne.n	80030fe <HAL_TIM_PWM_Start_DMA+0x166>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030fc:	e026      	b.n	800314c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b04      	cmp	r3, #4
 8003102:	d104      	bne.n	800310e <HAL_TIM_PWM_Start_DMA+0x176>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800310c:	e01e      	b.n	800314c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b08      	cmp	r3, #8
 8003112:	d104      	bne.n	800311e <HAL_TIM_PWM_Start_DMA+0x186>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800311c:	e016      	b.n	800314c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b0c      	cmp	r3, #12
 8003122:	d104      	bne.n	800312e <HAL_TIM_PWM_Start_DMA+0x196>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800312c:	e00e      	b.n	800314c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b10      	cmp	r3, #16
 8003132:	d104      	bne.n	800313e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800313c:	e006      	b.n	800314c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003146:	e001      	b.n	800314c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e114      	b.n	8003376 <HAL_TIM_PWM_Start_DMA+0x3de>
  }

  switch (Channel)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b0c      	cmp	r3, #12
 8003150:	f200 80ae 	bhi.w	80032b0 <HAL_TIM_PWM_Start_DMA+0x318>
 8003154:	a201      	add	r2, pc, #4	; (adr r2, 800315c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315a:	bf00      	nop
 800315c:	08003191 	.word	0x08003191
 8003160:	080032b1 	.word	0x080032b1
 8003164:	080032b1 	.word	0x080032b1
 8003168:	080032b1 	.word	0x080032b1
 800316c:	080031d9 	.word	0x080031d9
 8003170:	080032b1 	.word	0x080032b1
 8003174:	080032b1 	.word	0x080032b1
 8003178:	080032b1 	.word	0x080032b1
 800317c:	08003221 	.word	0x08003221
 8003180:	080032b1 	.word	0x080032b1
 8003184:	080032b1 	.word	0x080032b1
 8003188:	080032b1 	.word	0x080032b1
 800318c:	08003269 	.word	0x08003269
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	4a7a      	ldr	r2, [pc, #488]	; (8003380 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	4a79      	ldr	r2, [pc, #484]	; (8003384 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800319e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	4a78      	ldr	r2, [pc, #480]	; (8003388 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3334      	adds	r3, #52	; 0x34
 80031b4:	461a      	mov	r2, r3
 80031b6:	887b      	ldrh	r3, [r7, #2]
 80031b8:	f7fe f8f0 	bl	800139c <HAL_DMA_Start_IT>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e0d7      	b.n	8003376 <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d4:	60da      	str	r2, [r3, #12]
      break;
 80031d6:	e06e      	b.n	80032b6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	4a68      	ldr	r2, [pc, #416]	; (8003380 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80031de:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	4a67      	ldr	r2, [pc, #412]	; (8003384 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80031e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	4a66      	ldr	r2, [pc, #408]	; (8003388 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3338      	adds	r3, #56	; 0x38
 80031fc:	461a      	mov	r2, r3
 80031fe:	887b      	ldrh	r3, [r7, #2]
 8003200:	f7fe f8cc 	bl	800139c <HAL_DMA_Start_IT>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0b3      	b.n	8003376 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800321c:	60da      	str	r2, [r3, #12]
      break;
 800321e:	e04a      	b.n	80032b6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	4a56      	ldr	r2, [pc, #344]	; (8003380 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003226:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	4a55      	ldr	r2, [pc, #340]	; (8003384 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	4a54      	ldr	r2, [pc, #336]	; (8003388 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003236:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	333c      	adds	r3, #60	; 0x3c
 8003244:	461a      	mov	r2, r3
 8003246:	887b      	ldrh	r3, [r7, #2]
 8003248:	f7fe f8a8 	bl	800139c <HAL_DMA_Start_IT>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e08f      	b.n	8003376 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003264:	60da      	str	r2, [r3, #12]
      break;
 8003266:	e026      	b.n	80032b6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	4a44      	ldr	r2, [pc, #272]	; (8003380 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800326e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	4a43      	ldr	r2, [pc, #268]	; (8003384 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003276:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	4a42      	ldr	r2, [pc, #264]	; (8003388 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800327e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3340      	adds	r3, #64	; 0x40
 800328c:	461a      	mov	r2, r3
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	f7fe f884 	bl	800139c <HAL_DMA_Start_IT>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e06b      	b.n	8003376 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032ac:	60da      	str	r2, [r3, #12]
      break;
 80032ae:	e002      	b.n	80032b6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	75fb      	strb	r3, [r7, #23]
      break;
 80032b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d15b      	bne.n	8003374 <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2201      	movs	r2, #1
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fe7f 	bl	8003fc8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2f      	ldr	r2, [pc, #188]	; (800338c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00e      	beq.n	80032f2 <HAL_TIM_PWM_Start_DMA+0x35a>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2d      	ldr	r2, [pc, #180]	; (8003390 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d009      	beq.n	80032f2 <HAL_TIM_PWM_Start_DMA+0x35a>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2c      	ldr	r2, [pc, #176]	; (8003394 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d004      	beq.n	80032f2 <HAL_TIM_PWM_Start_DMA+0x35a>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2a      	ldr	r2, [pc, #168]	; (8003398 <HAL_TIM_PWM_Start_DMA+0x400>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_PWM_Start_DMA+0x35e>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_TIM_PWM_Start_DMA+0x360>
 80032f6:	2300      	movs	r3, #0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800330a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1e      	ldr	r2, [pc, #120]	; (800338c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00e      	beq.n	8003334 <HAL_TIM_PWM_Start_DMA+0x39c>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331e:	d009      	beq.n	8003334 <HAL_TIM_PWM_Start_DMA+0x39c>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1d      	ldr	r2, [pc, #116]	; (800339c <HAL_TIM_PWM_Start_DMA+0x404>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d004      	beq.n	8003334 <HAL_TIM_PWM_Start_DMA+0x39c>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a18      	ldr	r2, [pc, #96]	; (8003390 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d115      	bne.n	8003360 <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <HAL_TIM_PWM_Start_DMA+0x408>)
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b06      	cmp	r3, #6
 8003344:	d015      	beq.n	8003372 <HAL_TIM_PWM_Start_DMA+0x3da>
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334c:	d011      	beq.n	8003372 <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335e:	e008      	b.n	8003372 <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e000      	b.n	8003374 <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003372:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003374:	7dfb      	ldrb	r3, [r7, #23]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	0800387b 	.word	0x0800387b
 8003384:	08003923 	.word	0x08003923
 8003388:	080037e9 	.word	0x080037e9
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40014000 	.word	0x40014000
 8003394:	40014400 	.word	0x40014400
 8003398:	40014800 	.word	0x40014800
 800339c:	40000400 	.word	0x40000400
 80033a0:	00010007 	.word	0x00010007

080033a4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d855      	bhi.n	8003464 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80033b8:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033f5 	.word	0x080033f5
 80033c4:	08003465 	.word	0x08003465
 80033c8:	08003465 	.word	0x08003465
 80033cc:	08003465 	.word	0x08003465
 80033d0:	08003411 	.word	0x08003411
 80033d4:	08003465 	.word	0x08003465
 80033d8:	08003465 	.word	0x08003465
 80033dc:	08003465 	.word	0x08003465
 80033e0:	0800342d 	.word	0x0800342d
 80033e4:	08003465 	.word	0x08003465
 80033e8:	08003465 	.word	0x08003465
 80033ec:	08003465 	.word	0x08003465
 80033f0:	08003449 	.word	0x08003449
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003402:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe f826 	bl	800145a <HAL_DMA_Abort_IT>
      break;
 800340e:	e02c      	b.n	800346a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe f818 	bl	800145a <HAL_DMA_Abort_IT>
      break;
 800342a:	e01e      	b.n	800346a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800343a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe f80a 	bl	800145a <HAL_DMA_Abort_IT>
      break;
 8003446:	e010      	b.n	800346a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003456:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd fffc 	bl	800145a <HAL_DMA_Abort_IT>
      break;
 8003462:	e002      	b.n	800346a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
      break;
 8003468:	bf00      	nop
  }

  if (status == HAL_OK)
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d17b      	bne.n	8003568 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2200      	movs	r2, #0
 8003476:	6839      	ldr	r1, [r7, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fda5 	bl	8003fc8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a3c      	ldr	r2, [pc, #240]	; (8003574 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00e      	beq.n	80034a6 <HAL_TIM_PWM_Stop_DMA+0x102>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a3a      	ldr	r2, [pc, #232]	; (8003578 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d009      	beq.n	80034a6 <HAL_TIM_PWM_Stop_DMA+0x102>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a39      	ldr	r2, [pc, #228]	; (800357c <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_TIM_PWM_Stop_DMA+0x102>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a37      	ldr	r2, [pc, #220]	; (8003580 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_TIM_PWM_Stop_DMA+0x106>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_TIM_PWM_Stop_DMA+0x108>
 80034aa:	2300      	movs	r3, #0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d017      	beq.n	80034e0 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6a1a      	ldr	r2, [r3, #32]
 80034b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10f      	bne.n	80034e0 <HAL_TIM_PWM_Stop_DMA+0x13c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6a1a      	ldr	r2, [r3, #32]
 80034c6:	f240 4344 	movw	r3, #1092	; 0x444
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_PWM_Stop_DMA+0x13c>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6a1a      	ldr	r2, [r3, #32]
 80034e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10f      	bne.n	8003510 <HAL_TIM_PWM_Stop_DMA+0x16c>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6a1a      	ldr	r2, [r3, #32]
 80034f6:	f240 4344 	movw	r3, #1092	; 0x444
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d107      	bne.n	8003510 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d104      	bne.n	8003520 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800351e:	e023      	b.n	8003568 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b04      	cmp	r3, #4
 8003524:	d104      	bne.n	8003530 <HAL_TIM_PWM_Stop_DMA+0x18c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800352e:	e01b      	b.n	8003568 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b08      	cmp	r3, #8
 8003534:	d104      	bne.n	8003540 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800353e:	e013      	b.n	8003568 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b0c      	cmp	r3, #12
 8003544:	d104      	bne.n	8003550 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800354e:	e00b      	b.n	8003568 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b10      	cmp	r3, #16
 8003554:	d104      	bne.n	8003560 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800355e:	e003      	b.n	8003568 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40014000 	.word	0x40014000
 800357c:	40014400 	.word	0x40014400
 8003580:	40014800 	.word	0x40014800

08003584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800359e:	2302      	movs	r3, #2
 80035a0:	e0ff      	b.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b14      	cmp	r3, #20
 80035ae:	f200 80f0 	bhi.w	8003792 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80035b2:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b8:	0800360d 	.word	0x0800360d
 80035bc:	08003793 	.word	0x08003793
 80035c0:	08003793 	.word	0x08003793
 80035c4:	08003793 	.word	0x08003793
 80035c8:	0800364d 	.word	0x0800364d
 80035cc:	08003793 	.word	0x08003793
 80035d0:	08003793 	.word	0x08003793
 80035d4:	08003793 	.word	0x08003793
 80035d8:	0800368f 	.word	0x0800368f
 80035dc:	08003793 	.word	0x08003793
 80035e0:	08003793 	.word	0x08003793
 80035e4:	08003793 	.word	0x08003793
 80035e8:	080036cf 	.word	0x080036cf
 80035ec:	08003793 	.word	0x08003793
 80035f0:	08003793 	.word	0x08003793
 80035f4:	08003793 	.word	0x08003793
 80035f8:	08003711 	.word	0x08003711
 80035fc:	08003793 	.word	0x08003793
 8003600:	08003793 	.word	0x08003793
 8003604:	08003793 	.word	0x08003793
 8003608:	08003751 	.word	0x08003751
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fa32 	bl	8003a7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0208 	orr.w	r2, r2, #8
 8003626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0204 	bic.w	r2, r2, #4
 8003636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6999      	ldr	r1, [r3, #24]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	619a      	str	r2, [r3, #24]
      break;
 800364a:	e0a5      	b.n	8003798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fa98 	bl	8003b88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6999      	ldr	r1, [r3, #24]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	021a      	lsls	r2, r3, #8
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	619a      	str	r2, [r3, #24]
      break;
 800368c:	e084      	b.n	8003798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	4618      	mov	r0, r3
 8003696:	f000 faf7 	bl	8003c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69da      	ldr	r2, [r3, #28]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0208 	orr.w	r2, r2, #8
 80036a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0204 	bic.w	r2, r2, #4
 80036b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69d9      	ldr	r1, [r3, #28]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	61da      	str	r2, [r3, #28]
      break;
 80036cc:	e064      	b.n	8003798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fb55 	bl	8003d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69d9      	ldr	r1, [r3, #28]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	021a      	lsls	r2, r3, #8
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	61da      	str	r2, [r3, #28]
      break;
 800370e:	e043      	b.n	8003798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fb98 	bl	8003e4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0208 	orr.w	r2, r2, #8
 800372a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0204 	bic.w	r2, r2, #4
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800374e:	e023      	b.n	8003798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fbd6 	bl	8003f08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003790:	e002      	b.n	8003798 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
      break;
 8003796:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop

080037ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d107      	bne.n	8003810 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800380e:	e02a      	b.n	8003866 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	429a      	cmp	r2, r3
 8003818:	d107      	bne.n	800382a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2202      	movs	r2, #2
 800381e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003828:	e01d      	b.n	8003866 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	d107      	bne.n	8003844 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2204      	movs	r2, #4
 8003838:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003842:	e010      	b.n	8003866 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	429a      	cmp	r2, r3
 800384c:	d107      	bne.n	800385e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2208      	movs	r2, #8
 8003852:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800385c:	e003      	b.n	8003866 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f7ff ffb4 	bl	80037d4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	771a      	strb	r2, [r3, #28]
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	429a      	cmp	r2, r3
 8003890:	d10b      	bne.n	80038aa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d136      	bne.n	800390e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a8:	e031      	b.n	800390e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d10b      	bne.n	80038cc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2202      	movs	r2, #2
 80038b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d125      	bne.n	800390e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ca:	e020      	b.n	800390e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d10b      	bne.n	80038ee <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2204      	movs	r2, #4
 80038da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d114      	bne.n	800390e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ec:	e00f      	b.n	800390e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d10a      	bne.n	800390e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2208      	movs	r2, #8
 80038fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d103      	bne.n	800390e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f7ff ff4c 	bl	80037ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	771a      	strb	r2, [r3, #28]
}
 800391a:	bf00      	nop
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	429a      	cmp	r2, r3
 8003938:	d103      	bne.n	8003942 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	771a      	strb	r2, [r3, #28]
 8003940:	e019      	b.n	8003976 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d103      	bne.n	8003954 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2202      	movs	r2, #2
 8003950:	771a      	strb	r2, [r3, #28]
 8003952:	e010      	b.n	8003976 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	429a      	cmp	r2, r3
 800395c:	d103      	bne.n	8003966 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2204      	movs	r2, #4
 8003962:	771a      	strb	r2, [r3, #28]
 8003964:	e007      	b.n	8003976 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	429a      	cmp	r2, r3
 800396e:	d102      	bne.n	8003976 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2208      	movs	r2, #8
 8003974:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f7ff ff22 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	771a      	strb	r2, [r3, #28]
}
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a32      	ldr	r2, [pc, #200]	; (8003a68 <TIM_Base_SetConfig+0xdc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d007      	beq.n	80039b4 <TIM_Base_SetConfig+0x28>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039aa:	d003      	beq.n	80039b4 <TIM_Base_SetConfig+0x28>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a2f      	ldr	r2, [pc, #188]	; (8003a6c <TIM_Base_SetConfig+0xe0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d108      	bne.n	80039c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a27      	ldr	r2, [pc, #156]	; (8003a68 <TIM_Base_SetConfig+0xdc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d013      	beq.n	80039f6 <TIM_Base_SetConfig+0x6a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d4:	d00f      	beq.n	80039f6 <TIM_Base_SetConfig+0x6a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a24      	ldr	r2, [pc, #144]	; (8003a6c <TIM_Base_SetConfig+0xe0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00b      	beq.n	80039f6 <TIM_Base_SetConfig+0x6a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <TIM_Base_SetConfig+0xe4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d007      	beq.n	80039f6 <TIM_Base_SetConfig+0x6a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a22      	ldr	r2, [pc, #136]	; (8003a74 <TIM_Base_SetConfig+0xe8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d003      	beq.n	80039f6 <TIM_Base_SetConfig+0x6a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a21      	ldr	r2, [pc, #132]	; (8003a78 <TIM_Base_SetConfig+0xec>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d108      	bne.n	8003a08 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a0e      	ldr	r2, [pc, #56]	; (8003a68 <TIM_Base_SetConfig+0xdc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00b      	beq.n	8003a4c <TIM_Base_SetConfig+0xc0>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <TIM_Base_SetConfig+0xe4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_Base_SetConfig+0xc0>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a0d      	ldr	r2, [pc, #52]	; (8003a74 <TIM_Base_SetConfig+0xe8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_Base_SetConfig+0xc0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a0c      	ldr	r2, [pc, #48]	; (8003a78 <TIM_Base_SetConfig+0xec>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d103      	bne.n	8003a54 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	615a      	str	r2, [r3, #20]
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40012c00 	.word	0x40012c00
 8003a6c:	40000400 	.word	0x40000400
 8003a70:	40014000 	.word	0x40014000
 8003a74:	40014400 	.word	0x40014400
 8003a78:	40014800 	.word	0x40014800

08003a7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f023 0201 	bic.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0303 	bic.w	r3, r3, #3
 8003ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f023 0302 	bic.w	r3, r3, #2
 8003ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a28      	ldr	r2, [pc, #160]	; (8003b78 <TIM_OC1_SetConfig+0xfc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00b      	beq.n	8003af4 <TIM_OC1_SetConfig+0x78>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a27      	ldr	r2, [pc, #156]	; (8003b7c <TIM_OC1_SetConfig+0x100>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d007      	beq.n	8003af4 <TIM_OC1_SetConfig+0x78>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a26      	ldr	r2, [pc, #152]	; (8003b80 <TIM_OC1_SetConfig+0x104>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d003      	beq.n	8003af4 <TIM_OC1_SetConfig+0x78>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a25      	ldr	r2, [pc, #148]	; (8003b84 <TIM_OC1_SetConfig+0x108>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d10c      	bne.n	8003b0e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0308 	bic.w	r3, r3, #8
 8003afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f023 0304 	bic.w	r3, r3, #4
 8003b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <TIM_OC1_SetConfig+0xfc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <TIM_OC1_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <TIM_OC1_SetConfig+0x100>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <TIM_OC1_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <TIM_OC1_SetConfig+0x104>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_OC1_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a16      	ldr	r2, [pc, #88]	; (8003b84 <TIM_OC1_SetConfig+0x108>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d111      	bne.n	8003b52 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	621a      	str	r2, [r3, #32]
}
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400
 8003b84:	40014800 	.word	0x40014800

08003b88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f023 0210 	bic.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0320 	bic.w	r3, r3, #32
 8003bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a24      	ldr	r2, [pc, #144]	; (8003c78 <TIM_OC2_SetConfig+0xf0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d10d      	bne.n	8003c08 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a1b      	ldr	r2, [pc, #108]	; (8003c78 <TIM_OC2_SetConfig+0xf0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00b      	beq.n	8003c28 <TIM_OC2_SetConfig+0xa0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <TIM_OC2_SetConfig+0xf4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <TIM_OC2_SetConfig+0xa0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a19      	ldr	r2, [pc, #100]	; (8003c80 <TIM_OC2_SetConfig+0xf8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_OC2_SetConfig+0xa0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <TIM_OC2_SetConfig+0xfc>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d113      	bne.n	8003c50 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c2e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c36:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40012c00 	.word	0x40012c00
 8003c7c:	40014000 	.word	0x40014000
 8003c80:	40014400 	.word	0x40014400
 8003c84:	40014800 	.word	0x40014800

08003c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <TIM_OC3_SetConfig+0xec>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d10d      	bne.n	8003d06 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d04:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a1a      	ldr	r2, [pc, #104]	; (8003d74 <TIM_OC3_SetConfig+0xec>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00b      	beq.n	8003d26 <TIM_OC3_SetConfig+0x9e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <TIM_OC3_SetConfig+0xf0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d007      	beq.n	8003d26 <TIM_OC3_SetConfig+0x9e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <TIM_OC3_SetConfig+0xf4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_OC3_SetConfig+0x9e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <TIM_OC3_SetConfig+0xf8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d113      	bne.n	8003d4e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	621a      	str	r2, [r3, #32]
}
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	40014000 	.word	0x40014000
 8003d7c:	40014400 	.word	0x40014400
 8003d80:	40014800 	.word	0x40014800

08003d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	031b      	lsls	r3, r3, #12
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <TIM_OC4_SetConfig+0xb8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00b      	beq.n	8003e00 <TIM_OC4_SetConfig+0x7c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <TIM_OC4_SetConfig+0xbc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d007      	beq.n	8003e00 <TIM_OC4_SetConfig+0x7c>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <TIM_OC4_SetConfig+0xc0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d003      	beq.n	8003e00 <TIM_OC4_SetConfig+0x7c>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a13      	ldr	r2, [pc, #76]	; (8003e48 <TIM_OC4_SetConfig+0xc4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d109      	bne.n	8003e14 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	019b      	lsls	r3, r3, #6
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40014000 	.word	0x40014000
 8003e44:	40014400 	.word	0x40014400
 8003e48:	40014800 	.word	0x40014800

08003e4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <TIM_OC5_SetConfig+0xac>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00b      	beq.n	8003ebe <TIM_OC5_SetConfig+0x72>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a14      	ldr	r2, [pc, #80]	; (8003efc <TIM_OC5_SetConfig+0xb0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d007      	beq.n	8003ebe <TIM_OC5_SetConfig+0x72>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <TIM_OC5_SetConfig+0xb4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_OC5_SetConfig+0x72>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <TIM_OC5_SetConfig+0xb8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d109      	bne.n	8003ed2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	621a      	str	r2, [r3, #32]
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800

08003f08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	051b      	lsls	r3, r3, #20
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <TIM_OC6_SetConfig+0xb0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00b      	beq.n	8003f7c <TIM_OC6_SetConfig+0x74>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <TIM_OC6_SetConfig+0xb4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <TIM_OC6_SetConfig+0x74>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <TIM_OC6_SetConfig+0xb8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_OC6_SetConfig+0x74>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a13      	ldr	r2, [pc, #76]	; (8003fc4 <TIM_OC6_SetConfig+0xbc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d109      	bne.n	8003f90 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	029b      	lsls	r3, r3, #10
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40012c00 	.word	0x40012c00
 8003fbc:	40014000 	.word	0x40014000
 8003fc0:	40014400 	.word	0x40014400
 8003fc4:	40014800 	.word	0x40014800

08003fc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f003 031f 	and.w	r3, r3, #31
 8003fda:	2201      	movs	r2, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1a      	ldr	r2, [r3, #32]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	401a      	ands	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1a      	ldr	r2, [r3, #32]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8004000:	431a      	orrs	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	621a      	str	r2, [r3, #32]
}
 8004006:	bf00      	nop
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
	...

08004014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004028:	2302      	movs	r3, #2
 800402a:	e054      	b.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a24      	ldr	r2, [pc, #144]	; (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d108      	bne.n	8004068 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800405c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a17      	ldr	r2, [pc, #92]	; (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00e      	beq.n	80040aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004094:	d009      	beq.n	80040aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d004      	beq.n	80040aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a11      	ldr	r2, [pc, #68]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d10c      	bne.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40012c00 	.word	0x40012c00
 80040e8:	40000400 	.word	0x40000400
 80040ec:	40014000 	.word	0x40014000

080040f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e040      	b.n	8004184 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fc fd24 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2224      	movs	r2, #36	; 0x24
 800411c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0201 	bic.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f82c 	bl	800418c <UART_SetConfig>
 8004134:	4603      	mov	r3, r0
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e022      	b.n	8004184 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f956 	bl	80043f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800415a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800416a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f9dd 	bl	800453c <UART_CheckIdleState>
 8004182:	4603      	mov	r3, r0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4b8a      	ldr	r3, [pc, #552]	; (80043e0 <UART_SetConfig+0x254>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	6979      	ldr	r1, [r7, #20]
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a78      	ldr	r2, [pc, #480]	; (80043e4 <UART_SetConfig+0x258>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d120      	bne.n	800424a <UART_SetConfig+0xbe>
 8004208:	4b77      	ldr	r3, [pc, #476]	; (80043e8 <UART_SetConfig+0x25c>)
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	2b03      	cmp	r3, #3
 8004212:	d817      	bhi.n	8004244 <UART_SetConfig+0xb8>
 8004214:	a201      	add	r2, pc, #4	; (adr r2, 800421c <UART_SetConfig+0x90>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	0800422d 	.word	0x0800422d
 8004220:	08004239 	.word	0x08004239
 8004224:	0800423f 	.word	0x0800423f
 8004228:	08004233 	.word	0x08004233
 800422c:	2300      	movs	r3, #0
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e01d      	b.n	800426e <UART_SetConfig+0xe2>
 8004232:	2302      	movs	r3, #2
 8004234:	77fb      	strb	r3, [r7, #31]
 8004236:	e01a      	b.n	800426e <UART_SetConfig+0xe2>
 8004238:	2304      	movs	r3, #4
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e017      	b.n	800426e <UART_SetConfig+0xe2>
 800423e:	2308      	movs	r3, #8
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e014      	b.n	800426e <UART_SetConfig+0xe2>
 8004244:	2310      	movs	r3, #16
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e011      	b.n	800426e <UART_SetConfig+0xe2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a67      	ldr	r2, [pc, #412]	; (80043ec <UART_SetConfig+0x260>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d102      	bne.n	800425a <UART_SetConfig+0xce>
 8004254:	2300      	movs	r3, #0
 8004256:	77fb      	strb	r3, [r7, #31]
 8004258:	e009      	b.n	800426e <UART_SetConfig+0xe2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a64      	ldr	r2, [pc, #400]	; (80043f0 <UART_SetConfig+0x264>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d102      	bne.n	800426a <UART_SetConfig+0xde>
 8004264:	2300      	movs	r3, #0
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e001      	b.n	800426e <UART_SetConfig+0xe2>
 800426a:	2310      	movs	r3, #16
 800426c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004276:	d15b      	bne.n	8004330 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004278:	7ffb      	ldrb	r3, [r7, #31]
 800427a:	2b08      	cmp	r3, #8
 800427c:	d827      	bhi.n	80042ce <UART_SetConfig+0x142>
 800427e:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <UART_SetConfig+0xf8>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	080042a9 	.word	0x080042a9
 8004288:	080042b1 	.word	0x080042b1
 800428c:	080042b9 	.word	0x080042b9
 8004290:	080042cf 	.word	0x080042cf
 8004294:	080042bf 	.word	0x080042bf
 8004298:	080042cf 	.word	0x080042cf
 800429c:	080042cf 	.word	0x080042cf
 80042a0:	080042cf 	.word	0x080042cf
 80042a4:	080042c7 	.word	0x080042c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a8:	f7fe fdda 	bl	8002e60 <HAL_RCC_GetPCLK1Freq>
 80042ac:	61b8      	str	r0, [r7, #24]
        break;
 80042ae:	e013      	b.n	80042d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b0:	f7fe fdf8 	bl	8002ea4 <HAL_RCC_GetPCLK2Freq>
 80042b4:	61b8      	str	r0, [r7, #24]
        break;
 80042b6:	e00f      	b.n	80042d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042b8:	4b4e      	ldr	r3, [pc, #312]	; (80043f4 <UART_SetConfig+0x268>)
 80042ba:	61bb      	str	r3, [r7, #24]
        break;
 80042bc:	e00c      	b.n	80042d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042be:	f7fe fd57 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 80042c2:	61b8      	str	r0, [r7, #24]
        break;
 80042c4:	e008      	b.n	80042d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ca:	61bb      	str	r3, [r7, #24]
        break;
 80042cc:	e004      	b.n	80042d8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	77bb      	strb	r3, [r7, #30]
        break;
 80042d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d074      	beq.n	80043c8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	005a      	lsls	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	441a      	add	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b0f      	cmp	r3, #15
 80042fa:	d916      	bls.n	800432a <UART_SetConfig+0x19e>
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004302:	d212      	bcs.n	800432a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f023 030f 	bic.w	r3, r3, #15
 800430c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	b29b      	uxth	r3, r3
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	b29a      	uxth	r2, r3
 800431a:	89fb      	ldrh	r3, [r7, #14]
 800431c:	4313      	orrs	r3, r2
 800431e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	89fa      	ldrh	r2, [r7, #14]
 8004326:	60da      	str	r2, [r3, #12]
 8004328:	e04e      	b.n	80043c8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	77bb      	strb	r3, [r7, #30]
 800432e:	e04b      	b.n	80043c8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004330:	7ffb      	ldrb	r3, [r7, #31]
 8004332:	2b08      	cmp	r3, #8
 8004334:	d827      	bhi.n	8004386 <UART_SetConfig+0x1fa>
 8004336:	a201      	add	r2, pc, #4	; (adr r2, 800433c <UART_SetConfig+0x1b0>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	08004361 	.word	0x08004361
 8004340:	08004369 	.word	0x08004369
 8004344:	08004371 	.word	0x08004371
 8004348:	08004387 	.word	0x08004387
 800434c:	08004377 	.word	0x08004377
 8004350:	08004387 	.word	0x08004387
 8004354:	08004387 	.word	0x08004387
 8004358:	08004387 	.word	0x08004387
 800435c:	0800437f 	.word	0x0800437f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004360:	f7fe fd7e 	bl	8002e60 <HAL_RCC_GetPCLK1Freq>
 8004364:	61b8      	str	r0, [r7, #24]
        break;
 8004366:	e013      	b.n	8004390 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004368:	f7fe fd9c 	bl	8002ea4 <HAL_RCC_GetPCLK2Freq>
 800436c:	61b8      	str	r0, [r7, #24]
        break;
 800436e:	e00f      	b.n	8004390 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004370:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <UART_SetConfig+0x268>)
 8004372:	61bb      	str	r3, [r7, #24]
        break;
 8004374:	e00c      	b.n	8004390 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004376:	f7fe fcfb 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 800437a:	61b8      	str	r0, [r7, #24]
        break;
 800437c:	e008      	b.n	8004390 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004382:	61bb      	str	r3, [r7, #24]
        break;
 8004384:	e004      	b.n	8004390 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	77bb      	strb	r3, [r7, #30]
        break;
 800438e:	bf00      	nop
    }

    if (pclk != 0U)
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d018      	beq.n	80043c8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	085a      	lsrs	r2, r3, #1
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	441a      	add	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b0f      	cmp	r3, #15
 80043b0:	d908      	bls.n	80043c4 <UART_SetConfig+0x238>
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b8:	d204      	bcs.n	80043c4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	60da      	str	r2, [r3, #12]
 80043c2:	e001      	b.n	80043c8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80043d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	efff69f3 	.word	0xefff69f3
 80043e4:	40013800 	.word	0x40013800
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40004400 	.word	0x40004400
 80043f0:	40004800 	.word	0x40004800
 80043f4:	007a1200 	.word	0x007a1200

080043f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01a      	beq.n	800450e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f6:	d10a      	bne.n	800450e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	605a      	str	r2, [r3, #4]
  }
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af02      	add	r7, sp, #8
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800454c:	f7fc fc16 	bl	8000d7c <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b08      	cmp	r3, #8
 800455e:	d10e      	bne.n	800457e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004560:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f82d 	bl	80045ce <UART_WaitOnFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e023      	b.n	80045c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b04      	cmp	r3, #4
 800458a:	d10e      	bne.n	80045aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800458c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f817 	bl	80045ce <UART_WaitOnFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e00d      	b.n	80045c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b09c      	sub	sp, #112	; 0x70
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	4613      	mov	r3, r2
 80045dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045de:	e0a5      	b.n	800472c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	f000 80a1 	beq.w	800472c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fc fbc7 	bl	8000d7c <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <UART_WaitOnFlagUntilTimeout+0x32>
 80045fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d13e      	bne.n	800467e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800460e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004610:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004614:	667b      	str	r3, [r7, #100]	; 0x64
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800461e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004620:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004624:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800462c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e6      	bne.n	8004600 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3308      	adds	r3, #8
 8004638:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	663b      	str	r3, [r7, #96]	; 0x60
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3308      	adds	r3, #8
 8004650:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004652:	64ba      	str	r2, [r7, #72]	; 0x48
 8004654:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e5      	bne.n	8004632 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e067      	b.n	800474e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d04f      	beq.n	800472c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469a:	d147      	bne.n	800472c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
 80046c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e6      	bne.n	80046a6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	613b      	str	r3, [r7, #16]
   return(result);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3308      	adds	r3, #8
 80046f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046f8:	623a      	str	r2, [r7, #32]
 80046fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	69f9      	ldr	r1, [r7, #28]
 80046fe:	6a3a      	ldr	r2, [r7, #32]
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	61bb      	str	r3, [r7, #24]
   return(result);
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e5      	bne.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e010      	b.n	800474e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69da      	ldr	r2, [r3, #28]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4013      	ands	r3, r2
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	429a      	cmp	r2, r3
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	461a      	mov	r2, r3
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	429a      	cmp	r2, r3
 8004748:	f43f af4a 	beq.w	80045e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3770      	adds	r7, #112	; 0x70
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <_ZdlPvj>:
 8004756:	f000 b800 	b.w	800475a <_ZdlPv>

0800475a <_ZdlPv>:
 800475a:	f000 b825 	b.w	80047a8 <free>
	...

08004760 <__libc_init_array>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	4d0d      	ldr	r5, [pc, #52]	; (8004798 <__libc_init_array+0x38>)
 8004764:	4c0d      	ldr	r4, [pc, #52]	; (800479c <__libc_init_array+0x3c>)
 8004766:	1b64      	subs	r4, r4, r5
 8004768:	10a4      	asrs	r4, r4, #2
 800476a:	2600      	movs	r6, #0
 800476c:	42a6      	cmp	r6, r4
 800476e:	d109      	bne.n	8004784 <__libc_init_array+0x24>
 8004770:	4d0b      	ldr	r5, [pc, #44]	; (80047a0 <__libc_init_array+0x40>)
 8004772:	4c0c      	ldr	r4, [pc, #48]	; (80047a4 <__libc_init_array+0x44>)
 8004774:	f000 f882 	bl	800487c <_init>
 8004778:	1b64      	subs	r4, r4, r5
 800477a:	10a4      	asrs	r4, r4, #2
 800477c:	2600      	movs	r6, #0
 800477e:	42a6      	cmp	r6, r4
 8004780:	d105      	bne.n	800478e <__libc_init_array+0x2e>
 8004782:	bd70      	pop	{r4, r5, r6, pc}
 8004784:	f855 3b04 	ldr.w	r3, [r5], #4
 8004788:	4798      	blx	r3
 800478a:	3601      	adds	r6, #1
 800478c:	e7ee      	b.n	800476c <__libc_init_array+0xc>
 800478e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004792:	4798      	blx	r3
 8004794:	3601      	adds	r6, #1
 8004796:	e7f2      	b.n	800477e <__libc_init_array+0x1e>
 8004798:	080048e8 	.word	0x080048e8
 800479c:	080048e8 	.word	0x080048e8
 80047a0:	080048e8 	.word	0x080048e8
 80047a4:	080048ec 	.word	0x080048ec

080047a8 <free>:
 80047a8:	4b02      	ldr	r3, [pc, #8]	; (80047b4 <free+0xc>)
 80047aa:	4601      	mov	r1, r0
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	f000 b80b 	b.w	80047c8 <_free_r>
 80047b2:	bf00      	nop
 80047b4:	2000000c 	.word	0x2000000c

080047b8 <memset>:
 80047b8:	4402      	add	r2, r0
 80047ba:	4603      	mov	r3, r0
 80047bc:	4293      	cmp	r3, r2
 80047be:	d100      	bne.n	80047c2 <memset+0xa>
 80047c0:	4770      	bx	lr
 80047c2:	f803 1b01 	strb.w	r1, [r3], #1
 80047c6:	e7f9      	b.n	80047bc <memset+0x4>

080047c8 <_free_r>:
 80047c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047ca:	2900      	cmp	r1, #0
 80047cc:	d044      	beq.n	8004858 <_free_r+0x90>
 80047ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d2:	9001      	str	r0, [sp, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f1a1 0404 	sub.w	r4, r1, #4
 80047da:	bfb8      	it	lt
 80047dc:	18e4      	addlt	r4, r4, r3
 80047de:	f000 f83f 	bl	8004860 <__malloc_lock>
 80047e2:	4a1e      	ldr	r2, [pc, #120]	; (800485c <_free_r+0x94>)
 80047e4:	9801      	ldr	r0, [sp, #4]
 80047e6:	6813      	ldr	r3, [r2, #0]
 80047e8:	b933      	cbnz	r3, 80047f8 <_free_r+0x30>
 80047ea:	6063      	str	r3, [r4, #4]
 80047ec:	6014      	str	r4, [r2, #0]
 80047ee:	b003      	add	sp, #12
 80047f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047f4:	f000 b83a 	b.w	800486c <__malloc_unlock>
 80047f8:	42a3      	cmp	r3, r4
 80047fa:	d908      	bls.n	800480e <_free_r+0x46>
 80047fc:	6825      	ldr	r5, [r4, #0]
 80047fe:	1961      	adds	r1, r4, r5
 8004800:	428b      	cmp	r3, r1
 8004802:	bf01      	itttt	eq
 8004804:	6819      	ldreq	r1, [r3, #0]
 8004806:	685b      	ldreq	r3, [r3, #4]
 8004808:	1949      	addeq	r1, r1, r5
 800480a:	6021      	streq	r1, [r4, #0]
 800480c:	e7ed      	b.n	80047ea <_free_r+0x22>
 800480e:	461a      	mov	r2, r3
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	b10b      	cbz	r3, 8004818 <_free_r+0x50>
 8004814:	42a3      	cmp	r3, r4
 8004816:	d9fa      	bls.n	800480e <_free_r+0x46>
 8004818:	6811      	ldr	r1, [r2, #0]
 800481a:	1855      	adds	r5, r2, r1
 800481c:	42a5      	cmp	r5, r4
 800481e:	d10b      	bne.n	8004838 <_free_r+0x70>
 8004820:	6824      	ldr	r4, [r4, #0]
 8004822:	4421      	add	r1, r4
 8004824:	1854      	adds	r4, r2, r1
 8004826:	42a3      	cmp	r3, r4
 8004828:	6011      	str	r1, [r2, #0]
 800482a:	d1e0      	bne.n	80047ee <_free_r+0x26>
 800482c:	681c      	ldr	r4, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	6053      	str	r3, [r2, #4]
 8004832:	4421      	add	r1, r4
 8004834:	6011      	str	r1, [r2, #0]
 8004836:	e7da      	b.n	80047ee <_free_r+0x26>
 8004838:	d902      	bls.n	8004840 <_free_r+0x78>
 800483a:	230c      	movs	r3, #12
 800483c:	6003      	str	r3, [r0, #0]
 800483e:	e7d6      	b.n	80047ee <_free_r+0x26>
 8004840:	6825      	ldr	r5, [r4, #0]
 8004842:	1961      	adds	r1, r4, r5
 8004844:	428b      	cmp	r3, r1
 8004846:	bf04      	itt	eq
 8004848:	6819      	ldreq	r1, [r3, #0]
 800484a:	685b      	ldreq	r3, [r3, #4]
 800484c:	6063      	str	r3, [r4, #4]
 800484e:	bf04      	itt	eq
 8004850:	1949      	addeq	r1, r1, r5
 8004852:	6021      	streq	r1, [r4, #0]
 8004854:	6054      	str	r4, [r2, #4]
 8004856:	e7ca      	b.n	80047ee <_free_r+0x26>
 8004858:	b003      	add	sp, #12
 800485a:	bd30      	pop	{r4, r5, pc}
 800485c:	200001cc 	.word	0x200001cc

08004860 <__malloc_lock>:
 8004860:	4801      	ldr	r0, [pc, #4]	; (8004868 <__malloc_lock+0x8>)
 8004862:	f000 b809 	b.w	8004878 <__retarget_lock_acquire_recursive>
 8004866:	bf00      	nop
 8004868:	200001d0 	.word	0x200001d0

0800486c <__malloc_unlock>:
 800486c:	4801      	ldr	r0, [pc, #4]	; (8004874 <__malloc_unlock+0x8>)
 800486e:	f000 b804 	b.w	800487a <__retarget_lock_release_recursive>
 8004872:	bf00      	nop
 8004874:	200001d0 	.word	0x200001d0

08004878 <__retarget_lock_acquire_recursive>:
 8004878:	4770      	bx	lr

0800487a <__retarget_lock_release_recursive>:
 800487a:	4770      	bx	lr

0800487c <_init>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	bf00      	nop
 8004880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004882:	bc08      	pop	{r3}
 8004884:	469e      	mov	lr, r3
 8004886:	4770      	bx	lr

08004888 <_fini>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	bf00      	nop
 800488c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488e:	bc08      	pop	{r3}
 8004890:	469e      	mov	lr, r3
 8004892:	4770      	bx	lr
